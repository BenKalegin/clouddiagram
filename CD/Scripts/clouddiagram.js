"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CloudDiagram;
(function (CloudDiagram) {
    var DiagramType;
    (function (DiagramType) {
        DiagramType[DiagramType["MindMap"] = 0] = "MindMap";
        DiagramType[DiagramType["UmlSequence"] = 1] = "UmlSequence";
        DiagramType[DiagramType["UmlUsecase"] = 2] = "UmlUsecase";
        DiagramType[DiagramType["UmlClass"] = 3] = "UmlClass";
        DiagramType[DiagramType["UmlActivity"] = 4] = "UmlActivity";
    })(DiagramType = CloudDiagram.DiagramType || (CloudDiagram.DiagramType = {}));
    function createNewDialog(events) { new CreateNewDialog(events).show(); }
    CloudDiagram.createNewDialog = createNewDialog;
    var CreateNewDialog = (function () {
        function CreateNewDialog(events) {
            this.events = events;
        }
        CreateNewDialog.prototype.onOk = function (ctx) {
            this.events.onSelected(this.selectedDiagramId);
            ctx.close();
        };
        CreateNewDialog.prototype.onLeafSelected = function (id) {
            this.selectedDiagramId = id;
            this.okButton.toggleEnable(true);
        };
        CreateNewDialog.prototype.sampleTree = function () {
            return {
                roots: [
                    {
                        name: "Decision Making",
                        folder: true,
                        children: [{ id: DiagramType.MindMap, name: "Mind Mapping Diagram", folder: false }]
                    }, {
                        name: "UML",
                        folder: true,
                        children: [
                            {
                                name: "Structural",
                                folder: true,
                                children: [
                                    { id: DiagramType.UmlUsecase, name: "Usecase Diagram", folder: false },
                                    { id: DiagramType.UmlClass, name: "Class Diagram", folder: false }
                                ]
                            }, {
                                name: "Behavioral",
                                folder: true,
                                children: [
                                    { id: DiagramType.UmlSequence, name: "Sequence Diagram", folder: false },
                                    { id: DiagramType.UmlActivity, name: "Activity Diagram", folder: false }
                                ]
                            }
                        ]
                    }
                ]
            };
        };
        CreateNewDialog.prototype.show = function () {
            var _this = this;
            var pane = document.createElement("div");
            var caption = document.createElement("p");
            caption.textContent = "Please select diagram type to create:";
            pane.appendChild(caption);
            CloudDiagram.createTreeWidget(pane, { onLeafSelected: function (id) { return _this.onLeafSelected(id); } }, this.sampleTree());
            var buttonId = "createDiagramButton";
            var options = {
                message: pane,
                type: BootstrapDialog.TYPE_PRIMARY,
                size: BootstrapDialog.SIZE_LARGE,
                title: "Create new diagram",
                description: "some description",
                buttons: [
                    {
                        id: buttonId,
                        label: "Create",
                        cssClass: "btn-primary",
                        action: function (ctx) { return _this.onOk(ctx); }
                    }
                ]
            };
            this.dialog = BootstrapDialog.show(options);
            this.okButton = this.dialog.getButton(buttonId);
            this.okButton.toggleEnable(false);
        };
        return CreateNewDialog;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var Five;
(function (Five) {
    var KeyCode;
    (function (KeyCode) {
        KeyCode[KeyCode["backspace"] = 8] = "backspace";
        KeyCode[KeyCode["tab"] = 9] = "tab";
        KeyCode[KeyCode["enter"] = 13] = "enter";
        KeyCode[KeyCode["shift"] = 16] = "shift";
        KeyCode[KeyCode["ctrl"] = 17] = "ctrl";
        KeyCode[KeyCode["alt"] = 18] = "alt";
        KeyCode[KeyCode["pause"] = 19] = "pause";
        KeyCode[KeyCode["capslock"] = 20] = "capslock";
        KeyCode[KeyCode["esc"] = 27] = "esc";
        KeyCode[KeyCode["space"] = 32] = "space";
        KeyCode[KeyCode["pageup"] = 33] = "pageup";
        KeyCode[KeyCode["pagedown"] = 34] = "pagedown";
        KeyCode[KeyCode["end"] = 35] = "end";
        KeyCode[KeyCode["home"] = 36] = "home";
        KeyCode[KeyCode["left"] = 37] = "left";
        KeyCode[KeyCode["up"] = 38] = "up";
        KeyCode[KeyCode["right"] = 39] = "right";
        KeyCode[KeyCode["down"] = 40] = "down";
        KeyCode[KeyCode["insert"] = 45] = "insert";
        KeyCode[KeyCode["del"] = 46] = "del";
        KeyCode[KeyCode["a"] = 65] = "a";
        KeyCode[KeyCode["b"] = 66] = "b";
        KeyCode[KeyCode["c"] = 67] = "c";
        KeyCode[KeyCode["d"] = 68] = "d";
        KeyCode[KeyCode["e"] = 69] = "e";
        KeyCode[KeyCode["f"] = 70] = "f";
        KeyCode[KeyCode["g"] = 71] = "g";
        KeyCode[KeyCode["h"] = 72] = "h";
        KeyCode[KeyCode["i"] = 73] = "i";
        KeyCode[KeyCode["j"] = 74] = "j";
        KeyCode[KeyCode["k"] = 75] = "k";
        KeyCode[KeyCode["l"] = 76] = "l";
        KeyCode[KeyCode["m"] = 77] = "m";
        KeyCode[KeyCode["n"] = 78] = "n";
        KeyCode[KeyCode["o"] = 79] = "o";
        KeyCode[KeyCode["p"] = 80] = "p";
        KeyCode[KeyCode["q"] = 81] = "q";
        KeyCode[KeyCode["r"] = 82] = "r";
        KeyCode[KeyCode["s"] = 83] = "s";
        KeyCode[KeyCode["t"] = 84] = "t";
        KeyCode[KeyCode["u"] = 85] = "u";
        KeyCode[KeyCode["v"] = 86] = "v";
        KeyCode[KeyCode["w"] = 87] = "w";
        KeyCode[KeyCode["x"] = 88] = "x";
        KeyCode[KeyCode["y"] = 89] = "y";
        KeyCode[KeyCode["z"] = 90] = "z";
        KeyCode[KeyCode["num0"] = 96] = "num0";
        KeyCode[KeyCode["num1"] = 97] = "num1";
        KeyCode[KeyCode["num2"] = 98] = "num2";
        KeyCode[KeyCode["num3"] = 99] = "num3";
        KeyCode[KeyCode["num4"] = 100] = "num4";
        KeyCode[KeyCode["num5"] = 101] = "num5";
        KeyCode[KeyCode["num6"] = 102] = "num6";
        KeyCode[KeyCode["num7"] = 103] = "num7";
        KeyCode[KeyCode["num8"] = 104] = "num8";
        KeyCode[KeyCode["num9"] = 105] = "num9";
        KeyCode[KeyCode["asterisk"] = 106] = "asterisk";
        KeyCode[KeyCode["plus"] = 107] = "plus";
        KeyCode[KeyCode["minus"] = 109] = "minus";
        KeyCode[KeyCode["dot"] = 110] = "dot";
        KeyCode[KeyCode["slash"] = 111] = "slash";
        KeyCode[KeyCode["f1"] = 112] = "f1";
        KeyCode[KeyCode["f2"] = 113] = "f2";
        KeyCode[KeyCode["f3"] = 114] = "f3";
        KeyCode[KeyCode["f4"] = 115] = "f4";
        KeyCode[KeyCode["f5"] = 116] = "f5";
        KeyCode[KeyCode["f6"] = 117] = "f6";
        KeyCode[KeyCode["f7"] = 118] = "f7";
        KeyCode[KeyCode["f8"] = 119] = "f8";
        KeyCode[KeyCode["f9"] = 120] = "f9";
        KeyCode[KeyCode["f10"] = 121] = "f10";
        KeyCode[KeyCode["f11"] = 122] = "f11";
        KeyCode[KeyCode["f12"] = 123] = "f12";
        KeyCode[KeyCode["numlock"] = 144] = "numlock";
        KeyCode[KeyCode["scroll"] = 145] = "scroll";
        KeyCode[KeyCode["comma"] = 188] = "comma";
        KeyCode[KeyCode["dot2"] = 190] = "dot2";
        KeyCode[KeyCode["slash2"] = 191] = "slash2";
        KeyCode[KeyCode["meta"] = 224] = "meta";
    })(KeyCode = Five.KeyCode || (Five.KeyCode = {}));
    var KeyModifier;
    (function (KeyModifier) {
        KeyModifier[KeyModifier["none"] = 0] = "none";
        KeyModifier[KeyModifier["shift"] = 1] = "shift";
        KeyModifier[KeyModifier["ctrl"] = 2] = "ctrl";
        KeyModifier[KeyModifier["ctrlShift"] = 3] = "ctrlShift";
    })(KeyModifier = Five.KeyModifier || (Five.KeyModifier = {}));
    var KeyHandler = (function () {
        function KeyHandler(graph, target) {
            var _this = this;
            this.enabled = true;
            if (graph != null) {
                this.graph = graph;
                this.target = target || document.documentElement;
                this.handlers = {};
                this.handlers[KeyModifier.none] = {};
                this.handlers[KeyModifier.shift] = {};
                this.handlers[KeyModifier.ctrl] = {};
                this.handlers[KeyModifier.ctrlShift] = {};
                this.keydownHandler = function (evt) { _this.keyDown(evt); };
                Five.Events.addListener(this.target, 'keydown', this.keydownHandler);
                if (Five.Client.isIe) {
                    Five.Events.addListener(window, 'unload', function () { _this.destroy(); });
                }
            }
        }
        KeyHandler.prototype.isEnabled = function () {
            return this.enabled;
        };
        KeyHandler.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        KeyHandler.prototype.bindKey = function (keyModifier, code, funct) {
            this.handlers[keyModifier][code] = funct;
        };
        KeyHandler.prototype.isControlDown = function (evt) {
            return Five.Events.isControlDown(evt);
        };
        KeyHandler.prototype.getFunction = function (evt) {
            var modifier;
            if (evt != null) {
                if (this.isControlDown(evt)) {
                    if (Five.Events.isShiftDown(evt))
                        modifier = KeyModifier.ctrlShift;
                    else
                        modifier = KeyModifier.ctrl;
                }
                else {
                    if (Five.Events.isShiftDown(evt)) {
                        modifier = KeyModifier.shift;
                    }
                    else {
                        modifier = KeyModifier.none;
                    }
                }
                return this.handlers[modifier][evt.keyCode];
            }
            return null;
        };
        KeyHandler.prototype.isGraphEvent = function (evt) {
            var source = Five.Events.getSource(evt);
            if ((source == this.target || source.parentNode == this.target) ||
                (this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt))) {
                return true;
            }
            return this.graph.container.hasChildNode(source);
        };
        KeyHandler.prototype.keyDown = function (evt) {
            if (this.graph.isEnabled() && !Five.Events.isConsumed(evt) && this.isGraphEvent(evt) && this.isEnabled()) {
                if (evt.keyCode == 27) {
                    this.escape(evt);
                }
                else if (!this.graph.isEditing()) {
                    var boundFunction = this.getFunction(evt);
                    if (boundFunction != null) {
                        boundFunction(evt);
                        Five.Events.consume(evt);
                    }
                }
            }
        };
        KeyHandler.prototype.escape = function (evt) {
            if (this.graph.isEscapeEnabled()) {
                this.graph.escape(evt);
            }
        };
        KeyHandler.prototype.destroy = function () {
            if (this.target != null && this.keydownHandler != null) {
                Five.Events.removeListener(this.target, 'keydown', this.keydownHandler);
                this.keydownHandler = null;
            }
            this.target = null;
        };
        return KeyHandler;
    }());
    Five.KeyHandler = KeyHandler;
})(Five || (Five = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var KeyCode = Five.KeyCode;
    var KeyModifier = Five.KeyModifier;
    var MenuItem = (function () {
        function MenuItem(control, group, action) {
            var _this = this;
            this.control = control;
            this.group = group;
            this.action = action;
            control.onclick = function () { return _this.fire(); };
        }
        MenuItem.prototype.fire = function () {
            if (this.action.isEnabled())
                this.action.execute();
        };
        return MenuItem;
    }());
    var Menus = (function () {
        function Menus() {
        }
        Menus.camelize = function (str) {
            return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();
        };
        Menus.createItem = function (group, action) {
            var code = action.getKeyCode();
            var mod = action.getKeyModifier();
            var hotkey = null;
            if (code) {
                switch (mod) {
                    case KeyModifier.ctrl:
                        hotkey = "Ctrl+";
                        break;
                    case KeyModifier.shift:
                        hotkey = "Shift+";
                        break;
                    case KeyModifier.ctrlShift:
                        hotkey = "Ctrl+Shift+";
                        break;
                    default:
                        hotkey = '';
                }
                hotkey += this.camelize(KeyCode[code]);
            }
            var elem = this.itemFactory(group, action.getCaption(), hotkey);
            this.menuItems.push(new MenuItem(elem, group, action));
        };
        Menus.createGroupElements = function (menuId, actions) {
            var _this = this;
            var currentGroup = -1;
            actions.forEach(function (a) {
                var group = a.getGroup();
                if (currentGroup >= 0 && group != currentGroup)
                    _this.dividerFactory(menuId);
                currentGroup = group;
                _this.createItem(menuId, a);
                a.getGroup();
            });
        };
        Menus.clearGroup = function (menuId) {
        };
        Menus.createGroup = function (caption, menuId, actions, rightSide) {
            if (rightSide === void 0) { rightSide = false; }
            var menu = this.groupFactory(caption, menuId, function (id) { return Menus.enableDisableMenuItems(id); }, rightSide);
            this.createGroupElements(menuId, actions);
            return menu;
        };
        Menus.setupFileActions = function (actions) {
            if (!this.fileGroup) {
                this.fileGroup = this.createGroup("File", Menus.menuFileId, actions);
            }
        };
        Menus.setupEditActions = function (actions) {
            if (!this.editGroup) {
                this.editGroup = this.createGroup("Edit", Menus.menuEditId, actions);
            }
        };
        Menus.setupDiagramContextActions = function (actions, caption) {
            if (!Menus.diagramContextGroup) {
                Menus.diagramContextGroup = this.createGroup(caption, Menus.menuMindMapId, actions);
            }
            else if (Menus.diagramContextCaption != caption) {
                this.groupRecycler(Menus.menuMindMapId);
                this.createGroupElements(Menus.menuMindMapId, actions);
            }
            Menus.diagramContextCaption = caption;
        };
        Menus.setupLoginActions = function (actions) {
            if (!this.loginGroup) {
                this.loginGroup = this.createGroup("Login", Menus.menuLoginId, actions, true);
            }
        };
        Menus.enableDisableMenuItems = function (groupId) {
            this.menuItems.filter(function (i) { return i.group === groupId; }).forEach(function (i) {
                if (i.action.isEnabled())
                    i.control.classList.remove("disabled");
                else
                    i.control.classList.add("disabled");
            });
        };
        Menus.menuFileId = "menu-group-file";
        Menus.menuEditId = "menu-group-edit";
        Menus.menuMindMapId = "menu-group-mindmap";
        Menus.menuLoginId = "menu-group-login";
        Menus.menuItems = [];
        return Menus;
    }());
    CloudDiagram.Menus = Menus;
})(CloudDiagram || (CloudDiagram = {}));
var Five;
(function (Five) {
    var Graph = (function () {
        function Graph(container, config, model, renderHint, stylesheet) {
            var _this = this;
            this.config = config;
            this.mouseListeners = null;
            this.renderHint = null;
            this.dialect = null;
            this.model = null;
            this.multiplicities = null;
            this.imageBundles = null;
            this.cellRenderer = null;
            this.selectionModel = null;
            this.view = null;
            this.stylesheet = null;
            this.collapsedImage = new Five.Image(Five.FileStructure.imageBasePath + '/collapsed.gif', 9, 9);
            this.expandedImage = new Five.Image(Five.FileStructure.imageBasePath + '/expanded.gif', 9, 9);
            this.destroyed = false;
            this.allowHandleBoundsCheck = false;
            this.warningImage = new Five.Image(Five.FileStructure.imageBasePath + '/warning' + ((Five.Client.isMac) ? '.png' : '.gif'), 16, 16);
            this.containsValidationErrorsResource = (Five.Client.language != 'none') ? 'containsValidationErrors' : '';
            this.minFitScale = 0.1;
            this.maxFitScale = 8;
            this.zoomFactor = 1.2;
            this.exportEnabled = true;
            this.importEnabled = true;
            this.escapeEnabled = true;
            this.resetViewOnRootChange = true;
            this.constrainChildren = true;
            this.defaultOverlap = 0.5;
            this.constrainChildrenOnResize = false;
            this.maximumGraphBounds = null;
            this.extendParentsOnAdd = true;
            this.resetEdgesOnResize = false;
            this.extendParents = true;
            this.collapseToPreferredSize = true;
            this._cellsResizable = true;
            this.autoSizeCells = false;
            this.extendParentsOnMove = false;
            this.disconnectOnMove = true;
            this.allowNegativeCoordinates = true;
            this.cloneInvalidEdges = false;
            this.resetEdgesOnMove = false;
            this.autoSizeCellsOnAdd = false;
            this.swimlaneNesting = true;
            this.recursiveResize = false;
            this.cellsDisconnectable = true;
            this.cellsBendable = true;
            this.keepSelectionVisibleOnZoom = false;
            this.centerZoom = true;
            this.dropEnabled = false;
            this.splitEnabled = true;
            this.alternateEdgeStyle = null;
            this.defaultParent = null;
            this.portsEnabled = true;
            this.cellsCloneable = true;
            this.edgeLabelsMovable = true;
            this.vertexLabelsMovable = false;
            this.alreadyConnectedResource = (Five.Client.language != "none") ? "alreadyConnected" : "";
            this.multigraph = true;
            this.allowLoops = false;
            this.swimlaneSelectionEnabled = true;
            this.gridEnabled = true;
            this.gridSize = 10;
            this.cellEditor = null;
            this.isMouseDown = false;
            this.pageVisible = false;
            this.nativeDblClickEnabled = !Five.Client.isQuirks && (!Five.Client.isIe || !Five.Client.isIe10);
            this.keepEdgesInForeground = false;
            this.keepEdgesInBackground = false;
            this.pageFormat = Five.Constants.pageFormatA4Portrait;
            this.pageScale = 1.5;
            this.pageBreaksVisible = false;
            this.enterStopsCellEditing = false;
            this.border = 0;
            this.minimumContainerSize = null;
            this.maximumContainerSize = null;
            this.minimumGraphSize = null;
            this.resizeContainer = false;
            this.preferPageSize = false;
            this.tolerance = 4;
            this.enabled = true;
            this.swimlaneIndicatorColorAttribute = Five.Constants.styleFillcolor;
            this.labelsVisible = true;
            this.htmlLabels = false;
            this.invokesStopCellEditing = true;
            this.foldingEnabled = true;
            this.minPageBreakDist = 20;
            this.pageBreakColor = "gray";
            this.pageBreakDashed = true;
            this.lastTouchTime = 0;
            this.panDx = 0;
            this.panDy = 0;
            this.doubleTapEnabled = true;
            this.doubleTapTolerance = 25;
            this.doubleTapTimeout = 500;
            this.autoScroll = true;
            this.timerAutoScroll = false;
            this.ignoreScrollbars = false;
            this.allowAutoPanning = false;
            this.useScrollbarsForPanning = true;
            this.autoExtend = true;
            this.tapAndHoldEnabled = true;
            this.tapAndHoldDelay = 500;
            this.tapAndHoldInProgress = false;
            this.tapAndHoldValid = false;
            this.initialTouchX = 0;
            this.initialTouchY = 0;
            this.cellsEditable = true;
            this.cellsDeletable = true;
            this.cellsMovable = true;
            this.cellsLocked = false;
            this.collapseExpandResource = (Five.Client.language != "none") ? "collapse-expand" : "";
            this.connectableEdges = false;
            this.allowDanglingEdges = true;
            this.resetEdgesOnConnect = true;
            this.cellsSelectable = true;
            this.doubleClickCounter = 0;
            this.ignoreMouseEvents = false;
            this.isMouseTrigger = false;
            this.onSize = new Five.EventListeners();
            this.onGesture = new Five.EventListeners();
            this.onTapAndHold = new Five.EventListeners();
            this.onPan = new Five.EventListeners();
            this.onClick = new Five.EventListeners();
            this.onDoubleClick = new Five.EventListeners();
            this.onFireMouse = new Five.EventListeners();
            this.onAddOverlay = new Five.EventListeners();
            this.onRemoveOverlay = new Five.EventListeners();
            this.onFoldCells = new Five.EventListeners();
            this.onCellsFolded = new Five.EventListeners();
            this.onLabelChanged = new Five.EventListeners();
            this.onConnectCell = new Five.EventListeners();
            this.onCellConnected = new Five.EventListeners();
            this.onStartEditing = new Five.EventListeners();
            this.onAddCells = new Five.EventListeners();
            this.onCellsAdded = new Five.EventListeners();
            this.onMoveCells = new Five.EventListeners();
            this.onCellsMoved = new Five.EventListeners();
            this.onFlipEdge = new Five.EventListeners();
            this.onSplitEdge = new Five.EventListeners();
            this.onResizeCells = new Five.EventListeners();
            this.onCellsResized = new Five.EventListeners();
            this.onUpdateCellSize = new Five.EventListeners();
            this.onRootChange = new Five.EventListeners();
            this.onEscape = new Five.EventListeners();
            this.onRefresh = new Five.EventListeners();
            this.onRemoveCells = new Five.EventListeners();
            this.onCellsRemoved = new Five.EventListeners();
            this.onUngroupCells = new Five.EventListeners();
            this.onRemoveCellsFromParent = new Five.EventListeners();
            this.onOrderCells = new Five.EventListeners();
            this.onCellsOrdered = new Five.EventListeners();
            this.onAlignCells = new Five.EventListeners();
            this.onGroupCells = new Five.EventListeners();
            this.mouseListeners = null;
            this.renderHint = renderHint;
            if (Five.Client.isSvg) {
                this.dialect = Five.Dialect.Svg;
            }
            else if (renderHint === Five.RenderingHint.Fastest) {
                this.dialect = Five.Dialect.StrictHtml;
            }
            else if (renderHint === Five.RenderingHint.Faster) {
                this.dialect = Five.Dialect.PreferHtml;
            }
            else {
                this.dialect = Five.Dialect.MixedHtml;
            }
            this.model = model || new Five.GraphModel(null);
            this.multiplicities = [];
            this.imageBundles = [];
            this.cellRenderer = this.createCellRenderer();
            this.setSelectionModel(this.createSelectionModel());
            this.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());
            this.view = this.createGraphView();
            this.graphModelChangeListener = function (e) { _this.graphModelChanged(e.changes); };
            this.model.onChange.add(this.graphModelChangeListener);
            this.createHandlers();
            if (container != null) {
                this.init(container);
            }
            this.view.revalidate();
        }
        Graph.prototype.init = function (container) {
            var _this = this;
            this.container = Five.createDiagramContainer(container);
            this.cellEditor = this.createCellEditor();
            this.view.init();
            this.sizeDidChange();
            Five.Events.addListener(container, "mouseleave", Five.Utils.bind(this, function () {
                if (_this.tooltipHandler != null) {
                    _this.tooltipHandler.hide();
                }
            }));
            if (Five.Client.isIe) {
                Five.Events.addListener(window, "unload", Five.Utils.bind(this, function () {
                    _this.destroy();
                }));
                Five.Events.addListener(container, "selectstart", Five.Utils.bind(this, function (evt) {
                    return _this.isEditing() || (!_this.isMouseDown && !Five.Events.isShiftDown(evt));
                }));
            }
        };
        Graph.prototype.createCellRenderer = function () {
            return new Five.CellRenderer();
        };
        Graph.prototype.setSelectionModel = function (selectionModel) {
            this.selectionModel = selectionModel;
        };
        Graph.prototype.createSelectionModel = function () {
            return new Five.GraphSelectionModel(this);
        };
        Graph.prototype.setStylesheet = function (stylesheet) {
            this.stylesheet = stylesheet;
        };
        Graph.prototype.createStylesheet = function () {
            return new Five.Stylesheet();
        };
        Graph.prototype.createGraphView = function () {
            return new Five.GraphView(this);
        };
        Graph.prototype.createHandlers = function (container) {
            this.tooltipHandler = new Five.TooltipHandler(this);
            this.tooltipHandler.setEnabled(false);
            this.selectionCellsHandler = new Five.SelectionCellsHandler(this);
            this.connectionHandler = new Five.ConnectionHandler(this);
            this.connectionHandler.setEnabled(false);
            this.graphHandler = new Five.GraphHandler(this);
            this.panningHandler = new Five.PanningHandler(this);
            this.panningHandler.panningEnabled = false;
            this.popupMenuHandler = new Five.PopupMenuHandler(this);
        };
        Graph.prototype.addMouseListener = function (listener) {
            if (this.mouseListeners == null) {
                this.mouseListeners = [];
            }
            this.mouseListeners.push(listener);
        };
        Graph.prototype.removeMouseListener = function (listener) {
            if (this.mouseListeners != null) {
                for (var i = 0; i < this.mouseListeners.length; i++) {
                    if (this.mouseListeners[i] == listener) {
                        this.mouseListeners.splice(i, 1);
                        break;
                    }
                }
            }
        };
        Graph.prototype.getSelectionModel = function () {
            return this.selectionModel;
        };
        Graph.prototype.getModel = function () {
            return this.model;
        };
        Graph.prototype.getView = function () {
            return this.view;
        };
        Graph.prototype.snap = function (value) {
            if (this.gridEnabled) {
                value = Math.round(value / this.gridSize) * this.gridSize;
            }
            return value;
        };
        Graph.prototype.isEnterStopsCellEditing = function () {
            return this.enterStopsCellEditing;
        };
        Graph.prototype.isLabelClipped = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return (style != null) ? style.overflow === Five.Overflow.hidden : false;
        };
        Graph.prototype.isWrapping = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return (style != null) ? style.whitespace === Five.Whitespace.wrap : false;
        };
        Graph.prototype.isCellVisible = function (cell) {
            return Five.Cells.isVisible(cell);
        };
        Graph.prototype.getCellStyle = function (cell) {
            var style;
            var styleapp = Five.Cells.getStyle(cell);
            if (styleapp != null) {
                style = this.postProcessCellStyle(this.stylesheet.getCellStyle(styleapp, cell.isEdge()));
            }
            else
                style = Five.Cells.isEdge(cell) ? this.stylesheet.getDefaultEdgeStyle() : this.stylesheet.getDefaultVertexStyle();
            return style;
        };
        Graph.prototype.getTranslateForRoot = function (cell) {
            return null;
        };
        Graph.prototype.sizeDidChange = function () {
            var bounds = this.getGraphBounds();
            if (this.container != null) {
                var border = this.getBorder();
                var width = Math.max(0, bounds.x + bounds.width + 1 + border);
                var height = Math.max(0, bounds.y + bounds.height + 1 + border);
                if (this.minimumContainerSize != null) {
                    width = Math.max(width, this.minimumContainerSize.width);
                    height = Math.max(height, this.minimumContainerSize.height);
                }
                if (this.resizeContainer) {
                    this.doResizeContainer(width, height);
                }
                if (this.preferPageSize || (!Five.Client.isIe && this.pageVisible)) {
                    var size = this.getPreferredPageSize(bounds, width, height);
                    if (size != null) {
                        width = size.width;
                        height = size.height;
                    }
                }
                if (this.minimumGraphSize != null) {
                    width = Math.max(width, this.minimumGraphSize.width * this.view.scale);
                    height = Math.max(height, this.minimumGraphSize.height * this.view.scale);
                }
                width = Math.ceil(width - 1);
                height = Math.ceil(height - 1);
                if (this.dialect == Five.Dialect.Svg) {
                    var root = this.view.getDrawPane().ownerSVGElement;
                    root.style.minWidth = Math.max(1, width) + "px";
                    root.style.minHeight = Math.max(1, height) + "px";
                    root.style.width = "100%";
                    root.style.height = "100%";
                }
                else {
                    if (Five.Client.isQuirks) {
                        this.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));
                    }
                    else {
                        var style = this.canvasStyle();
                        style.minWidth = Math.max(1, width) + "px";
                        style.minHeight = Math.max(1, height) + "px";
                    }
                }
                this.updatePageBreaks(this.pageBreaksVisible, width - 1, height - 1);
            }
            this.onSize.fire(new Five.SizeEvent(bounds));
        };
        Graph.prototype.canvasStyle = function () {
            return this.view.canvas.style;
        };
        Graph.prototype.getBackgroundImage = function () {
            return this.backgroundImage;
        };
        Graph.prototype.isCellCollapsed = function (cell) {
            return Five.Cells.isCollapsed(cell);
        };
        Graph.prototype.getChildOffsetForCell = function (cell) {
            return null;
        };
        Graph.prototype.getCellGeometry = function (cell) {
            return Five.Cells.getGeometry(cell);
        };
        Graph.prototype.getConnectionConstraint = function (edge, terminal, source) {
            var point = null;
            var x = source ? edge.style.exitX : edge.style.entryX;
            if (x != null) {
                var y = (source) ? edge.style.exitY : edge.style.entryY;
                if (y != null) {
                    point = new Five.Point(x, y);
                }
            }
            var perimeter = false;
            if (point != null) {
                perimeter = (source) ? edge.style.exitPerimeter : edge.style.entryPerimeter;
            }
            return new Five.ConnectionConstraint(point, perimeter);
        };
        Graph.prototype.getConnectionPoint = function (vertex, constraint) {
            var point = null;
            if (vertex != null) {
                var bounds = this.view.getPerimeterBounds(vertex);
                var cx = new Five.Point(bounds.getCenterX(), bounds.getCenterY());
                var direction = vertex.style.direction;
                var r1 = 0;
                if (direction != null) {
                    if (direction == Five.Direction.North) {
                        r1 += 270;
                    }
                    else if (direction == Five.Direction.West) {
                        r1 += 180;
                    }
                    else if (direction == Five.Direction.South) {
                        r1 += 90;
                    }
                    if (direction == Five.Direction.North || direction == Five.Direction.South) {
                        bounds.x += bounds.width / 2 - bounds.height / 2;
                        bounds.y += bounds.height / 2 - bounds.width / 2;
                        var tmp = bounds.width;
                        bounds.width = bounds.height;
                        bounds.height = tmp;
                    }
                }
                if (constraint.point != null) {
                    var sx = 1;
                    var sy = 1;
                    var dx = 0;
                    var dy = 0;
                    if (Five.Cells.isVertex(vertex.cell)) {
                        var flipH = vertex.style.flipH;
                        var flipV = vertex.style.flipV;
                        if (direction == Five.Direction.North || direction == Five.Direction.South) {
                            var tmp1 = flipH;
                            flipH = flipV;
                            flipV = tmp1;
                        }
                        if (flipH) {
                            sx = -1;
                            dx = -bounds.width;
                        }
                        if (flipV) {
                            sy = -1;
                            dy = -bounds.height;
                        }
                    }
                    point = new Five.Point(bounds.x + constraint.point.x * bounds.width * sx - dx, bounds.y + constraint.point.y * bounds.height * sy - dy);
                }
                var r2 = vertex.style.rotation;
                var cos;
                var sin;
                if (constraint.perimeter) {
                    if (r1 != 0 && point != null) {
                        cos = 0;
                        sin = 0;
                        if (r1 == 90) {
                            sin = 1;
                        }
                        else if (r1 == 180) {
                            cos = -1;
                        }
                        else if (r2 == 270) {
                            sin = -1;
                        }
                        point = Five.Utils.getRotatedPoint(point, cos, sin, cx);
                    }
                    if (point != null && constraint.perimeter) {
                        point = this.view.getPerimeterPoint(vertex, point, false);
                    }
                }
                else {
                    r2 += r1;
                }
                if (r2 != 0 && point != null) {
                    var rad = Five.Utils.toRadians(r2);
                    cos = Math.cos(rad);
                    sin = Math.sin(rad);
                    point = Five.Utils.getRotatedPoint(point, cos, sin, cx);
                }
            }
            return point;
        };
        Graph.prototype.createCellEditor = function () {
            return new Five.CellEditor(this);
        };
        Graph.prototype.postProcessCellStyle = function (style) {
            if (style != null) {
                var key = style.image;
                var image = this.getImageFromBundles(key);
                if (image != null) {
                    style.image = image;
                }
                else {
                    image = key;
                }
                if (image != null && image.substring(0, 11) == "data:image/") {
                    if (image.substring(0, 20) == "data:image/svg+xml,<") {
                        image = image.substring(0, 19) + encodeURIComponent(image.substring(19));
                    }
                    else if (image.substring(0, 22) != "data:image/svg+xml,%3C") {
                        var comma = image.indexOf(",");
                        if (comma > 0) {
                            image = image.substring(0, comma) + ";base64,"
                                + image.substring(comma + 1);
                        }
                    }
                    style.image = image;
                }
            }
            return style;
        };
        Graph.prototype.getGraphBounds = function () {
            return this.view.getGraphBounds();
        };
        Graph.prototype.getBorder = function () {
            return this.border;
        };
        Graph.prototype.doResizeContainer = function (width, height) {
            if (Five.Client.isIe) {
                if (Five.Client.isQuirks) {
                    var borders = this.container.getBorderSizes();
                    width += Math.max(2, borders.x + borders.width + 1);
                    height += Math.max(2, borders.y + borders.height + 1);
                }
                else if (Five.Client.isIe9) {
                    width += 3;
                    height += 5;
                }
                else {
                    width += 1;
                    height += 1;
                }
            }
            else {
                height += 1;
            }
            if (this.maximumContainerSize != null) {
                width = Math.min(this.maximumContainerSize.width, width);
                height = Math.min(this.maximumContainerSize.height, height);
            }
            this.container.setSize(width, height);
        };
        Graph.prototype.getPreferredPageSize = function (bounds, width, height) {
            var scale = this.view.scale;
            var tr = this.view.translate;
            var fmt = this.pageFormat;
            var ps = scale * this.pageScale;
            var page = new Five.Rectangle(0, 0, fmt.width * ps, fmt.height * ps);
            var hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;
            var vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;
            return new Five.Rectangle(0, 0, hCount * page.width + 2 + tr.x / scale, vCount * page.height + 2 + tr.y / scale);
        };
        Graph.prototype.updatePageBreaks = function (visible, width, height) {
            var scale = this.view.scale;
            var tr = this.view.translate;
            var fmt = this.pageFormat;
            var ps = scale * this.pageScale;
            var bounds = new Five.Rectangle(scale * tr.x, scale * tr.y, fmt.width * ps, fmt.height * ps);
            visible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;
            bounds.x = Five.Utils.mod(bounds.x, bounds.width);
            bounds.y = Five.Utils.mod(bounds.y, bounds.height);
            var horizontalCount = (visible) ? Math.ceil((width - bounds.x) / bounds.width) : 0;
            var verticalCount = (visible) ? Math.ceil((height - bounds.y) / bounds.height) : 0;
            var right = width;
            var bottom = height;
            if (this.horizontalPageBreaks == null && horizontalCount > 0) {
                this.horizontalPageBreaks = [];
            }
            var pageBreak;
            var i;
            var pts;
            if (this.horizontalPageBreaks != null) {
                for (i = 0; i <= horizontalCount; i++) {
                    pts = [
                        new Five.Point(bounds.x + i * bounds.width, 1),
                        new Five.Point(bounds.x + i * bounds.width, bottom)
                    ];
                    if (this.horizontalPageBreaks[i] != null) {
                        this.horizontalPageBreaks[i].points = pts;
                        this.horizontalPageBreaks[i].redraw();
                    }
                    else {
                        pageBreak = new Five.PolylineShape(pts, this.pageBreakColor);
                        pageBreak.dialect = this.dialect;
                        pageBreak.pointerEvents = false;
                        pageBreak.isDashed = this.pageBreakDashed;
                        pageBreak.init(Five.ElementInitializer(this.view.backgroundPane));
                        pageBreak.redraw();
                        this.horizontalPageBreaks[i] = pageBreak;
                    }
                }
                for (i = horizontalCount; i < this.horizontalPageBreaks.length; i++) {
                    this.horizontalPageBreaks[i].destroy();
                }
                this.horizontalPageBreaks.splice(horizontalCount, this.horizontalPageBreaks.length - horizontalCount);
            }
            if (this.verticalPageBreaks == null && verticalCount > 0) {
                this.verticalPageBreaks = [];
            }
            if (this.verticalPageBreaks != null) {
                for (i = 0; i <= verticalCount; i++) {
                    pts = [
                        new Five.Point(1, bounds.y + i * bounds.height),
                        new Five.Point(right, bounds.y + i * bounds.height)
                    ];
                    if (this.verticalPageBreaks[i] != null) {
                        this.verticalPageBreaks[i].points = pts;
                        this.verticalPageBreaks[i].redraw();
                    }
                    else {
                        pageBreak = new Five.PolylineShape(pts, this.pageBreakColor);
                        pageBreak.dialect = this.dialect;
                        pageBreak.pointerEvents = false;
                        pageBreak.isDashed = this.pageBreakDashed;
                        pageBreak.init(Five.ElementInitializer(this.view.backgroundPane));
                        pageBreak.redraw();
                        this.verticalPageBreaks[i] = pageBreak;
                    }
                }
                for (i = verticalCount; i < this.verticalPageBreaks.length; i++) {
                    this.verticalPageBreaks[i].destroy();
                }
                this.verticalPageBreaks.splice(verticalCount, this.verticalPageBreaks.length - verticalCount);
            }
        };
        Graph.prototype.isOrthogonal = function (edge) {
            var orthogonal = edge.style.orthogonal;
            if (orthogonal != null) {
                return orthogonal;
            }
            var tmp = this.view.getEdgeStyle(edge);
            return tmp == Five.EdgeStyle.segmentConnector ||
                tmp == Five.EdgeStyle.elbowConnector ||
                tmp == Five.EdgeStyle.sideToSide ||
                tmp == Five.EdgeStyle.topToBottom ||
                tmp == Five.EdgeStyle.entityRelation ||
                tmp == Five.EdgeStyle.orthConnector;
        };
        Graph.prototype.fireGestureEvent = function (evt, cell) {
            this.lastTouchTime = 0;
            this.onGesture.fire(new Five.GestureEvent(evt, cell));
        };
        Graph.prototype.getStateForTouchEvent = function (evt) {
            var x = Five.Events.getClientX(evt);
            var y = Five.Events.getClientY(evt);
            var pt = this.container.convertPoint(x, y);
            return this.view.getState(this.getCellAt(pt.x, pt.y));
        };
        Graph.prototype.isEventSourceIgnored = function (evtName, me) {
            var source = me.getSource();
            var name = (source.nodeName != null) ? source.nodeName.toLowerCase() : "";
            var candidate = !Five.Events.isMouseEvent(me.getEvent()) || Five.Events.isLeftMouseButton(me.getEvent());
            var type = source.type;
            return evtName == Five.Events.mouseDown && candidate && (name == "select" || name == "option" ||
                (name == "input" && type != "checkbox" && type != "radio" &&
                    type != "button" && type != "submit" && type != "file"));
        };
        Graph.prototype.updateMouseEvent = function (me) {
            if (me.graphX == null || me.graphY == null) {
                var pt = this.container.convertPoint(me.getX(), me.getY());
                me.graphX = pt.x - this.panDx;
                me.graphY = pt.y - this.panDy;
            }
            return me;
        };
        Graph.prototype.isSyntheticEventIgnored = function (evtName, me, sender) {
            var result = false;
            var mouseEvent = Five.Events.isMouseEvent(me.getEvent());
            if (this.ignoreMouseEvents && mouseEvent && evtName != Five.Events.mouseMove) {
                this.ignoreMouseEvents = evtName != Five.Events.mouseUp;
                result = true;
            }
            else if (Five.Client.isFf && !mouseEvent && evtName == Five.Events.mouseUp) {
                this.ignoreMouseEvents = true;
            }
            return result;
        };
        Graph.prototype.isEventIgnored = function (evtName, me, sender) {
            var _this = this;
            var mouseEvent = Five.Events.isMouseEvent(me.getEvent());
            var result = this.isEditing();
            if (me.getEvent() == this.lastEvent) {
                result = true;
            }
            else {
                this.lastEvent = me.getEvent();
            }
            if (this.eventSource != null && evtName != Five.Events.mouseMove) {
                Five.Events.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);
                this.mouseMoveRedirect = null;
                this.mouseUpRedirect = null;
                this.eventSource = null;
            }
            else if (this.eventSource != null && me.getSource() != this.eventSource) {
                result = true;
            }
            else if (Five.Client.isTouch && evtName == Five.Events.mouseDown && !mouseEvent) {
                this.eventSource = me.getSource();
                this.mouseMoveRedirect = Five.Utils.bind(this, function (evt) {
                    _this.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt, _this.getStateForTouchEvent(evt)));
                });
                this.mouseUpRedirect = Five.Utils.bind(this, function (evt) {
                    _this.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(evt, _this.getStateForTouchEvent(evt)));
                });
                Five.Events.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);
            }
            if (this.isSyntheticEventIgnored(evtName, me, sender)) {
                result = true;
            }
            if (!Five.Events.isPopupTrigger(this.lastEvent) && evtName != Five.Events.mouseMove && this.lastEvent.detail == 2) {
                return true;
            }
            if (evtName == Five.Events.mouseUp && this.isMouseDown) {
                this.isMouseDown = false;
            }
            else if (evtName == Five.Events.mouseDown && !this.isMouseDown) {
                this.isMouseDown = true;
                this.isMouseTrigger = mouseEvent;
            }
            else if (!result && (((!Five.Client.isFf || evtName != Five.Events.mouseMove) &&
                this.isMouseDown && this.isMouseTrigger != mouseEvent) ||
                (evtName == Five.Events.mouseDown && this.isMouseDown) ||
                (evtName == Five.Events.mouseUp && !this.isMouseDown))) {
                result = true;
            }
            if (!result && evtName == Five.Events.mouseDown) {
                this.lastMouseX = me.getX();
                this.lastMouseY = me.getY();
            }
            return result;
        };
        Graph.prototype.createPanningManager = function () {
            return new Five.PanningManager(this);
        };
        Graph.prototype.panGraph = function (dx, dy) {
            if (this.useScrollbarsForPanning && this.container.hasScrollbars()) {
                this.container.setScroll(-dx, -dy);
            }
            else {
                var canvas = this.view.getCanvas();
                if (this.dialect === Five.Dialect.Svg) {
                    if (dx === 0 && dy === 0) {
                        if (Five.Client.isIe) {
                            canvas.setAttribute("transform", "translate(" + dx + "," + dy + ")");
                        }
                        else {
                            canvas.removeAttribute("transform");
                        }
                        this.container.leftPreview(canvas.parentNode);
                    }
                    else {
                        canvas.setAttribute("transform", "translate(" + dx + "," + dy + ")");
                        this.container.rightPreview(canvas.parentNode, dx, dy);
                    }
                }
                else {
                    var canvasStyle = this.canvasStyle();
                    canvasStyle.left = dx + "px";
                    canvasStyle.top = dy + "px";
                }
                this.panDx = dx;
                this.panDy = dy;
                this.onPan.fire();
            }
        };
        Graph.prototype.scrollPointToVisible = function (x, y, extend, border) {
            if (border === void 0) { border = 20; }
            if (!this.timerAutoScroll && (this.ignoreScrollbars || this.container.hasScrollbars())) {
                var c = this.container;
                var scroll = c.getScroll();
                var client = c.getClientSize();
                if (x >= scroll.x && y >= scroll.y && x <= scroll.x + client.x &&
                    y <= scroll.y + client.y) {
                    var dx = scroll.x + client.x - x;
                    var root;
                    var canvas;
                    var old;
                    if (dx < border) {
                        old = scroll.x;
                        scroll.x += border - dx;
                        if (extend && old == scroll.x) {
                            var width;
                            if (this.dialect == Five.Dialect.Svg) {
                                root = this.view.getDrawPane().ownerSVGElement;
                                width = scroll.width + border - dx;
                                root.style.width = width + "px";
                            }
                            else {
                                width = Math.max(client.x, scroll.width) + border - dx;
                                canvas = this.view.getCanvas();
                                canvas.style.width = width + "px";
                            }
                            scroll.x += border - dx;
                        }
                    }
                    else {
                        dx = x - scroll.x;
                        if (dx < border) {
                            scroll.x -= border - dx;
                        }
                    }
                    var dy = scroll.y + client.y - y;
                    if (dy < border) {
                        old = scroll.y;
                        scroll.y += border - dy;
                        if (old == scroll.y && extend) {
                            var height;
                            if (this.dialect == Five.Dialect.Svg) {
                                root = this.view.getDrawPane().ownerSVGElement;
                                height = scroll.height + border - dy;
                                root.style.height = height + "px";
                            }
                            else {
                                height = Math.max(client.x, scroll.height) + border - dy;
                                canvas = this.view.getCanvas();
                                canvas.style.height = height + "px";
                            }
                            scroll.y += border - dy;
                        }
                    }
                    else {
                        dy = y - scroll.y;
                        if (dy < border) {
                            scroll.y -= border - dy;
                        }
                    }
                }
                c.setScroll(scroll.x, scroll.y);
            }
            else if (this.allowAutoPanning && !this.panningHandler.isActive()) {
                if (this.panningManager == null) {
                    this.panningManager = this.createPanningManager();
                }
                this.panningManager.panTo(x + this.panDx, y + this.panDy);
            }
        };
        Graph.prototype.consumeMouseEvent = function (evtName, me, sender) {
            if (evtName == Five.Events.mouseDown && Five.Events.isTouchEvent(me.getEvent())) {
                me.consume(false);
            }
        };
        Graph.prototype.isToggleEvent = function (evt) {
            return (Five.Client.isMac) ? Five.Events.isMouseMetaDown(evt) : Five.Events.isMouseControlDown(evt);
        };
        Graph.prototype.selectCellForEvent = function (cell, evt) {
            var isSelected = this.isCellSelected(cell);
            if (this.isToggleEvent(evt)) {
                if (isSelected) {
                    this.removeSelectionCell(cell);
                }
                else {
                    this.addSelectionCell(cell);
                }
            }
            else if (!isSelected || this.getSelectionCount() != 1) {
                this.setSelectionCell(cell);
            }
        };
        Graph.prototype.click = function (me) {
            var evt = me.getEvent();
            var cell = me.getCell();
            var mxe = new Five.ClickEvent(evt, cell);
            if (me.isConsumed()) {
                mxe.consume();
            }
            this.onClick.fire(mxe);
            if (this.isEnabled() && !Five.Events.isConsumed(evt) && !mxe.isConsumed()) {
                if (cell != null) {
                    this.selectCellForEvent(cell, evt);
                }
                else {
                    var swimlane = null;
                    if (this.isSwimlaneSelectionEnabled()) {
                        swimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());
                    }
                    if (swimlane != null) {
                        this.selectCellForEvent(swimlane, evt);
                    }
                    else if (!this.isToggleEvent(evt)) {
                        this.clearSelection();
                    }
                }
            }
        };
        Graph.prototype.fireMouseEvent = function (evtName, me, sender) {
            var _this = this;
            if (this.isEventSourceIgnored(evtName, me)) {
                if (this.tooltipHandler != null) {
                    this.tooltipHandler.hide();
                }
                return;
            }
            if (sender == null) {
                sender = this;
            }
            me = this.updateMouseEvent(me);
            if (evtName == Five.Events.mouseDown && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent())) {
                this.stopEditing(!this.isInvokesStopCellEditing());
            }
            if ((!this.nativeDblClickEnabled && !Five.Events.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&
                Five.Client.isTouch && Five.Events.isTouchEvent(me.getEvent()))) {
                var currentTime = new Date().getTime();
                var cell;
                if ((!Five.Client.isQuirks && evtName == Five.Events.mouseDown) || (Five.Client.isQuirks && evtName == Five.Events.mouseUp && !this.fireDoubleClick)) {
                    if (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&
                        currentTime - this.lastTouchTime < this.doubleTapTimeout &&
                        Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&
                        Math.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&
                        this.doubleClickCounter < 2) {
                        this.doubleClickCounter++;
                        var doubleClickFired = false;
                        if (evtName == Five.Events.mouseUp) {
                            if (me.getCell() == this.lastTouchCell && this.lastTouchCell != null) {
                                this.lastTouchTime = 0;
                                cell = this.lastTouchCell;
                                this.lastTouchCell = null;
                                this.dblClick(me.getEvent(), cell);
                                doubleClickFired = true;
                            }
                        }
                        else {
                            this.fireDoubleClick = true;
                            this.lastTouchTime = 0;
                        }
                        if (!Five.Client.isQuirks || doubleClickFired) {
                            Five.Events.consume(me.getEvent());
                            return;
                        }
                    }
                    else if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent()) {
                        this.lastTouchCell = me.getCell();
                        this.lastTouchX = me.getX();
                        this.lastTouchY = me.getY();
                        this.lastTouchTime = currentTime;
                        this.lastTouchEvent = me.getEvent();
                        this.doubleClickCounter = 0;
                    }
                }
                else if ((this.isMouseDown || evtName == Five.Events.mouseUp) && this.fireDoubleClick) {
                    this.fireDoubleClick = false;
                    cell = this.lastTouchCell;
                    this.lastTouchCell = null;
                    this.isMouseDown = false;
                    var valid = (cell != null) || (Five.Events.isTouchEvent(me.getEvent()) && (Five.Client.isGc || Five.Client.isSf));
                    if (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&
                        Math.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance) {
                        this.dblClick(me.getEvent(), cell);
                    }
                    else {
                        Five.Events.consume(me.getEvent());
                    }
                    return;
                }
            }
            if (!this.isEventIgnored(evtName, me, sender)) {
                this.onFireMouse.fire(new Five.FireMouseEvent(evtName, me));
                if ((Five.Client.isOp || Five.Client.isSf || Five.Client.isGc ||
                    (Five.Client.isIe && Five.Client.isSvg) || me.getEvent().target != this.container.eventTarget())) {
                    if (evtName == Five.Events.mouseMove && this.isMouseDown && this.autoScroll && !Five.Events.isMultiTouchEvent(me.getEvent())) {
                        this.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);
                    }
                    if (this.mouseListeners != null) {
                        if (!me.getEvent().preventDefault) {
                            me.getEvent().returnValue = true;
                        }
                        for (var i = 0; i < this.mouseListeners.length; i++) {
                            var l = this.mouseListeners[i];
                            if (evtName == Five.Events.mouseDown) {
                                l.mouseDown(sender, me);
                            }
                            else if (evtName == Five.Events.mouseMove) {
                                l.mouseMove(sender, me);
                            }
                            else if (evtName == Five.Events.mouseUp) {
                                l.mouseUp(sender, me);
                            }
                        }
                    }
                    if (evtName == Five.Events.mouseUp) {
                        this.click(me);
                    }
                }
                if (Five.Events.isTouchEvent(me.getEvent()) && evtName == Five.Events.mouseDown && this.tapAndHoldEnabled && !this.tapAndHoldInProgress) {
                    this.tapAndHoldInProgress = true;
                    this.initialTouchX = me.getGraphX();
                    this.initialTouchY = me.getGraphY();
                    var handler = function () {
                        if (_this.tapAndHoldValid) {
                            _this.tapAndHold(me);
                        }
                        _this.tapAndHoldInProgress = false;
                        _this.tapAndHoldValid = false;
                    };
                    if (this.tapAndHoldThread) {
                        window.clearTimeout(this.tapAndHoldThread);
                    }
                    this.tapAndHoldThread = window.setTimeout(Five.Utils.bind(this, handler), this.tapAndHoldDelay);
                    this.tapAndHoldValid = true;
                }
                else if (evtName == Five.Events.mouseUp) {
                    this.tapAndHoldInProgress = false;
                    this.tapAndHoldValid = false;
                }
                else if (this.tapAndHoldValid) {
                    this.tapAndHoldValid =
                        Math.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&
                            Math.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;
                }
                this.consumeMouseEvent(evtName, me, sender);
            }
        };
        Graph.prototype.dblClick = function (evt, cell) {
            this.onDoubleClick.fire(new Five.DoubleClickEvent(evt, cell));
            if (this.isEnabled() && !Five.Events.isConsumed(evt) && !new Five.DoubleClickEvent(evt, cell).isConsumed() &&
                cell != null && this.isCellEditable(cell) && !this.isEditing(cell)) {
                this.startEditingAtCell(cell, evt);
                Five.Events.consume(evt);
            }
        };
        Graph.prototype.isCellsEditable = function () {
            return this.cellsEditable;
        };
        Graph.prototype.isCellsLocked = function () {
            return this.cellsLocked;
        };
        Graph.prototype.isCellLocked = function (cell) {
            var geometry = Five.Cells.getGeometry(cell);
            return this.isCellsLocked() || (geometry != null && Five.Cells.isVertex(cell) && geometry.relative);
        };
        Graph.prototype.isCellEditable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.isCellsEditable() && !this.isCellLocked(cell) && style[Five.Constants.styleEditable] == "1";
        };
        Graph.prototype.intersects = function (state, x, y) {
            if (state != null) {
                var pts = state.absolutePoints;
                var pt;
                if (pts != null) {
                    var t2 = this.tolerance * this.tolerance;
                    pt = pts[0];
                    for (var i = 1; i < pts.length; i++) {
                        var next = pts[i];
                        var dist = Five.Utils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);
                        if (dist <= t2) {
                            return true;
                        }
                        pt = next;
                    }
                }
                else {
                    var alpha = Five.Utils.toRadians(state.style.rotation);
                    if (alpha != 0) {
                        var cos = Math.cos(-alpha);
                        var sin = Math.sin(-alpha);
                        var cx = new Five.Point(state.getCenterX(), state.getCenterY());
                        pt = Five.Utils.getRotatedPoint(new Five.Point(x, y), cos, sin, cx);
                        x = pt.x;
                        y = pt.y;
                    }
                    if (Five.Utils.contains(state, x, y)) {
                        return true;
                    }
                }
            }
            return false;
        };
        Graph.prototype.getCellAt = function (x, y, parent, vertices, edges) {
            if (vertices === void 0) { vertices = true; }
            if (edges === void 0) { edges = true; }
            if (parent == null) {
                parent = this.getCurrentRoot();
                if (parent == null) {
                    parent = this.getModel().getRoot();
                }
            }
            if (parent != null) {
                var childCount = Five.Cells.getChildCount(parent);
                for (var i = childCount - 1; i >= 0; i--) {
                    var cell = Five.Cells.getChildAt(parent, i);
                    var result = this.getCellAt(x, y, cell, vertices, edges);
                    if (result != null) {
                        return result;
                    }
                    else if (this.isCellVisible(cell) && (edges && Five.Cells.isEdge(cell) ||
                        vertices && Five.Cells.isVertex(cell))) {
                        var state = this.view.getState(cell);
                        if (this.intersects(state, x, y)) {
                            return cell;
                        }
                    }
                }
            }
            return null;
        };
        Graph.prototype.getCurrentRoot = function () {
            return this.view.currentRoot;
        };
        Graph.prototype.isEditing = function (cell) {
            if (this.cellEditor != null) {
                var editingCell = this.cellEditor.getEditingCell();
                return (cell == null) ? editingCell != null : cell === editingCell;
            }
            return false;
        };
        Graph.prototype.getTooltip = function (state, node, x, y) {
            var tip = null;
            if (state != null) {
                if (state.control != null && (node == state.control.node ||
                    node.parentNode == state.control.node)) {
                    tip = this.collapseExpandResource;
                    tip = Five.Resources.get(tip) || tip;
                }
                if (tip == null && state.overlays != null) {
                    state.overlays.visit(function (shape) {
                        if (tip == null && (node == shape.node || node.parentNode == shape.node)) {
                            tip = shape.overlay.toString();
                        }
                    });
                }
                if (tip == null) {
                    var handler = this.selectionCellsHandler.getHandler(state.cell);
                    if (handler != null && handler.getTooltipForNode != null) {
                        tip = handler.getTooltipForNode(node);
                    }
                }
                if (tip == null) {
                    tip = this.getTooltipForCell(state.cell);
                }
            }
            return tip;
        };
        Graph.prototype.isEnabled = function () {
            return this.enabled;
        };
        Graph.prototype.isCellSelected = function (cell) {
            return this.getSelectionModel().isSelected(cell);
        };
        Graph.prototype.setSelectionCell = function (cell) {
            this.getSelectionModel().setCell(cell);
        };
        Graph.prototype.clearSelection = function () {
            return this.getSelectionModel().clear();
        };
        Graph.prototype.getIndicatorShape = function (state) {
            return (state != null && state.style != null) ? state.style[Five.Constants.styleIndicatorShape] : null;
        };
        Graph.prototype.removeSelectionCell = function (cell) {
            this.getSelectionModel().removeCell(cell);
        };
        Graph.prototype.addSelectionCell = function (cell) {
            this.getSelectionModel().addCell(cell);
        };
        Graph.prototype.getSelectionCount = function () {
            return this.getSelectionModel().cells.length;
        };
        Graph.prototype.getImage = function (state) {
            return (state != null && state.style != null) ? state.style.image : null;
        };
        Graph.prototype.getIndicatorColor = function (state) {
            return (state != null && state.style != null) ? state.style.indicatorColor : null;
        };
        Graph.prototype.getIndicatorGradientColor = function (state) {
            return (state != null && state.style != null) ? state.style.indicatorGradientcolor : null;
        };
        Graph.prototype.getIndicatorImage = function (state) {
            return (state != null && state.style != null) ? state.style.indicatorImage : null;
        };
        Graph.prototype.getSwimlane = function (cell) {
            while (cell != null && !this.isSwimlane(cell)) {
                cell = Five.Cells.getParent(cell);
            }
            return cell;
        };
        Graph.prototype.getSwimlaneAt = function (x, y, parent) {
            parent = parent || this.getDefaultParent();
            if (parent != null) {
                var childCount = Five.Cells.getChildCount(parent);
                for (var i = 0; i < childCount; i++) {
                    var child = Five.Cells.getChildAt(parent, i);
                    var result = this.getSwimlaneAt(x, y, child);
                    if (result != null) {
                        return result;
                    }
                    else if (this.isSwimlane(child)) {
                        var state = this.view.getState(child);
                        if (this.intersects(state, x, y)) {
                            return child;
                        }
                    }
                }
            }
            return null;
        };
        Graph.prototype.isSwimlane = function (cell) {
            if (cell != null) {
                if (Five.Cells.getParent(cell) != this.model.getRoot()) {
                    var state = this.view.getState(cell);
                    var style = (state != null) ? state.style : this.getCellStyle(cell);
                    if (style != null && !Five.Cells.isEdge(cell)) {
                        return style.shape == Five.ShapeStyle.Swimlane;
                    }
                }
            }
            return false;
        };
        Graph.prototype.isSwimlaneSelectionEnabled = function () {
            return this.swimlaneSelectionEnabled;
        };
        Graph.prototype.getLabel = function (cell) {
            var result = "";
            if (this.labelsVisible && cell != null) {
                var state = this.view.getState(cell);
                var style = (state != null) ? state.style : this.getCellStyle(cell);
                if (!style.noLabel) {
                    result = this.convertValueToString(cell);
                }
            }
            return result;
        };
        Graph.prototype.convertValueToString = function (cell) {
            var value = Five.Cells.getValue(cell);
            if (value != null) {
                if (Five.Utils.isNode(value)) {
                    return value.nodeName;
                }
                else if (typeof (value.toString) == "function") {
                    return value.toString();
                }
            }
            return "";
        };
        Graph.prototype.getImageFromBundles = function (key) {
            if (key != null) {
                for (var i = 0; i < this.imageBundles.length; i++) {
                    var image = this.imageBundles[i].getImage(key);
                    if (image != null) {
                        return image;
                    }
                }
            }
            return null;
        };
        Graph.prototype.isHtmlLabel = function (cell) {
            return this.isHtmlLabels();
        };
        Graph.prototype.isHtmlLabels = function () {
            return this.htmlLabels;
        };
        Graph.prototype.stopEditing = function (cancel) {
            this.cellEditor.stopEditing(cancel);
        };
        Graph.prototype.getCellOverlays = function (cell) {
            return cell.overlays;
        };
        Graph.prototype.addCellOverlay = function (cell, overlay) {
            if (cell.overlays == null) {
                cell.overlays = [];
            }
            cell.overlays.push(overlay);
            var state = this.view.getState(cell);
            if (state != null) {
                this.cellRenderer.redraw(state);
            }
            this.onAddOverlay.fire(new Five.CellOverlayEvent(cell, overlay));
            return overlay;
        };
        Graph.prototype.isInvokesStopCellEditing = function () {
            return this.invokesStopCellEditing;
        };
        Graph.prototype.getFoldingImage = function (state) {
            if (state != null && this.foldingEnabled && !Five.Cells.isEdge(state.cell)) {
                var tmp = this.isCellCollapsed(state.cell);
                if (this.isCellFoldable(state.cell, !tmp)) {
                    return (tmp) ? this.collapsedImage : this.expandedImage;
                }
            }
            return null;
        };
        Graph.prototype.foldCells = function (collapse, recurse, cells, checkFoldable) {
            if (recurse === void 0) { recurse = false; }
            if (checkFoldable === void 0) { checkFoldable = false; }
            recurse = (recurse != null) ? recurse : false;
            if (cells == null) {
                cells = this.getFoldableCells(this.getSelectionCells(), collapse);
            }
            this.stopEditing(false);
            this.model.beginUpdate();
            try {
                this.cellsFolded(cells, collapse, recurse, checkFoldable);
                this.onFoldCells.fire(new Five.FoldCellsEvent(collapse, recurse, cells));
            }
            finally {
                this.model.endUpdate();
            }
            return cells;
        };
        Graph.prototype.getVerticalAlign = function (state) {
            return (state != null && state.style != null) ?
                (state.style.vAlign || Five.VerticalAlign.Middle) : null;
        };
        Graph.prototype.getEdgeValidationError = function (edge, source, target) {
            if (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null)) {
                return "";
            }
            if (edge != null && Five.Cells.getTerminal(edge, true) == null &&
                Five.Cells.getTerminal(edge, false) == null) {
                return null;
            }
            if (!this.allowLoops && source == target && source != null) {
                return "";
            }
            if (!this.isValidConnection(source, target)) {
                return "";
            }
            if (source != null && target != null) {
                var error = "";
                if (!this.multigraph) {
                    var tmp = this.model.getEdgesBetween(source, target, true);
                    if (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge)) {
                        error += (Five.Resources.get(this.alreadyConnectedResource) || this.alreadyConnectedResource) + "\n";
                    }
                }
                var sourceOut = this.model.getDirectedEdgeCount(source, true, edge);
                var targetIn = this.model.getDirectedEdgeCount(target, false, edge);
                var err;
                if (this.multiplicities != null) {
                    for (var i = 0; i < this.multiplicities.length; i++) {
                        err = this.multiplicities[i].check(this, edge, source, target, sourceOut, targetIn);
                        if (err != null) {
                            error += err;
                        }
                    }
                }
                err = this.validateEdge(edge, source, target);
                if (err != null) {
                    error += err;
                }
                return (error.length > 0) ? error : null;
            }
            return (this.allowDanglingEdges) ? null : "";
        };
        Graph.prototype.validateEdge = function (edge, source, target) {
            return null;
        };
        Graph.prototype.isCellBendable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.isCellsBendable() && !this.isCellLocked(cell) && style[Five.Constants.styleBendable] == "1";
        };
        Graph.prototype.isTerminalPointMovable = function (cell, isSource) {
            return true;
        };
        Graph.prototype.isCellDisconnectable = function (cell, terminal, isSource) {
            return this.isCellsDisconnectable() && !this.isCellLocked(cell);
        };
        Graph.prototype.getTolerance = function () {
            return this.tolerance;
        };
        Graph.prototype.isCellConnectable = function (cell) {
            return this.model.isConnectable(cell);
        };
        Graph.prototype.getAllConnectionConstraints = function (terminal, source) {
            if (terminal != null && terminal.shape != null && terminal.shape.stencil != null) {
                return terminal.shape.stencil.constraints;
            }
            return null;
        };
        Graph.prototype.getEditingValue = function (cell, evt) {
            return this.convertValueToString(cell);
        };
        Graph.prototype.labelChanged = function (cell, value, evt) {
            this.model.beginUpdate();
            try {
                var old = cell.value;
                this.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));
                this.onLabelChanged.fire(new Five.LabelChangedEvent(cell, value, old, evt));
            }
            finally {
                this.model.endUpdate();
            }
            return cell;
        };
        Graph.prototype.isLabelMovable = function (cell) {
            return !this.isCellLocked(cell) &&
                ((Five.Cells.isEdge(cell) && this.edgeLabelsMovable) ||
                    (Five.Cells.isVertex(cell) && this.vertexLabelsMovable));
        };
        Graph.prototype.isGridEnabledEvent = function (evt) {
            return evt != null && !Five.Events.isMouseAltDown(evt);
        };
        Graph.prototype.hitsSwimlaneContent = function (swimlane, x, y) {
            var state = this.getView().getState(swimlane);
            var size = this.getStartSize(swimlane);
            if (state != null) {
                var scale = this.getView().getScale();
                x -= state.x;
                y -= state.y;
                if (size.width > 0 && x > 0 && x > size.width * scale) {
                    return true;
                }
                else if (size.height > 0 && y > 0 && y > size.height * scale) {
                    return true;
                }
            }
            return false;
        };
        Graph.prototype.getOutlineConstraint = function (point, terminalState, me) {
            if (terminalState.shape != null) {
                var bounds = this.view.getPerimeterBounds(terminalState);
                var direction = terminalState.style.direction;
                if (direction == Five.Direction.North || direction == Five.Direction.South) {
                    bounds.x += bounds.width / 2 - bounds.height / 2;
                    bounds.y += bounds.height / 2 - bounds.width / 2;
                    var tmp = bounds.width;
                    bounds.width = bounds.height;
                    bounds.height = tmp;
                }
                var alpha = Five.Utils.toRadians(terminalState.shape.getShapeRotation());
                if (alpha != 0) {
                    var cos = Math.cos(-alpha);
                    var sin = Math.sin(-alpha);
                    var ct = new Five.Point(bounds.getCenterX(), bounds.getCenterY());
                    point = Five.Utils.getRotatedPoint(point, cos, sin, ct);
                }
                var sx = 1;
                var sy = 1;
                var dx = 0;
                var dy = 0;
                if (Five.Cells.isVertex(terminalState.cell)) {
                    var flipH = terminalState.style.flipH;
                    var flipV = terminalState.style.flipV;
                    if (terminalState.shape != null && terminalState.shape.stencil != null) {
                        flipH = terminalState.style.stencilFlipH || flipH;
                        flipV = terminalState.style.stencilFlipV || flipV;
                    }
                    if (direction == Five.Direction.North || direction == Five.Direction.South) {
                        var tmp1 = flipH;
                        flipH = flipV;
                        flipV = tmp1;
                    }
                    if (flipH) {
                        sx = -1;
                        dx = -bounds.width;
                    }
                    if (flipV) {
                        sy = -1;
                        dy = -bounds.height;
                    }
                }
                point = new Five.Point((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);
                var x = Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;
                var y = Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;
                return new Five.ConnectionConstraint(new Five.Point(x, y), false);
            }
            return null;
        };
        Graph.prototype.isCloneEvent = function (evt) {
            return Five.Events.isMouseControlDown(evt);
        };
        Graph.prototype.isCellsCloneable = function () {
            return this.cellsCloneable;
        };
        Graph.prototype.validationAlert = function (message) {
            Five.Utils.alert(message);
        };
        Graph.prototype.isAllowDanglingEdges = function () {
            return this.allowDanglingEdges;
        };
        Graph.prototype.setAllowDanglingEdges = function (value) {
            this.allowDanglingEdges = value;
        };
        Graph.prototype.cloneCells = function (cells, allowInvalidEdges) {
            if (allowInvalidEdges === void 0) { allowInvalidEdges = true; }
            var clones = null;
            if (cells != null) {
                var hash = new Object();
                var tmp = [];
                var i;
                for (i = 0; i < cells.length; i++) {
                    var id = Five.CellPath.create(cells[i]);
                    hash[id] = cells[i];
                    tmp.push(cells[i]);
                }
                if (tmp.length > 0) {
                    var scale = this.view.scale;
                    var trans = this.view.translate;
                    clones = this.model.cloneCells(cells, true);
                    for (i = 0; i < cells.length; i++) {
                        if (!allowInvalidEdges && Five.Cells.isEdge(clones[i]) &&
                            this.getEdgeValidationError(clones[i], Five.Cells.getTerminal(clones[i], true), Five.Cells.getTerminal(clones[i], false)) != null) {
                            clones[i] = null;
                        }
                        else {
                            var g = Five.Cells.getGeometry(clones[i]);
                            if (g != null) {
                                var state = this.view.getState(cells[i]);
                                var pstate = this.view.getState(Five.Cells.getParent(cells[i]));
                                if (state != null && pstate != null) {
                                    var dx = pstate.origin.x;
                                    var dy = pstate.origin.y;
                                    if (Five.Cells.isEdge(clones[i])) {
                                        var pts = state.absolutePoints;
                                        var src = Five.Cells.getTerminal(cells[i], true);
                                        var srcId = Five.CellPath.create(src);
                                        while (src != null && hash[srcId] == null) {
                                            src = Five.Cells.getParent(src);
                                            srcId = Five.CellPath.create(src);
                                        }
                                        if (src == null) {
                                            g.setTerminalPoint(new Five.Point(pts[0].x / scale - trans.x, pts[0].y / scale - trans.y), true);
                                        }
                                        var trg = Five.Cells.getTerminal(cells[i], false);
                                        var trgId = Five.CellPath.create(trg);
                                        while (trg != null && hash[trgId] == null) {
                                            trg = Five.Cells.getParent(trg);
                                            trgId = Five.CellPath.create(trg);
                                        }
                                        if (trg == null) {
                                            var n = pts.length - 1;
                                            g.setTerminalPoint(new Five.Point(pts[n].x / scale - trans.x, pts[n].y / scale - trans.y), false);
                                        }
                                        var points = g.points;
                                        if (points != null) {
                                            for (var j = 0; j < points.length; j++) {
                                                points[j].x += dx;
                                                points[j].y += dy;
                                            }
                                        }
                                    }
                                    else {
                                        g.translate(dx, dy);
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    clones = [];
                }
            }
            return clones;
        };
        Graph.prototype.connectCell = function (edge, terminal, source, constraint) {
            this.model.beginUpdate();
            try {
                var previous = Five.Cells.getTerminal(edge, source);
                this.cellConnected(edge, terminal, source, constraint);
                this.onConnectCell.fire(new Five.ConnectCellEvent(edge, terminal, source, previous));
            }
            finally {
                this.model.endUpdate();
            }
            return edge;
        };
        Graph.prototype.startEditingAtCell = function (cell, evt) {
            if (evt == null || !Five.Events.isMultiTouchEvent(evt)) {
                if (cell == null) {
                    cell = this.getSelectionCell();
                    if (cell != null && !this.isCellEditable(cell)) {
                        cell = null;
                    }
                }
                if (cell != null) {
                    this.onStartEditing.fire(new Five.StartEditingEvent(cell, evt));
                    this.cellEditor.startEditing(cell, evt);
                }
            }
        };
        Graph.prototype.isCellSelectable = function (cell) {
            return this.isCellsSelectable();
        };
        Graph.prototype.isCellsSelectable = function () {
            return this.cellsSelectable;
        };
        Graph.prototype.getSelectionCell = function () {
            return this.getSelectionModel().cells[0];
        };
        Graph.prototype.cellConnected = function (edge, terminal, source, constraint) {
            if (edge != null) {
                this.model.beginUpdate();
                try {
                    var previous = Five.Cells.getTerminal(edge, source);
                    this.setConnectionConstraint(edge, terminal, source, constraint);
                    if (this.isPortsEnabled()) {
                        if (this.isPort(terminal)) {
                            terminal = this.getTerminalForPort(terminal, source);
                        }
                    }
                    this.model.setTerminal(edge, terminal, source);
                    if (this.resetEdgesOnConnect) {
                        this.resetEdge(edge);
                    }
                    this.onCellConnected.fire(new Five.ConnectCellEvent(edge, terminal, source, previous));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.setConnectionConstraint = function (edge, terminal, source, constraint) {
            if (constraint != null) {
                this.model.beginUpdate();
                try {
                    if (constraint.point == null) {
                        this.setCellStyles((source) ? function (s) { return s.exitX = null; } : function (s) { return s.entryX = null; }, [edge]);
                        this.setCellStyles((source) ? function (s) { return s.exitY = null; } : function (s) { return s.entryY = null; }, [edge]);
                        this.setCellStyles((source) ? function (s) { return s.exitPerimeter = null; } : function (s) { return s.entryPerimeter = null; }, [edge]);
                    }
                    else {
                        this.setCellStyles((source) ? function (s) { return s.exitX = constraint.point.x; } : function (s) { return s.entryX = constraint.point.x; }, [edge]);
                        this.setCellStyles((source) ? function (s) { return s.exitY = constraint.point.y; } : function (s) { return s.entryY = constraint.point.y; }, [edge]);
                        if (!constraint.perimeter) {
                            this.setCellStyles((source) ? function (s) { return s.exitPerimeter = false; } : function (s) { return s.entryPerimeter = false; }, [edge]);
                        }
                        else {
                            this.setCellStyles((source) ? function (s) { return s.exitPerimeter = null; } : function (s) { return s.entryPerimeter = null; }, [edge]);
                        }
                    }
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.setCellStyles = function (style, cells) {
            cells = cells || this.getSelectionCells();
            this.model.setCellStyles(cells, style);
        };
        Graph.prototype.isPortsEnabled = function () {
            return this.portsEnabled;
        };
        Graph.prototype.isPort = function (cell) {
            return false;
        };
        Graph.prototype.getSelectionCells = function () {
            return this.getSelectionModel().cells.slice();
        };
        Graph.prototype.createHandler = function (state) {
            var result = null;
            if (state != null) {
                if (Five.Cells.isEdge(state.cell)) {
                    var style = this.view.getEdgeStyle(state);
                    if (this.isLoop(state) ||
                        style == Five.EdgeStyle.elbowConnector ||
                        style == Five.EdgeStyle.sideToSide ||
                        style == Five.EdgeStyle.topToBottom) {
                        result = new Five.ElbowEdgeHandler(state, this.config.selectionHandle);
                    }
                    else if (style == Five.EdgeStyle.segmentConnector ||
                        style == Five.EdgeStyle.orthConnector) {
                        result = new Five.EdgeSegmentHandler(state, this.config.selectionHandle);
                    }
                    else {
                        result = new Five.EdgeHandler(state, this.config.selectionHandle);
                    }
                }
                else {
                    result = new Five.VertexHandler(state, this.config.nodeSelection, this.config.selectionHandle);
                }
            }
            return result;
        };
        Graph.prototype.isLoop = function (state) {
            var src = state.getVisibleTerminalState(true);
            var trg = state.getVisibleTerminalState(false);
            return (src != null && src == trg);
        };
        Graph.prototype.isValidSource = function (cell) {
            return (cell == null && this.allowDanglingEdges) ||
                (cell != null && (!Five.Cells.isEdge(cell) ||
                    this.connectableEdges) && this.isCellConnectable(cell));
        };
        Graph.prototype.getStartSize = function (swimlane) {
            var result = new Five.Rectangle(0, 0, 0, 0);
            var state = this.view.getState(swimlane);
            var style = (state != null) ? state.style : this.getCellStyle(swimlane);
            if (style != null) {
                var size = style.startSize || Five.Constants.defaultStartsize;
                if (!style.portrait) {
                    result.height = size;
                }
                else {
                    result.width = size;
                }
            }
            return result;
        };
        Graph.prototype.getPointForEvent = function (evt, addOffset) {
            if (addOffset === void 0) { addOffset = true; }
            var p = this.container.convertPoint(Five.Events.getClientX(evt), Five.Events.getClientY(evt));
            var s = this.view.scale;
            var tr = this.view.translate;
            var off = addOffset ? this.gridSize / 2 : 0;
            p.x = this.snap(p.x / s - tr.x - off);
            p.y = this.snap(p.y / s - tr.y - off);
            return p;
        };
        Graph.prototype.isCellMovable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.isCellsMovable() && !this.isCellLocked(cell) && style.movable;
        };
        Graph.prototype.getDropTarget = function (cells, evt, cell, clone) {
            if (!this.isSwimlaneNesting()) {
                for (var i = 0; i < cells.length; i++) {
                    if (this.isSwimlane(cells[i])) {
                        return null;
                    }
                }
            }
            var pt = this.container.convertPoint(Five.Events.getClientX(evt), Five.Events.getClientY(evt));
            pt.x -= this.panDx;
            pt.y -= this.panDy;
            var swimlane = this.getSwimlaneAt(pt.x, pt.y);
            if (cell == null) {
                cell = swimlane;
            }
            else if (swimlane != null) {
                var tmp = Five.Cells.getParent(swimlane);
                while (tmp != null && this.isSwimlane(tmp) && tmp != cell) {
                    tmp = Five.Cells.getParent(tmp);
                }
                if (tmp == cell) {
                    cell = swimlane;
                }
            }
            while (cell != null && !this.isValidDropTarget(cell, cells, evt) && !this.model.isLayer(cell)) {
                cell = Five.Cells.getParent(cell);
            }
            var parent;
            if (clone == null || !clone) {
                parent = cell;
                while (parent != null && Five.Utils.indexOf(cells, parent) < 0) {
                    parent = Five.Cells.getParent(parent);
                }
            }
            return (!this.model.isLayer(cell) && parent == null) ? cell : null;
        };
        Graph.prototype.getDefaultParent = function () {
            var parent = this.getCurrentRoot();
            if (parent == null) {
                parent = this.defaultParent;
                if (parent == null) {
                    var root = this.model.getRoot();
                    parent = Five.Cells.getChildAt(root, 0);
                }
            }
            return parent;
        };
        Graph.prototype.addCell = function (cell, parent, index, source, target) {
            return this.addCells([cell], parent, index, source, target)[0];
        };
        Graph.prototype.addCells = function (cells, parent, index, source, target) {
            if (parent == null) {
                parent = this.getDefaultParent();
            }
            if (index == null) {
                index = Five.Cells.getChildCount(parent);
            }
            this.model.beginUpdate();
            try {
                this.cellsAdded(cells, parent, index, source, target, false, true);
                this.onAddCells.fire(new Five.AddCellsEvent(cells, parent, index, source, target));
            }
            finally {
                this.model.endUpdate();
            }
            return cells;
        };
        Graph.prototype.insertEdge = function (parent, id, value, source, target, style) {
            var edge = this.createEdge(parent, id, value, source, target, style);
            return this.addEdge(edge, parent, source, target);
        };
        Graph.prototype.addEdge = function (edge, parent, source, target, index) {
            return this.addCell(edge, parent, index, source, target);
        };
        Graph.prototype.isGridEnabled = function () {
            return this.gridEnabled;
        };
        Graph.prototype.getTooltipForCell = function (cell) {
            return this.convertValueToString(cell);
        };
        Graph.prototype.flipEdge = function (edge) {
            if (edge != null &&
                this.alternateEdgeStyle != null) {
                this.model.beginUpdate();
                try {
                    var style = Five.Cells.getStyle(edge);
                    if (style.name == null || style.name.length == 0) {
                        this.model.setStyle(edge, this.alternateEdgeStyle);
                    }
                    else {
                        this.model.setStyle(edge, null);
                    }
                    this.resetEdge(edge);
                    this.onFlipEdge.fire(new Five.FlipEdgeEvent(edge));
                }
                finally {
                    this.model.endUpdate();
                }
            }
            return edge;
        };
        Graph.prototype.getMovableCells = function (cells) {
            var _this = this;
            return cells.filter(function (c) { return _this.isCellMovable(c); });
        };
        Graph.prototype.isConstrainedEvent = function (evt) {
            return Five.Events.isMouseShiftDown(evt);
        };
        Graph.prototype.isDropEnabled = function () {
            return this.dropEnabled;
        };
        Graph.prototype.getCursorForMouseEvent = function (me) {
            return this.getCursorForCell(me.getCell());
        };
        Graph.prototype.isEdgeValid = function (edge, source, target) {
            return this.getEdgeValidationError(edge, source, target) == null;
        };
        Graph.prototype.isSplitEnabled = function () {
            return this.splitEnabled;
        };
        Graph.prototype.isSplitTarget = function (target, cells, evt) {
            if (Five.Cells.isEdge(target) && cells != null && cells.length == 1 &&
                this.isCellConnectable(cells[0]) && this.getEdgeValidationError(target, Five.Cells.getTerminal(target, true), cells[0]) == null) {
                var src = Five.Cells.getTerminal(target, true);
                var trg = Five.Cells.getTerminal(target, false);
                return (!Five.Cells.isAncestor(cells[0], src) &&
                    !Five.Cells.isAncestor(cells[0], trg));
            }
            return false;
        };
        Graph.prototype.splitEdge = function (edge, cells, newEdge, dx, dy) {
            dx = dx || 0;
            dy = dy || 0;
            if (newEdge == null) {
                newEdge = this.cloneCells([edge])[0];
            }
            var parent = Five.Cells.getParent(edge);
            var source = Five.Cells.getTerminal(edge, true);
            this.model.beginUpdate();
            try {
                this.cellsMoved(cells, dx, dy, false, false);
                this.cellsAdded(cells, parent, Five.Cells.getChildCount(parent), null, null, true);
                this.cellsAdded([newEdge], parent, Five.Cells.getChildCount(parent), source, cells[0], false);
                this.cellConnected(edge, cells[0], true);
                this.onSplitEdge.fire(new Five.SplitEdgeEvent(edge, cells, newEdge, dx, dy));
            }
            finally {
                this.model.endUpdate();
            }
            return newEdge;
        };
        Graph.prototype.getCloneableCells = function (cells) {
            var _this = this;
            return cells.filter(function (c) { return _this.isCellCloneable(c); });
        };
        Graph.prototype.moveCells = function (cells, dx, dy, clone, target, evt) {
            if (clone === void 0) { clone = false; }
            dx = (dx != null) ? dx : 0;
            dy = (dy != null) ? dy : 0;
            clone = (clone != null) ? clone : false;
            if (cells != null && (dx != 0 || dy != 0 || clone || target != null)) {
                this.model.beginUpdate();
                try {
                    if (clone) {
                        cells = this.cloneCells(cells, this.isCloneInvalidEdges());
                        if (target == null) {
                            target = this.getDefaultParent();
                        }
                    }
                    var previous = this.isAllowNegativeCoordinates();
                    if (target != null) {
                        this.setAllowNegativeCoordinates(true);
                    }
                    this.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()
                        && this.isAllowDanglingEdges(), target == null, this.isExtendParentsOnMove() && target == null);
                    this.setAllowNegativeCoordinates(previous);
                    if (target != null) {
                        var index = Five.Cells.getChildCount(target);
                        this.cellsAdded(cells, target, index, null, null, true);
                    }
                    this.onMoveCells.fire(new Five.MoveCellsEvent(cells, dx, dy, clone, target, evt));
                }
                finally {
                    this.model.endUpdate();
                }
            }
            return cells;
        };
        Graph.prototype.scrollCellToVisible = function (cell, center) {
            var x = -this.view.translate.x;
            var y = -this.view.translate.y;
            var state = this.view.getState(cell);
            if (state != null) {
                var bounds = new Five.Rectangle(x + state.x, y + state.y, state.width, state.height);
                if (center && this.container != null) {
                    var size = this.container.getClientSize();
                    var w = size.x;
                    var h = size.y;
                    bounds.x = bounds.getCenterX() - w / 2;
                    bounds.width = w;
                    bounds.y = bounds.getCenterY() - h / 2;
                    bounds.height = h;
                }
                if (this.scrollRectToVisible(bounds)) {
                    this.view.setTranslate(this.view.translate.x, this.view.translate.y);
                }
            }
        };
        Graph.prototype.setSelectionCells = function (cells) {
            this.getSelectionModel().setCells(cells);
        };
        Graph.prototype.zoomTo = function (scale, center) {
            this.zoom(scale / this.view.scale, center);
        };
        Graph.prototype.zoom = function (factor, center) {
            center = (center != null) ? center : this.centerZoom;
            var scale = Math.round(this.view.scale * factor * 100) / 100;
            var state = this.view.getState(this.getSelectionCell());
            factor = scale / this.view.scale;
            if (this.keepSelectionVisibleOnZoom && state != null) {
                var rect = new Five.Rectangle(state.x * factor, state.y * factor, state.width * factor, state.height * factor);
                this.view.scale = scale;
                if (!this.scrollRectToVisible(rect)) {
                    this.view.revalidate();
                    this.view.setScale(scale);
                }
            }
            else {
                var hasScrollbars = this.container.hasScrollbars();
                var dx;
                var dy;
                var offset;
                if (center && !hasScrollbars) {
                    offset = this.container.getOffsetSize();
                    dx = offset.x;
                    dy = offset.y;
                    var f;
                    if (factor > 1) {
                        f = (factor - 1) / (scale * 2);
                        dx *= -f;
                        dy *= -f;
                    }
                    else {
                        f = (1 / factor - 1) / (this.view.scale * 2);
                        dx *= f;
                        dy *= f;
                    }
                    this.view.scaleAndTranslate(scale, this.view.translate.x + dx, this.view.translate.y + dy);
                }
                else {
                    var tx = this.view.translate.x;
                    var ty = this.view.translate.y;
                    this.view.setScale(scale);
                    if (hasScrollbars) {
                        dx = 0;
                        dy = 0;
                        if (center) {
                            offset = this.container.getOffsetSize();
                            dx = offset.x * (factor - 1) / 2;
                            dy = offset.y * (factor - 1) / 2;
                        }
                        var wasScroll = this.container.getScroll();
                        var sl = wasScroll.x;
                        var st = wasScroll.y;
                        this.container.setScroll((this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx), (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy));
                    }
                }
            }
        };
        Graph.prototype.tapAndHold = function (me) {
            var evt = me.getEvent();
            var gestureEvent = new Five.GestureEvent(evt, me.getCell());
            this.onTapAndHold.fire(gestureEvent);
            if (gestureEvent.isConsumed()) {
                this.panningHandler.panningTrigger = false;
            }
            if (this.isEnabled() && !Five.Events.isConsumed(evt) && !gestureEvent.isConsumed() && this.connectionHandler.isEnabled()) {
                var state = this.view.getState(this.connectionHandler.marker.getCell(me));
                if (state != null) {
                    this.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;
                    this.connectionHandler.marker.markedState = state;
                    this.connectionHandler.marker.mark();
                    this.connectionHandler.first = new Five.Point(me.getGraphX(), me.getGraphY());
                    this.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);
                    this.connectionHandler.previous = state;
                    this.connectionHandler.onStartConnect.fire(new Five.StartConnectEvent(this.connectionHandler.previous));
                }
            }
        };
        Graph.prototype.isCellFoldable = function (cell, collapse) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return Five.Cells.getChildCount(cell) > 0 && style[Five.Constants.styleFoldable] != "0";
        };
        Graph.prototype.getFoldableCells = function (cells, collapse) {
            var _this = this;
            return cells.filter(function (c) { return _this.isCellFoldable(c, collapse); });
        };
        Graph.prototype.cellsFolded = function (cells, collapse, recurse, checkFoldable) {
            if (cells != null && cells.length > 0) {
                this.model.beginUpdate();
                try {
                    for (var i = 0; i < cells.length; i++) {
                        if ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&
                            collapse != this.isCellCollapsed(cells[i])) {
                            this.model.setCollapsed(cells[i], collapse);
                            this.swapBounds(cells[i], collapse);
                            if (this.isExtendParent(cells[i])) {
                                this.extendParent(cells[i]);
                            }
                            if (recurse) {
                                var children = this.model.getChildren(cells[i]);
                                this.foldCells(collapse, recurse, children);
                            }
                        }
                    }
                    this.onCellsFolded.fire(new Five.FoldCellsEvent(collapse, recurse, cells));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.isValidConnection = function (source, target) {
            return this.isValidSource(source) && this.isValidTarget(target);
        };
        Graph.prototype.isCellsBendable = function () {
            return this.cellsBendable;
        };
        Graph.prototype.isCellsDisconnectable = function () {
            return this.cellsDisconnectable;
        };
        Graph.prototype.cellLabelChanged = function (cell, value, autoSize) {
            this.model.beginUpdate();
            try {
                this.model.setValue(cell, value);
                if (autoSize) {
                    this.cellSizeUpdated(cell, false);
                }
            }
            finally {
                this.model.endUpdate();
            }
        };
        Graph.prototype.isAutoSizeCell = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.isAutoSizeCells() || style.autoSize;
        };
        Graph.prototype.getTerminalForPort = function (cell, source) {
            return Five.Cells.getParent(cell);
        };
        Graph.prototype.resetEdge = function (edge) {
            var geo = Five.Cells.getGeometry(edge);
            if (geo != null && geo.points != null && geo.points.length > 0) {
                geo = geo.clone();
                geo.points = [];
                this.model.setGeometry(edge, geo);
            }
            return edge;
        };
        Graph.prototype.isCellResizable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.cellsResizable && !this.isCellLocked(cell) && style.resizable;
        };
        Graph.prototype.isCellRotatable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return style[Five.Constants.styleRotatable] == "1";
        };
        Graph.prototype.getChildCells = function (parent, vertices, edges) {
            if (vertices === void 0) { vertices = false; }
            if (edges === void 0) { edges = false; }
            parent = (parent != null) ? parent : this.getDefaultParent();
            var cells = this.model.getChildCells(parent, vertices, edges);
            var result = [];
            for (var i = 0; i < cells.length; i++) {
                if (this.isCellVisible(cells[i])) {
                    result.push(cells[i]);
                }
            }
            return result;
        };
        Graph.prototype.getEdges = function (cell, parent, incoming, outgoing, includeLoops, recurse) {
            if (incoming === void 0) { incoming = true; }
            if (outgoing === void 0) { outgoing = true; }
            if (includeLoops === void 0) { includeLoops = true; }
            if (recurse === void 0) { recurse = false; }
            var edges = [];
            var isCollapsed = this.isCellCollapsed(cell);
            var childCount = Five.Cells.getChildCount(cell);
            var i;
            for (i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(cell, i);
                if (isCollapsed || !this.isCellVisible(child)) {
                    edges = edges.concat(this.model.getEdges(child, incoming, outgoing));
                }
            }
            edges = edges.concat(this.model.getEdges(cell, incoming, outgoing));
            var result = [];
            for (i = 0; i < edges.length; i++) {
                var state = this.view.getState(edges[i]);
                var source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);
                var target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);
                if ((includeLoops && source == target) || ((source != target) && ((incoming &&
                    target == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||
                    (outgoing && source == cell && (parent == null ||
                        this.isValidAncestor(target, parent, recurse)))))) {
                    result.push(edges[i]);
                }
            }
            return result;
        };
        Graph.prototype.isRecursiveResize = function (state) {
            return this.recursiveResize;
        };
        Graph.prototype.resizeCell = function (cell, bounds, recurse) {
            return this.resizeCells([cell], [bounds], recurse)[0];
        };
        Graph.prototype.resizeCells = function (cells, bounds, recurse) {
            recurse = (recurse != null) ? recurse : this.isRecursiveResize();
            this.model.beginUpdate();
            try {
                this.cellsResized(cells, bounds, recurse);
                this.onResizeCells.fire(new Five.ResizeCellsEvent(cells, bounds));
            }
            finally {
                this.model.endUpdate();
            }
            return cells;
        };
        Graph.prototype.isCellsMovable = function () {
            return this.cellsMovable;
        };
        Graph.prototype.isSwimlaneNesting = function () {
            return this.swimlaneNesting;
        };
        Graph.prototype.isValidDropTarget = function (cell, cells, evt) {
            return cell != null && ((this.isSplitEnabled() &&
                this.isSplitTarget(cell, cells, evt)) || (!Five.Cells.isEdge(cell) &&
                (this.isSwimlane(cell) || (Five.Cells.getChildCount(cell) > 0 &&
                    !this.isCellCollapsed(cell)))));
        };
        Graph.prototype.cellsAdded = function (cells, parent, index, source, target, absolute, constrain) {
            if (constrain === void 0) { constrain = true; }
            if (cells != null && parent != null && index != null) {
                this.model.beginUpdate();
                try {
                    var parentState = (absolute) ? this.view.getState(parent) : null;
                    var o1 = (parentState != null) ? parentState.origin : null;
                    var zero = new Five.Point(0, 0);
                    for (var i = 0; i < cells.length; i++) {
                        if (cells[i] == null) {
                            index--;
                        }
                        else {
                            var previous = Five.Cells.getParent(cells[i]);
                            if (o1 != null && cells[i] != parent && parent != previous) {
                                var oldState = this.view.getState(previous);
                                var o2 = (oldState != null) ? oldState.origin : zero;
                                var geo = Five.Cells.getGeometry(cells[i]);
                                if (geo != null) {
                                    var dx = o2.x - o1.x;
                                    var dy = o2.y - o1.y;
                                    geo = geo.clone();
                                    geo.translate(dx, dy);
                                    if (!geo.relative && Five.Cells.isVertex(cells[i]) &&
                                        !this.isAllowNegativeCoordinates()) {
                                        geo.x = Math.max(0, geo.x);
                                        geo.y = Math.max(0, geo.y);
                                    }
                                    this.model.setGeometry(cells[i], geo);
                                }
                            }
                            if (parent == previous && index + i > Five.Cells.getChildCount(parent)) {
                                index--;
                            }
                            this.model.add(parent, cells[i], index + i);
                            if (this.autoSizeCellsOnAdd) {
                                this.autoSizeCell(cells[i], true);
                            }
                            if (this.isExtendParentsOnAdd() && this.isExtendParent(cells[i])) {
                                this.extendParent(cells[i]);
                            }
                            if (constrain == null || constrain) {
                                this.constrainChild(cells[i]);
                            }
                            if (source != null) {
                                this.cellConnected(cells[i], source, true);
                            }
                            if (target != null) {
                                this.cellConnected(cells[i], target, false);
                            }
                        }
                    }
                    this.onCellsAdded.fire(new Five.CellsAddedEvent(cells, parent, index, source, target, absolute));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.createEdge = function (parent, id, value, source, target, style) {
            var edge = new Five.Cell(value, new Five.Geometry(), style);
            edge.setId(id);
            edge.setEdge(true);
            edge.geometry.relative = true;
            return edge;
        };
        Graph.prototype.getCursorForCell = function (cell) {
            return null;
        };
        Graph.prototype.cellsMoved = function (cells, dx, dy, disconnect, constrain, extend) {
            if (extend === void 0) { extend = false; }
            if (cells != null && (dx != 0 || dy != 0)) {
                cells = this.model.getTopmostCells(cells);
                this.model.beginUpdate();
                try {
                    if (disconnect) {
                        this.disconnectGraph(cells);
                    }
                    for (var i = 0; i < cells.length; i++) {
                        this.translateCell(cells[i], dx, dy);
                        if (extend && this.isExtendParent(cells[i])) {
                            this.extendParent(cells[i]);
                        }
                        else if (constrain) {
                            this.constrainChild(cells[i]);
                        }
                    }
                    if (this.resetEdgesOnMove) {
                        this.resetEdges(cells);
                    }
                    this.onCellsMoved.fire(new Five.CellsMovedEvent(cells, dx, dy, disconnect));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.isCellCloneable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.isCellsCloneable() && style[Five.Constants.styleCloneable] == "1";
        };
        Graph.prototype.isCloneInvalidEdges = function () {
            return this.cloneInvalidEdges;
        };
        Graph.prototype.isAllowNegativeCoordinates = function () {
            return this.allowNegativeCoordinates;
        };
        Graph.prototype.setAllowNegativeCoordinates = function (value) {
            this.allowNegativeCoordinates = value;
        };
        Graph.prototype.isDisconnectOnMove = function () {
            return this.disconnectOnMove;
        };
        Graph.prototype.isExtendParentsOnMove = function () {
            return this.extendParentsOnMove;
        };
        Graph.prototype.scrollRectToVisible = function (rect) {
            var isChanged = false;
            if (rect != null) {
                var offset = this.container.getOffsetSize();
                var w = offset.x;
                var h = offset.y;
                var widthLimit = Math.min(w, rect.width);
                var heightLimit = Math.min(h, rect.height);
                if (this.container.hasScrollbars()) {
                    var scroll = this.container.getScroll();
                    var client = this.container.getClientSize();
                    rect.x += this.view.translate.x;
                    rect.y += this.view.translate.y;
                    var dx = scroll.x - rect.x;
                    var ddx = Math.max(dx - scroll.x, 0);
                    if (dx > 0) {
                        scroll.x -= dx + 2;
                    }
                    else {
                        dx = rect.x + widthLimit - scroll.x - client.x;
                        if (dx > 0) {
                            scroll.x += dx + 2;
                        }
                    }
                    var dy = scroll.y - rect.y;
                    var ddy = Math.max(0, dy - scroll.y);
                    if (dy > 0) {
                        scroll.y -= dy + 2;
                    }
                    else {
                        dy = rect.y + heightLimit - scroll.y - client.y;
                        if (dy > 0) {
                            scroll.y += dy + 2;
                        }
                    }
                    this.container.setScroll(scroll.x, scroll.y);
                    if (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0)) {
                        this.view.setTranslate(ddx, ddy);
                    }
                }
                else {
                    var x = -this.view.translate.x;
                    var y = -this.view.translate.y;
                    var s = this.view.scale;
                    if (rect.x + widthLimit > x + w) {
                        this.view.translate.x -= (rect.x + widthLimit - w - x) / s;
                        isChanged = true;
                    }
                    if (rect.y + heightLimit > y + h) {
                        this.view.translate.y -= (rect.y + heightLimit - h - y) / s;
                        isChanged = true;
                    }
                    if (rect.x < x) {
                        this.view.translate.x += (x - rect.x) / s;
                        isChanged = true;
                    }
                    if (rect.y < y) {
                        this.view.translate.y += (y - rect.y) / s;
                        isChanged = true;
                    }
                    if (isChanged) {
                        this.view.refresh();
                        if (this.selectionCellsHandler != null) {
                            this.selectionCellsHandler.refresh();
                        }
                    }
                }
            }
            return isChanged;
        };
        Graph.prototype.swapBounds = function (cell, willCollapse) {
            if (cell != null) {
                var geo = Five.Cells.getGeometry(cell);
                if (geo != null) {
                    geo = geo.clone();
                    this.updateAlternateBounds(cell, geo, willCollapse);
                    geo.swap();
                    this.model.setGeometry(cell, geo);
                }
            }
        };
        Graph.prototype.isExtendParent = function (cell) {
            return !Five.Cells.isEdge(cell) && this.isExtendParents();
        };
        Graph.prototype.extendParent = function (cell) {
            if (cell != null) {
                var parent = Five.Cells.getParent(cell);
                var p = Five.Cells.getGeometry(parent);
                if (parent != null && p != null && !this.isCellCollapsed(parent)) {
                    var geo = Five.Cells.getGeometry(cell);
                    if (geo != null && (p.width < geo.x + geo.width ||
                        p.height < geo.y + geo.height)) {
                        p = p.clone();
                        p.width = Math.max(p.width, geo.x + geo.width);
                        p.height = Math.max(p.height, geo.y + geo.height);
                        this.cellsResized([parent], [p], false);
                    }
                }
            }
        };
        Graph.prototype.isValidTarget = function (cell) {
            return this.isValidSource(cell);
        };
        Graph.prototype.cellSizeUpdated = function (cell, ignoreChildren) {
            if (cell != null) {
                this.model.beginUpdate();
                try {
                    var size = this.getPreferredSizeForCell(cell);
                    var geo = Five.Cells.getGeometry(cell);
                    if (size != null && geo != null) {
                        var collapsed = this.isCellCollapsed(cell);
                        geo = geo.clone();
                        if (this.isSwimlane(cell)) {
                            var state = this.view.getState(cell);
                            var style = (state != null) ? state.style : this.getCellStyle(cell);
                            var cellStyle = Five.Cells.getStyle(cell);
                            if (cellStyle == null) {
                                cellStyle = new Five.AppliedStyle(null);
                            }
                            if (style.portrait) {
                                cellStyle.startSize = size.height + 8;
                                if (collapsed) {
                                    geo.height = size.height + 8;
                                }
                                geo.width = size.width;
                            }
                            else {
                                cellStyle.startSize = size.width + 8;
                                if (collapsed) {
                                    geo.width = size.width + 8;
                                }
                                geo.height = size.height;
                            }
                            this.model.setStyle(cell, cellStyle);
                        }
                        else {
                            geo.width = size.width;
                            geo.height = size.height;
                        }
                        if (!ignoreChildren && !collapsed) {
                            var bounds = this.view.getBounds(this.model.getChildren(cell));
                            if (bounds != null) {
                                var tr = this.view.translate;
                                var scale = this.view.scale;
                                var width = (bounds.x + bounds.width) / scale - geo.x - tr.x;
                                var height = (bounds.y + bounds.height) / scale - geo.y - tr.y;
                                geo.width = Math.max(geo.width, width);
                                geo.height = Math.max(geo.height, height);
                            }
                        }
                        this.cellsResized([cell], [geo], false);
                    }
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.isAutoSizeCells = function () {
            return this.autoSizeCells;
        };
        Graph.prototype.setAutoSizeCells = function (value) {
            this.autoSizeCells = value;
        };
        Object.defineProperty(Graph.prototype, "cellsResizable", {
            get: function () {
                return this._cellsResizable;
            },
            set: function (value) {
                this._cellsResizable = value;
            },
            enumerable: true,
            configurable: true
        });
        Graph.prototype.destroy = function () {
            if (!this.destroyed) {
                this.destroyed = true;
                if (this.tooltipHandler != null) {
                    this.tooltipHandler.destroy();
                }
                if (this.selectionCellsHandler != null) {
                    this.selectionCellsHandler.destroy();
                }
                if (this.panningHandler != null) {
                    this.panningHandler.destroy();
                }
                if (this.popupMenuHandler != null) {
                    this.popupMenuHandler.destroy();
                }
                if (this.connectionHandler != null) {
                    this.connectionHandler.destroy();
                }
                if (this.graphHandler != null) {
                    this.graphHandler.destroy();
                }
                if (this.cellEditor != null) {
                    this.cellEditor.destroy();
                }
                if (this.view != null) {
                    this.view.destroy();
                }
                if (this.model != null && this.graphModelChangeListener != null) {
                    this.model.onChange.remove(this.graphModelChangeListener);
                    this.graphModelChangeListener = null;
                }
                this.container = null;
            }
        };
        Graph.prototype.updateAlternateBounds = function (cell, geo, willCollapse) {
            if (cell != null && geo != null) {
                var state = this.view.getState(cell);
                var style = (state != null) ? state.style : this.getCellStyle(cell);
                if (geo.alternateBounds == null) {
                    var bounds = geo;
                    if (this.collapseToPreferredSize) {
                        var tmp = this.getPreferredSizeForCell(cell);
                        if (tmp != null) {
                            bounds = tmp;
                            var startSize = style.startSize;
                            if (startSize > 0) {
                                bounds.height = Math.max(bounds.height, startSize);
                            }
                        }
                    }
                    geo.alternateBounds = new Five.Rectangle(0, 0, bounds.width, bounds.height);
                }
                if (geo.alternateBounds != null) {
                    geo.alternateBounds.x = geo.x;
                    geo.alternateBounds.y = geo.y;
                    var alpha = Five.Utils.toRadians(style.rotation);
                    if (alpha != 0) {
                        var dx = geo.alternateBounds.getCenterX() - geo.getCenterX();
                        var dy = geo.alternateBounds.getCenterY() - geo.getCenterY();
                        var cos = Math.cos(alpha);
                        var sin = Math.sin(alpha);
                        var dx2 = cos * dx - sin * dy;
                        var dy2 = sin * dx + cos * dy;
                        geo.alternateBounds.x += dx2 - dx;
                        geo.alternateBounds.y += dy2 - dy;
                    }
                }
            }
        };
        Graph.prototype.isValidAncestor = function (cell, parent, recurse) {
            return (recurse ? Five.Cells.isAncestor(parent, cell) : Five.Cells.getParent(cell) == parent);
        };
        Graph.prototype.cellsResized = function (cells, bounds, recurse) {
            recurse = (recurse != null) ? recurse : false;
            if (cells != null && bounds != null && cells.length == bounds.length) {
                this.model.beginUpdate();
                try {
                    for (var i = 0; i < cells.length; i++) {
                        this.cellResized(cells[i], bounds[i], false, recurse);
                        if (this.isExtendParent(cells[i])) {
                            this.extendParent(cells[i]);
                        }
                        else if (this.isConstrainChildrenOnResize()) {
                            this.constrainChild(cells[i]);
                        }
                    }
                    if (this.resetEdgesOnResize) {
                        this.resetEdges(cells);
                    }
                    this.onCellsResized.fire(new Five.CellsResizeEvent(cells, bounds));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.autoSizeCell = function (cell, recurse) {
            if (recurse === void 0) { recurse = true; }
            if (recurse) {
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = 0; i < childCount; i++) {
                    this.autoSizeCell(Five.Cells.getChildAt(cell, i));
                }
            }
            if (Five.Cells.isVertex(cell) && this.isAutoSizeCell(cell)) {
                this.updateCellSize(cell);
            }
        };
        Graph.prototype.isExtendParentsOnAdd = function () {
            return this.extendParentsOnAdd;
        };
        Graph.prototype.constrainChild = function (cell) {
            if (cell != null) {
                var geo = Five.Cells.getGeometry(cell);
                var area = (this.isConstrainChild(cell)) ?
                    this.getCellContainmentArea(cell) :
                    this.getMaximumGraphBounds();
                if (geo != null && area != null) {
                    if (!geo.relative && (geo.x < area.x || geo.y < area.y ||
                        area.width < geo.x + geo.width || area.height < geo.y + geo.height)) {
                        var overlap = this.getOverlap(cell);
                        geo = geo.clone();
                        if (area.width > 0) {
                            geo.x = Math.min(geo.x, area.x + area.width -
                                (1 - overlap) * geo.width);
                        }
                        if (area.height > 0) {
                            geo.y = Math.min(geo.y, area.y + area.height -
                                (1 - overlap) * geo.height);
                        }
                        geo.x = Math.max(geo.x, area.x - geo.width * overlap);
                        geo.y = Math.max(geo.y, area.y - geo.height * overlap);
                        geo.width = Math.min(geo.width, area.width);
                        geo.height = Math.min(geo.height, area.height);
                        this.model.setGeometry(cell, geo);
                    }
                }
            }
        };
        Graph.prototype.disconnectGraph = function (cells) {
            if (cells != null) {
                this.model.beginUpdate();
                try {
                    var scale = this.view.scale;
                    var tr = this.view.translate;
                    var hash = new Object();
                    var i;
                    for (i = 0; i < cells.length; i++) {
                        var id = Five.CellPath.create(cells[i]);
                        hash[id] = cells[i];
                    }
                    for (i = 0; i < cells.length; i++) {
                        if (Five.Cells.isEdge(cells[i])) {
                            var geo = Five.Cells.getGeometry(cells[i]);
                            if (geo != null) {
                                var state = this.view.getState(cells[i]);
                                var pstate = this.view.getState(Five.Cells.getParent(cells[i]));
                                if (state != null &&
                                    pstate != null) {
                                    geo = geo.clone();
                                    var dx = -pstate.origin.x;
                                    var dy = -pstate.origin.y;
                                    var pts = state.absolutePoints;
                                    var src = Five.Cells.getTerminal(cells[i], true);
                                    if (src != null && this.isCellDisconnectable(cells[i], src, true)) {
                                        var srcId = Five.CellPath.create(src);
                                        while (src != null && hash[srcId] == null) {
                                            src = Five.Cells.getParent(src);
                                            srcId = Five.CellPath.create(src);
                                        }
                                        if (src == null) {
                                            geo.setTerminalPoint(new Five.Point(pts[0].x / scale - tr.x + dx, pts[0].y / scale - tr.y + dy), true);
                                            this.model.setTerminal(cells[i], null, true);
                                        }
                                    }
                                    var trg = Five.Cells.getTerminal(cells[i], false);
                                    if (trg != null && this.isCellDisconnectable(cells[i], trg, false)) {
                                        var trgId = Five.CellPath.create(trg);
                                        while (trg != null && hash[trgId] == null) {
                                            trg = Five.Cells.getParent(trg);
                                            trgId = Five.CellPath.create(trg);
                                        }
                                        if (trg == null) {
                                            var n = pts.length - 1;
                                            geo.setTerminalPoint(new Five.Point(pts[n].x / scale - tr.x + dx, pts[n].y / scale - tr.y + dy), false);
                                            this.model.setTerminal(cells[i], null, false);
                                        }
                                    }
                                    this.model.setGeometry(cells[i], geo);
                                }
                            }
                        }
                    }
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.translateCell = function (cell, dx, dy) {
            var geo = Five.Cells.getGeometry(cell);
            if (geo != null) {
                geo = geo.clone();
                geo.translate(dx, dy);
                if (!geo.relative && Five.Cells.isVertex(cell) && !this.isAllowNegativeCoordinates()) {
                    geo.x = Math.max(0, geo.x);
                    geo.y = Math.max(0, geo.y);
                }
                if (geo.relative && !Five.Cells.isEdge(cell)) {
                    var parent = Five.Cells.getParent(cell);
                    var angle = 0;
                    if (Five.Cells.isVertex(parent)) {
                        var state = this.view.getState(parent);
                        var style = (state != null) ? state.style : this.getCellStyle(parent);
                        angle = style.rotation;
                    }
                    if (angle != 0) {
                        var rad = Five.Utils.toRadians(-angle);
                        var cos = Math.cos(rad);
                        var sin = Math.sin(rad);
                        var pt = Five.Utils.getRotatedPoint(new Five.Point(dx, dy), cos, sin, new Five.Point(0, 0));
                        dx = pt.x;
                        dy = pt.y;
                    }
                    if (geo.offset == null) {
                        geo.offset = new Five.Point(dx, dy);
                    }
                    else {
                        geo.offset.x = geo.offset.x + dx;
                        geo.offset.y = geo.offset.y + dy;
                    }
                }
                this.model.setGeometry(cell, geo);
            }
        };
        Graph.prototype.resetEdges = function (cells) {
            if (cells != null) {
                var hash = new Object();
                var i;
                for (i = 0; i < cells.length; i++) {
                    var id = Five.CellPath.create(cells[i]);
                    hash[id] = cells[i];
                }
                this.model.beginUpdate();
                try {
                    for (i = 0; i < cells.length; i++) {
                        var edges = this.model.getEdges(cells[i]);
                        if (edges != null) {
                            for (var j = 0; j < edges.length; j++) {
                                var state = this.view.getState(edges[j]);
                                var source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);
                                var target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);
                                var sourceId = Five.CellPath.create(source);
                                var targetId = Five.CellPath.create(target);
                                if (hash[sourceId] == null || hash[targetId] == null) {
                                    this.resetEdge(edges[j]);
                                }
                            }
                        }
                        this.resetEdges(this.model.getChildren(cells[i]));
                    }
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.isExtendParents = function () {
            return this.extendParents;
        };
        Graph.prototype.getPreferredSizeForCell = function (cell) {
            var _this = this;
            var getEdgePrefferedSize = function () {
                return new Five.Rectangle();
            };
            var getVertexPrefferedSize = function () {
                var state = _this.view.getState(cell) || _this.view.createState(cell);
                var style = state.style;
                var fontSize = style.fontSize;
                var dx = 0;
                var dy = 0;
                if (_this.getImage(state) != null || style.image != null) {
                    if (style.shape == Five.ShapeStyle.Label) {
                        if (style.vAlign == Five.VerticalAlign.Middle) {
                            dx += style.imageWidth || Five.LabelShape.imageSize;
                        }
                        if (style.hAlign != Five.HorizontalAlign.Center) {
                            dy += style.imageHeight || Five.LabelShape.imageSize;
                        }
                    }
                }
                dx += 2 * style.spacing;
                dx += style.spacingLeft;
                dx += style.spacingRight;
                dy += 2 * style.spacing;
                dy += style.spacingTop;
                dy += style.spacingBottom;
                var image = _this.getFoldingImage(state);
                if (image != null) {
                    dx += image.width + 8;
                }
                var value = _this.cellRenderer.getLabelValue(state);
                if (value != null && value.length > 0) {
                    if (!_this.isHtmlLabel(state.cell)) {
                        value = Five.Utils.htmlEntities(value);
                    }
                    value = value.replace(/\n/g, "<br>");
                    var maxLabelWidth = cell.geometry.getMaxWidth() - dx;
                    var size = Five.Utils.getSizeForString(value, fontSize, style.fontFamily, maxLabelWidth);
                    var width = size.width + dx;
                    var height = size.height + dy;
                    if (style.portrait) {
                        var tmp = height;
                        height = width;
                        width = tmp;
                    }
                    if (_this.gridEnabled) {
                        width = _this.snap(width + _this.gridSize / 2);
                        height = _this.snap(height + _this.gridSize / 2);
                    }
                    return new Five.Rectangle(0, 0, width, height);
                }
                else {
                    var gs2 = 4 * _this.gridSize;
                    return new Five.Rectangle(0, 0, gs2, gs2);
                }
            };
            var result = Five.Cells.isEdge(cell) ? getEdgePrefferedSize() : getVertexPrefferedSize();
            return cell.geometry.applySizeRestrictions(result);
        };
        Graph.prototype.cellResized = function (cell, bounds, ignoreRelative, recurse) {
            var geo = Five.Cells.getGeometry(cell);
            if (geo != null && (geo.x != bounds.x || geo.y != bounds.y ||
                geo.width != bounds.width || geo.height != bounds.height)) {
                geo = geo.clone();
                if (!ignoreRelative && geo.relative) {
                    var offset = geo.offset;
                    if (offset != null) {
                        offset.x += bounds.x - geo.x;
                        offset.y += bounds.y - geo.y;
                    }
                }
                else {
                    geo.x = bounds.x;
                    geo.y = bounds.y;
                }
                geo.width = bounds.width;
                geo.height = bounds.height;
                if (!geo.relative && Five.Cells.isVertex(cell) && !this.isAllowNegativeCoordinates()) {
                    geo.x = Math.max(0, geo.x);
                    geo.y = Math.max(0, geo.y);
                }
                this.model.beginUpdate();
                try {
                    if (recurse) {
                        this.resizeChildCells(cell, geo);
                    }
                    this.model.setGeometry(cell, geo);
                    if (this.isConstrainChildrenOnResize()) {
                        this.constrainChildCells(cell);
                    }
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.isConstrainChildrenOnResize = function () {
            return this.constrainChildrenOnResize;
        };
        Graph.prototype.updateCellSize = function (cell, ignoreChildren) {
            if (ignoreChildren === void 0) { ignoreChildren = false; }
            this.model.beginUpdate();
            try {
                this.cellSizeUpdated(cell, ignoreChildren);
                this.onUpdateCellSize.fire(new Five.UpdateCellSizeEvent(cell, ignoreChildren));
            }
            finally {
                this.model.endUpdate();
            }
            return cell;
        };
        Graph.prototype.isConstrainChild = function (cell) {
            return this.isConstrainChildren() && !Five.Cells.isEdge(Five.Cells.getParent(cell));
        };
        Graph.prototype.getCellContainmentArea = function (cell) {
            if (cell != null && !Five.Cells.isEdge(cell)) {
                var parent = Five.Cells.getParent(cell);
                if (parent == this.getDefaultParent() || parent == this.getCurrentRoot()) {
                    return this.getMaximumGraphBounds();
                }
                else if (parent != null && parent != this.getDefaultParent()) {
                    var g = Five.Cells.getGeometry(parent);
                    if (g != null) {
                        var x = 0;
                        var y = 0;
                        var w = g.width;
                        var h = g.height;
                        if (this.isSwimlane(parent)) {
                            var size = this.getStartSize(parent);
                            var state = this.view.getState(parent);
                            var style = (state != null) ? state.style : this.getCellStyle(parent);
                            var dir = style.direction || Five.Direction.East;
                            var flipH = style.flipH;
                            var flipV = style.flipV;
                            if (dir.valueOf() === Five.Direction.South || dir.valueOf() == Five.Direction.North) {
                                var tmp = size.width;
                                size.width = size.height;
                                size.height = tmp;
                            }
                            if ((dir.valueOf() == Five.Direction.East && !flipV) || (dir.valueOf() == Five.Direction.North && !flipH) ||
                                (dir == Five.Direction.West && flipV) || (dir == Five.Direction.South && flipH)) {
                                x = size.width;
                                y = size.height;
                            }
                            w -= size.width;
                            h -= size.height;
                        }
                        return new Five.Rectangle(x, y, w, h);
                    }
                }
            }
            return null;
        };
        Graph.prototype.getMaximumGraphBounds = function () {
            return this.maximumGraphBounds;
        };
        Graph.prototype.getOverlap = function (cell) {
            return (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;
        };
        Graph.prototype.resizeChildCells = function (cell, newGeo) {
            var geo = Five.Cells.getGeometry(cell);
            var dx = newGeo.width / geo.width;
            var dy = newGeo.height / geo.height;
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                this.scaleCell(Five.Cells.getChildAt(cell, i), dx, dy, true);
            }
        };
        Graph.prototype.scaleCell = function (cell, dx, dy, recurse) {
            var geo = Five.Cells.getGeometry(cell);
            if (geo != null && this.isCellMovable(cell) && this.isCellResizable(cell)) {
                geo = geo.clone();
                geo.scale(dx, dy);
                if (Five.Cells.isVertex(cell)) {
                    this.cellResized(cell, geo, true, recurse);
                }
                else {
                    this.model.setGeometry(cell, geo);
                }
            }
        };
        Graph.prototype.constrainChildCells = function (cell) {
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                this.constrainChild(Five.Cells.getChildAt(cell, i));
            }
        };
        Graph.prototype.isConstrainChildren = function () {
            return this.constrainChildren;
        };
        Graph.prototype.isAllowOverlapParent = function (cell) {
            return false;
        };
        Graph.prototype.selectRegion = function (rect, evt) {
            var cells = this.getCells(rect.x, rect.y, rect.width, rect.height);
            this.selectCellsForEvent(cells, evt);
            return cells;
        };
        Graph.prototype.getCells = function (x, y, width, height, parent, result) {
            result = (result != null) ? result : [];
            if (width > 0 || height > 0) {
                var right = x + width;
                var bottom = y + height;
                if (parent == null) {
                    parent = this.getCurrentRoot();
                    if (parent == null) {
                        parent = this.getModel().getRoot();
                    }
                }
                if (parent != null) {
                    var childCount = Five.Cells.getChildCount(parent);
                    for (var i = 0; i < childCount; i++) {
                        var cell = Five.Cells.getChildAt(parent, i);
                        var state = this.view.getState(cell);
                        if (this.isCellVisible(cell) && state != null) {
                            var box;
                            box = state;
                            var deg = state.style.rotation;
                            if (deg != 0) {
                                box = Five.Utils.getBoundingBox(box, deg);
                            }
                            if (box.x >= x && box.y + box.height <= bottom && box.y >= y && box.x + box.width <= right) {
                                result.push(cell);
                            }
                            else {
                                this.getCells(x, y, width, height, cell, result);
                            }
                        }
                    }
                }
            }
            return result;
        };
        Graph.prototype.selectCellsForEvent = function (cells, evt) {
            if (this.isToggleEvent(evt)) {
                this.addSelectionCells(cells);
            }
            else {
                this.setSelectionCells(cells);
            }
        };
        Graph.prototype.addSelectionCells = function (cells) {
            this.getSelectionModel().addCells(cells);
        };
        Graph.prototype.insertVertex = function (parent, id, value, bounds, style, relative, sizeRestriction) {
            if (relative === void 0) { relative = false; }
            var geometry = new Five.Geometry(bounds, sizeRestriction);
            geometry.relative = (relative != null) ? relative : false;
            var vertex = new Five.Cell(value, geometry, style);
            vertex.setId(id);
            vertex.setVertex(true);
            vertex.setConnectable(true);
            return this.addCell(vertex, parent);
        };
        Graph.prototype.graphModelChanged = function (changes) {
            for (var i = 0; i < changes.length; i++) {
                this.processChange(changes[i]);
            }
            this.removeSelectionCells(this.getRemovedCellsForChanges(changes));
            this.view.validate();
            this.sizeDidChange();
        };
        Graph.prototype.processChange = function (change) {
            if (change instanceof Five.RootChange) {
                this.clearSelection();
                this.removeStateForCell(change.previous);
                if (this.resetViewOnRootChange) {
                    this.view.scale = 1;
                    this.view.translate.x = 0;
                    this.view.translate.y = 0;
                }
                this.onRootChange.fire();
            }
            else if (change instanceof Five.ChildChange) {
                var child = change.child;
                var previous = change.previous;
                var newParent = Five.Cells.getParent(child);
                this.view.invalidate(child, true, true);
                if (newParent == null || this.isCellCollapsed(newParent)) {
                    this.view.invalidate(child, true, true);
                    this.removeStateForCell(child);
                    if (this.view.currentRoot === child) {
                        this.home();
                    }
                }
                if (newParent !== previous) {
                    if (newParent != null) {
                        this.view.invalidate(newParent, false, false);
                    }
                    if (previous != null) {
                        this.view.invalidate(previous, false, false);
                    }
                }
            }
            if (change instanceof Five.TerminalChange)
                this.view.invalidate(change.cell);
            else if (change instanceof Five.GeometryChange) {
                var geoChange = change;
                if ((geoChange.previous == null && geoChange.geometry != null) || (geoChange.previous != null && !geoChange.previous.equals(geoChange.geometry)))
                    this.view.invalidate(change.cell);
            }
            else if (change instanceof Five.ValueChange) {
                this.view.invalidate(change.cell, false, false);
            }
            else if (change instanceof Five.StyleChange) {
                var cell = change.cell;
                this.view.invalidate(cell, true, true);
                this.view.removeState(cell);
            }
            else if (change.cell != null && change.cell instanceof Five.Cell) {
                this.removeStateForCell(change.cell);
            }
        };
        Graph.prototype.getRemovedCellsForChanges = function (changes) {
            var result = [];
            for (var i = 0; i < changes.length; i++) {
                var change = changes[i];
                if (change instanceof Five.RootChange) {
                    break;
                }
                else if (change instanceof Five.ChildChange) {
                    var childChange = change;
                    if (childChange.previous != null && childChange.parent == null) {
                        result = result.concat(this.model.getDescendants(childChange.child));
                    }
                }
                else if (change instanceof Five.VisibleChange) {
                    result = result.concat(this.model.getDescendants(change.cell));
                }
            }
            return result;
        };
        Graph.prototype.removeSelectionCells = function (cells) {
            this.getSelectionModel().removeCells(cells);
        };
        Graph.prototype.removeStateForCell = function (cell) {
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                this.removeStateForCell(Five.Cells.getChildAt(cell, i));
            }
            this.view.invalidate(cell, false, true);
            this.view.removeState(cell);
        };
        Graph.prototype.home = function () {
            var current = this.getCurrentRoot();
            if (current != null) {
                this.view.setCurrentRoot(null);
                var state = this.view.getState(current);
                if (state != null) {
                    this.setSelectionCell(current);
                }
            }
        };
        Graph.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        Graph.prototype.getStylesheet = function () {
            return this.stylesheet;
        };
        Graph.prototype.getChildVertices = function (parent) {
            return this.getChildCells(parent, true, false);
        };
        Graph.prototype.getBoundingBoxFromGeometry = function (cells, includeEdges) {
            if (includeEdges === void 0) { includeEdges = false; }
            var result = null;
            if (cells != null) {
                for (var i = 0; i < cells.length; i++) {
                    if (includeEdges || Five.Cells.isVertex(cells[i])) {
                        var geo = this.getCellGeometry(cells[i]);
                        if (geo != null) {
                            var pts = geo.points;
                            var bbox = null;
                            if (Five.Cells.isEdge(cells[i])) {
                                if (pts != null && pts.length > 0) {
                                    var tmp = new Five.Rectangle(pts[0].x, pts[0].y, 0, 0);
                                    var addPoint = function (pt) {
                                        if (pt != null) {
                                            tmp.add(new Five.Rectangle(pt.x, pt.y, 0, 0));
                                        }
                                    };
                                    for (var j = 1; j < pts.length; j++) {
                                        addPoint(pts[j]);
                                    }
                                    addPoint(geo.getTerminalPoint(true));
                                    addPoint(geo.getTerminalPoint(false));
                                    bbox = tmp;
                                }
                            }
                            else {
                                bbox = geo;
                            }
                            if (bbox != null) {
                                if (result == null) {
                                    result = new Five.Rectangle(bbox.x, bbox.y, bbox.width, bbox.height);
                                }
                                else {
                                    result.add(bbox);
                                }
                            }
                        }
                    }
                }
            }
            return result;
        };
        Graph.prototype.getConnections = function (cell, parent) {
            return this.getEdges(cell, parent, true, true, false);
        };
        Graph.prototype.getOpposites = function (edges, terminal, sources, targets) {
            if (sources === void 0) { sources = true; }
            if (targets === void 0) { targets = true; }
            var terminals = [];
            var hash = new Object();
            if (edges != null) {
                for (var i = 0; i < edges.length; i++) {
                    var state = this.view.getState(edges[i]);
                    var source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);
                    var target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);
                    var id;
                    if (source == terminal && target != null &&
                        target != terminal && targets) {
                        id = Five.CellPath.create(target);
                        if (hash[id] == null) {
                            hash[id] = target;
                            terminals.push(target);
                        }
                    }
                    else if (target == terminal && source != null &&
                        source != terminal && sources) {
                        id = Five.CellPath.create(source);
                        if (hash[id] == null) {
                            hash[id] = source;
                            terminals.push(source);
                        }
                    }
                }
            }
            return terminals;
        };
        Graph.prototype.isEscapeEnabled = function () {
            return this.escapeEnabled;
        };
        Graph.prototype.escape = function (evt) {
            this.onEscape.fire();
        };
        Graph.prototype.refresh = function (cell) {
            this.view.clear(cell, cell == null);
            this.view.validate();
            this.sizeDidChange();
            this.onRefresh.fire();
        };
        Graph.prototype.removeCells = function (cells, includeEdges) {
            if (includeEdges === void 0) { includeEdges = true; }
            if (cells == null) {
                cells = this.getDeletableCells(this.getSelectionCells());
            }
            if (includeEdges) {
                cells = this.getDeletableCells(this.addAllEdges(cells));
            }
            this.model.beginUpdate();
            try {
                this.cellsRemoved(cells);
                this.onRemoveCells.fire(new Five.RemoveCellsEvent(cells, includeEdges));
            }
            finally {
                this.model.endUpdate();
            }
            return cells;
        };
        Graph.prototype.getDeletableCells = function (cells) {
            var _this = this;
            return cells.filter(function (c) { return _this.isCellDeletable(c); });
        };
        Graph.prototype.isCellDeletable = function (cell) {
            var state = this.view.getState(cell);
            var style = (state != null) ? state.style : this.getCellStyle(cell);
            return this.isCellsDeletable() && style[Five.Constants.styleDeletable] != '0';
        };
        Graph.prototype.isCellsDeletable = function () {
            return this.cellsDeletable;
        };
        Graph.prototype.addAllEdges = function (cells) {
            var allCells = cells.slice();
            allCells = allCells.concat(this.getAllEdges(cells));
            return allCells;
        };
        Graph.prototype.getAllEdges = function (cells) {
            var edges = [];
            if (cells != null) {
                for (var i = 0; i < cells.length; i++) {
                    var edgeCount = Five.Cells.getEdgeCount(cells[i]);
                    for (var j = 0; j < edgeCount; j++) {
                        edges.push(Five.Cells.getEdgeAt(cells[i], j));
                    }
                    var children = this.model.getChildren(cells[i]);
                    edges = edges.concat(this.getAllEdges(children));
                }
            }
            return edges;
        };
        Graph.prototype.cellsRemoved = function (cells) {
            if (cells != null && cells.length > 0) {
                var scale = this.view.scale;
                var tr = this.view.translate;
                this.model.beginUpdate();
                try {
                    var hash = new Object();
                    var i;
                    var id;
                    for (i = 0; i < cells.length; i++) {
                        id = Five.CellPath.create(cells[i]);
                        hash[id] = cells[i];
                    }
                    for (i = 0; i < cells.length; i++) {
                        var edges = this.getConnections(cells[i]);
                        for (var j = 0; j < edges.length; j++) {
                            id = Five.CellPath.create(edges[j]);
                            if (hash[id] == null) {
                                var geo = Five.Cells.getGeometry(edges[j]);
                                if (geo != null) {
                                    var state = this.view.getState(edges[j]);
                                    if (state != null) {
                                        geo = geo.clone();
                                        var source = state.getVisibleTerminal(true) == cells[i];
                                        var pts = state.absolutePoints;
                                        var n = (source) ? 0 : pts.length - 1;
                                        geo.setTerminalPoint(new Five.Point(pts[n].x / scale - tr.x, pts[n].y / scale - tr.y), source);
                                        this.model.setTerminal(edges[j], null, source);
                                        this.model.setGeometry(edges[j], geo);
                                    }
                                }
                            }
                        }
                        this.model.remove(cells[i]);
                    }
                    this.onCellsRemoved.fire(new Five.CellsEvent(cells));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.getExportableCells = function (cells) {
            var _this = this;
            return cells.filter(function (c) { return _this.canExportCell(c); });
        };
        Graph.prototype.canExportCell = function (cell) {
            return this.exportEnabled;
        };
        Graph.prototype.getImportableCells = function (cells) {
            var _this = this;
            return cells.filter(function (c) { return _this.canImportCell(c); });
        };
        Graph.prototype.canImportCell = function (cell) {
            return this.importEnabled;
        };
        Graph.prototype.importCells = function (cells, dx, dy, target, evt) {
            return this.moveCells(cells, dx, dy, true, target, evt);
        };
        Graph.prototype.ungroupCells = function (cells) {
            var result = [];
            var i;
            if (cells == null) {
                cells = this.getSelectionCells();
                var tmp = [];
                for (i = 0; i < cells.length; i++) {
                    if (Five.Cells.getChildCount(cells[i]) > 0) {
                        tmp.push(cells[i]);
                    }
                }
                cells = tmp;
            }
            if (cells.length > 0) {
                this.model.beginUpdate();
                try {
                    for (i = 0; i < cells.length; i++) {
                        var children = this.model.getChildren(cells[i]);
                        if (children != null && children.length > 0) {
                            children = children.slice();
                            var parent = Five.Cells.getParent(cells[i]);
                            var index = Five.Cells.getChildCount(parent);
                            this.cellsAdded(children, parent, index, null, null, true);
                            result = result.concat(children);
                        }
                    }
                    this.cellsRemoved(this.addAllEdges(cells));
                    this.onUngroupCells.fire(new Five.CellsEvent(cells));
                }
                finally {
                    this.model.endUpdate();
                }
            }
            return result;
        };
        Graph.prototype.removeCellsFromParent = function (cells) {
            if (cells == null) {
                cells = this.getSelectionCells();
            }
            this.model.beginUpdate();
            try {
                var parent = this.getDefaultParent();
                var index = Five.Cells.getChildCount(parent);
                this.cellsAdded(cells, parent, index, null, null, true);
                this.onRemoveCellsFromParent.fire(new Five.CellsEvent(cells));
            }
            finally {
                this.model.endUpdate();
            }
            return cells;
        };
        Graph.prototype.zoomIn = function () {
            this.zoom(this.zoomFactor);
        };
        Graph.prototype.zoomOut = function () {
            this.zoom(1 / this.zoomFactor);
        };
        Graph.prototype.zoomActual = function () {
            if (this.view.scale == 1) {
                this.view.setTranslate(0, 0);
            }
            else {
                this.view.translate.x = 0;
                this.view.translate.y = 0;
                this.view.setScale(1);
            }
        };
        Graph.prototype.fit = function (border, keepOrigin) {
            if (border === void 0) { border = 0; }
            if (keepOrigin === void 0) { keepOrigin = false; }
            if (this.container != null) {
                var client = this.container.getClientSize();
                var w1 = client.x;
                var h1 = client.y;
                var bounds = this.view.getGraphBounds();
                if (keepOrigin && bounds.x != null && bounds.y != null) {
                    bounds.width += bounds.x;
                    bounds.height += bounds.y;
                    bounds.x = 0;
                    bounds.y = 0;
                }
                var s = this.view.scale;
                var w2 = bounds.width / s;
                var h2 = bounds.height / s;
                if (this.backgroundImage != null) {
                    w2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);
                    h2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);
                }
                var b = (keepOrigin) ? border : 2 * border;
                var s2 = Math.floor(Math.min(w1 / (w2 + b), h1 / (h2 + b)) * 100) / 100;
                if (this.minFitScale != null) {
                    s2 = Math.max(s2, this.minFitScale);
                }
                if (this.maxFitScale != null) {
                    s2 = Math.min(s2, this.maxFitScale);
                }
                if (!keepOrigin) {
                    if (!this.container.hasScrollbars()) {
                        var x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border + 1) : border;
                        var y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border + 1) : border;
                        this.view.scaleAndTranslate(s2, x0, y0);
                    }
                    else {
                        this.view.setScale(s2);
                        var b2 = this.getGraphBounds();
                        var scroll = this.container.getScroll();
                        if (b2.x != null) {
                            scroll.x = b2.x;
                        }
                        if (b2.y != null) {
                            scroll.y = b2.y;
                        }
                        this.container.setScroll(scroll.x, scroll.y);
                    }
                }
                else if (this.view.scale != s2) {
                    this.view.setScale(s2);
                }
            }
            return this.view.scale;
        };
        Graph.prototype.selectAll = function (parent) {
            parent = parent || this.getDefaultParent();
            var children = this.model.getChildren(parent);
            if (children != null) {
                this.setSelectionCells(children);
            }
        };
        Graph.prototype.selectVertices = function (parent) {
            this.selectCells(true, false, parent);
        };
        Graph.prototype.selectEdges = function (parent) {
            this.selectCells(false, true, parent);
        };
        Graph.prototype.selectCells = function (vertices, edges, parent) {
            var _this = this;
            parent = parent || this.getDefaultParent();
            var filter = function (cell) {
                return _this.view.getState(cell) != null &&
                    Five.Cells.getChildCount(cell) == 0 &&
                    ((Five.Cells.isVertex(cell) && vertices) ||
                        (Five.Cells.isEdge(cell) && edges));
            };
            var cells = this.model.filterDescendants(filter, parent);
            this.setSelectionCells(cells);
        };
        Graph.prototype.orderCells = function (back, cells) {
            if (cells == null) {
                cells = Five.Utils.sortCells(this.getSelectionCells(), true);
            }
            this.model.beginUpdate();
            try {
                this.cellsOrdered(cells, back);
                this.onOrderCells.fire(new Five.OrderCellsEvent(cells, back));
            }
            finally {
                this.model.endUpdate();
            }
            return cells;
        };
        Graph.prototype.cellsOrdered = function (cells, back) {
            if (cells != null) {
                this.model.beginUpdate();
                try {
                    for (var i = 0; i < cells.length; i++) {
                        var parent = Five.Cells.getParent(cells[i]);
                        if (back) {
                            this.model.add(parent, cells[i], i);
                        }
                        else {
                            this.model.add(parent, cells[i], Five.Cells.getChildCount(parent) - 1);
                        }
                    }
                    this.onCellsOrdered.fire(new Five.OrderCellsEvent(cells, back));
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        Graph.prototype.enterGroup = function (cell) {
            cell = cell || this.getSelectionCell();
            if (cell != null && this.isValidRoot(cell)) {
                this.view.setCurrentRoot(cell);
                this.clearSelection();
            }
        };
        Graph.prototype.isValidRoot = function (cell) {
            return (cell != null);
        };
        Graph.prototype.exitGroup = function () {
            var root = this.model.getRoot();
            var current = this.getCurrentRoot();
            if (current != null) {
                var next = Five.Cells.getParent(current);
                while (next != root && !this.isValidRoot(next) &&
                    Five.Cells.getParent(next) != root) {
                    next = Five.Cells.getParent(next);
                }
                if (next == root || Five.Cells.getParent(next) == root) {
                    this.view.setCurrentRoot(null);
                }
                else {
                    this.view.setCurrentRoot(next);
                }
                var state = this.view.getState(current);
                if (state != null) {
                    this.setSelectionCell(current);
                }
            }
        };
        Graph.prototype.selectPreviousCell = function () {
            this.selectCell();
        };
        Graph.prototype.selectNextCell = function () {
            this.selectCell(true);
        };
        Graph.prototype.selectParentCell = function () {
            this.selectCell(false, true);
        };
        Graph.prototype.selectChildCell = function () {
            this.selectCell(false, false, true);
        };
        Graph.prototype.selectCell = function (isNext, isParent, isChild) {
            if (isNext === void 0) { isNext = false; }
            if (isParent === void 0) { isParent = false; }
            if (isChild === void 0) { isChild = false; }
            var sel = this.selectionModel;
            var cell = (sel.cells.length > 0) ? sel.cells[0] : null;
            if (sel.cells.length > 1) {
                sel.clear();
            }
            var parent = (cell != null) ?
                Five.Cells.getParent(cell) :
                this.getDefaultParent();
            var childCount = Five.Cells.getChildCount(parent);
            var child;
            if (cell == null && childCount > 0) {
                child = Five.Cells.getChildAt(parent, 0);
                this.setSelectionCell(child);
            }
            else if ((cell == null || isParent) &&
                this.view.getState(parent) != null && Five.Cells.getGeometry(parent) != null) {
                if (this.getCurrentRoot() != parent) {
                    this.setSelectionCell(parent);
                }
            }
            else if (cell != null && isChild) {
                var tmp = Five.Cells.getChildCount(cell);
                if (tmp > 0) {
                    child = Five.Cells.getChildAt(cell, 0);
                    this.setSelectionCell(child);
                }
            }
            else if (childCount > 0) {
                var i = parent.getIndex(cell);
                if (isNext) {
                    i++;
                    child = Five.Cells.getChildAt(parent, i % childCount);
                    this.setSelectionCell(child);
                }
                else {
                    i--;
                    var index = (i < 0) ? childCount - 1 : i;
                    child = Five.Cells.getChildAt(parent, index);
                    this.setSelectionCell(child);
                }
            }
        };
        Graph.prototype.alignCells = function (align, valign, cells, param) {
            if (cells == null) {
                cells = this.getSelectionCells();
            }
            if (cells != null && cells.length > 1) {
                var state;
                var i;
                if (param == null) {
                    for (i = 0; i < cells.length; i++) {
                        state = this.view.getState(cells[i]);
                        if (state != null && !Five.Cells.isEdge(cells[i])) {
                            if (param == null) {
                                if (align == Five.HorizontalAlign.Center) {
                                    param = state.x + state.width / 2;
                                    break;
                                }
                                else if (align == Five.HorizontalAlign.Right) {
                                    param = state.x + state.width;
                                }
                                else if (valign == Five.VerticalAlign.Top) {
                                    param = state.y;
                                }
                                else if (valign == Five.VerticalAlign.Middle) {
                                    param = state.y + state.height / 2;
                                    break;
                                }
                                else if (valign == Five.VerticalAlign.Bottom) {
                                    param = state.y + state.height;
                                }
                                else {
                                    param = state.x;
                                }
                            }
                            else {
                                if (align == Five.HorizontalAlign.Right) {
                                    param = Math.max(param, state.x + state.width);
                                }
                                else if (valign == Five.VerticalAlign.Top) {
                                    param = Math.min(param, state.y);
                                }
                                else if (valign == Five.VerticalAlign.Bottom) {
                                    param = Math.max(param, state.y + state.height);
                                }
                                else {
                                    param = Math.min(param, state.x);
                                }
                            }
                        }
                    }
                }
                if (param != null) {
                    var s = this.view.scale;
                    this.model.beginUpdate();
                    try {
                        for (i = 0; i < cells.length; i++) {
                            state = this.view.getState(cells[i]);
                            if (state != null) {
                                var geo = this.getCellGeometry(cells[i]);
                                if (geo != null && !Five.Cells.isEdge(cells[i])) {
                                    geo = geo.clone();
                                    if (align == Five.HorizontalAlign.Center) {
                                        geo.x += (param - state.x - state.width / 2) / s;
                                    }
                                    else if (align == Five.HorizontalAlign.Right) {
                                        geo.x += (param - state.x - state.width) / s;
                                    }
                                    else if (valign == Five.VerticalAlign.Top) {
                                        geo.y += (param - state.y) / s;
                                    }
                                    else if (valign == Five.VerticalAlign.Middle) {
                                        geo.y += (param - state.y - state.height / 2) / s;
                                    }
                                    else if (valign == Five.VerticalAlign.Bottom) {
                                        geo.y += (param - state.y - state.height) / s;
                                    }
                                    else {
                                        geo.x += (param - state.x) / s;
                                    }
                                    this.resizeCell(cells[i], geo);
                                }
                            }
                        }
                        this.onAlignCells.fire(new Five.AlignCellsEvent(cells, align, valign));
                    }
                    finally {
                        this.model.endUpdate();
                    }
                }
            }
            return cells;
        };
        Graph.prototype.setTooltips = function (enabled) {
            this.tooltipHandler.setEnabled(enabled);
        };
        Graph.prototype.setPanning = function (enabled) {
            this.panningHandler.panningEnabled = enabled;
        };
        Graph.prototype.getSelectionCellsForChanges = function (changes) {
            var cells = [];
            for (var i = 0; i < changes.length; i++) {
                var change = changes[i];
                if (change.constructor != Five.RootChange) {
                    var cell = null;
                    if (change instanceof Five.ChildChange && change.previous == null) {
                        cell = change.child;
                    }
                    else if (change.cell != null && change.cell instanceof Five.Cell) {
                        cell = change.cell;
                    }
                    if (cell != null && Five.Utils.indexOf(cells, cell) < 0) {
                        cells.push(cell);
                    }
                }
            }
            return this.getModel().getTopmostCells(cells);
        };
        Graph.prototype.validateGraph = function (cell, context) {
            cell = (cell != null) ? cell : this.model.getRoot();
            context = context || new Object();
            var isValid = true;
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                var tmp = Five.Cells.getChildAt(cell, i);
                var ctx = context;
                if (this.isValidRoot(tmp)) {
                    ctx = new Object();
                }
                var warn = this.validateGraph(tmp, ctx);
                if (warn != null) {
                    this.setCellWarning(tmp, warn.replace(/\n/g, '<br>'));
                }
                else {
                    this.setCellWarning(tmp, null);
                }
                isValid = isValid && warn == null;
            }
            var warning = '';
            if (this.isCellCollapsed(cell) && !isValid) {
                warning += Five.Resources.get(this.containsValidationErrorsResource) + '\n';
            }
            if (Five.Cells.isEdge(cell)) {
                warning += this.getEdgeValidationError(cell, Five.Cells.getTerminal(cell, true), Five.Cells.getTerminal(cell, false)) || '';
            }
            else {
                warning += this.getCellValidationError(cell) || '';
            }
            var err = this.validateCell(cell, context);
            if (err != null) {
                warning += err;
            }
            if (Five.Cells.getParent(cell) == null) {
                this.view.validate();
            }
            return (warning.length > 0 || !isValid) ? warning : null;
        };
        Graph.prototype.setCellWarning = function (cell, warning, img, isSelect) {
            var _this = this;
            if (isSelect === void 0) { isSelect = false; }
            if (warning != null && warning.length > 0) {
                img = (img != null) ? img : this.warningImage;
                var overlay = new Five.CellOverlay(img, '<font color=red>' + warning + '</font>');
                if (isSelect) {
                    overlay.onClick.add(function () { if (_this.isEnabled())
                        _this.setSelectionCell(cell); });
                }
                return this.addCellOverlay(cell, overlay);
            }
            else {
                this.removeCellOverlays(cell);
            }
            return null;
        };
        Graph.prototype.removeCellOverlays = function (cell) {
            var overlays = cell.overlays;
            if (overlays != null) {
                cell.overlays = null;
                var state = this.view.getState(cell);
                if (state != null) {
                    this.cellRenderer.redraw(state);
                }
                for (var i = 0; i < overlays.length; i++) {
                    this.onRemoveOverlay.fire(new Five.CellOverlayEvent(cell, overlays[i]));
                }
            }
            return overlays;
        };
        Graph.prototype.getCellValidationError = function (cell) {
            var outCount = this.model.getDirectedEdgeCount(cell, true);
            var inCount = this.model.getDirectedEdgeCount(cell, false);
            var value = Five.Cells.getValue(cell);
            var error = '';
            if (this.multiplicities != null) {
                for (var i = 0; i < this.multiplicities.length; i++) {
                    var rule = this.multiplicities[i];
                    if (rule.source && Five.Utils.isNode(value, rule.type, rule.attr, rule.value) && ((rule.max == 0 && outCount > 0) ||
                        (rule.min == 1 && outCount == 0) || (rule.max == 1 && outCount > 1))) {
                        error += rule.countError + '\n';
                    }
                    else if (!rule.source && Five.Utils.isNode(value, rule.type, rule.attr, rule.value) && ((rule.max == 0 && inCount > 0) ||
                        (rule.min == 1 && inCount == 0) || (rule.max == 1 && inCount > 1))) {
                        error += rule.countError + '\n';
                    }
                }
            }
            return (error.length > 0) ? error : null;
        };
        Graph.prototype.validateCell = function (cell, context) {
            return null;
        };
        Graph.prototype.findTreeRoots = function (parent, isolate, invert) {
            if (isolate === void 0) { isolate = false; }
            if (invert === void 0) { invert = false; }
            var roots = [];
            if (parent != null) {
                var model = this.getModel();
                var childCount = Five.Cells.getChildCount(parent);
                var best = null;
                var maxDiff = 0;
                for (var i = 0; i < childCount; i++) {
                    var cell = Five.Cells.getChildAt(parent, i);
                    if (Five.Cells.isVertex(cell) && this.isCellVisible(cell)) {
                        var conns = this.getConnections(cell, (isolate) ? parent : null);
                        var fanOut = 0;
                        var fanIn = 0;
                        for (var j = 0; j < conns.length; j++) {
                            var src = this.view.getVisibleTerminal(conns[j], true);
                            if (src == cell) {
                                fanOut++;
                            }
                            else {
                                fanIn++;
                            }
                        }
                        if ((invert && fanOut == 0 && fanIn > 0) ||
                            (!invert && fanIn == 0 && fanOut > 0)) {
                            roots.push(cell);
                        }
                        var diff = (invert) ? fanIn - fanOut : fanOut - fanIn;
                        if (diff > maxDiff) {
                            maxDiff = diff;
                            best = cell;
                        }
                    }
                }
                if (roots.length == 0 && best != null) {
                    roots.push(best);
                }
            }
            return roots;
        };
        Graph.prototype.getEdgesBetween = function (source, target, directed) {
            directed = (directed != null) ? directed : false;
            var edges = this.getEdges(source);
            var result = [];
            for (var i = 0; i < edges.length; i++) {
                var state = this.view.getState(edges[i]);
                var src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);
                var trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);
                if ((src == source && trg == target) || (!directed && src == target && trg == source)) {
                    result.push(edges[i]);
                }
            }
            return result;
        };
        Graph.prototype.setConnectable = function (connectable) {
            this.connectionHandler.setEnabled(connectable);
        };
        Graph.prototype.getBoundsForGroup = function (group, children, border) {
            var result = this.getBoundingBoxFromGeometry(children);
            if (result != null) {
                if (this.isSwimlane(group)) {
                    var size = this.getStartSize(group);
                    result.x -= size.width;
                    result.y -= size.height;
                    result.width += size.width;
                    result.height += size.height;
                }
                result.x -= border;
                result.y -= border;
                result.width += 2 * border;
                result.height += 2 * border;
            }
            return result;
        };
        Graph.prototype.groupCells = function (group, border, cells) {
            if (cells == null) {
                cells = Five.Utils.sortCells(this.getSelectionCells(), true);
            }
            cells = this.getCellsForGroup(cells);
            if (group == null) {
                group = this.createGroupCell(cells);
            }
            var bounds = this.getBoundsForGroup(group, cells, border);
            if (cells.length > 0 && bounds != null) {
                var parent = Five.Cells.getParent(group);
                if (parent == null) {
                    parent = Five.Cells.getParent(cells[0]);
                }
                this.model.beginUpdate();
                try {
                    if (this.getCellGeometry(group) == null) {
                        this.model.setGeometry(group, new Five.Geometry());
                    }
                    var index = Five.Cells.getChildCount(parent);
                    this.cellsAdded([group], parent, index, null, null, false);
                    index = Five.Cells.getChildCount(group);
                    this.cellsAdded(cells, group, index, null, null, false, false);
                    this.cellsMoved(cells, -bounds.x, -bounds.y, false, true);
                    this.cellsResized([group], [bounds], false);
                    this.onGroupCells.fire(new Five.GroupCellsEvent(group, border, cells));
                }
                finally {
                    this.model.endUpdate();
                }
            }
            return group;
        };
        Graph.prototype.createGroupCell = function (cells) {
            var group = new Five.Cell('');
            group.setVertex(true);
            group.setConnectable(false);
            return group;
        };
        Graph.prototype.getCellsForGroup = function (cells) {
            var result = [];
            if (cells != null && cells.length > 0) {
                var parent = Five.Cells.getParent(cells[0]);
                result.push(cells[0]);
                for (var i = 1; i < cells.length; i++) {
                    if (Five.Cells.getParent(cells[i]) == parent) {
                        result.push(cells[i]);
                    }
                }
            }
            return result;
        };
        Graph.prototype.getCellBounds = function (cell, includeEdges, includeDescendants) {
            if (includeEdges === void 0) { includeEdges = false; }
            if (includeDescendants === void 0) { includeDescendants = false; }
            var cells = [cell];
            if (includeEdges) {
                cells = cells.concat(this.model.getEdges(cell));
            }
            var result = this.view.getBounds(cells);
            if (includeDescendants) {
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = 0; i < childCount; i++) {
                    var tmp = this.getCellBounds(Five.Cells.getChildAt(cell, i), includeEdges, true);
                    if (result != null) {
                        result.add(tmp);
                    }
                    else {
                        result = tmp;
                    }
                }
            }
            return result;
        };
        Graph.prototype.isResizeContainer = function () {
            return this.resizeContainer;
        };
        Graph.prototype.setResizeContainer = function (value) {
            this.resizeContainer = value;
        };
        Graph.prototype.setDropEnabled = function (value) {
            this.dropEnabled = value;
        };
        Graph.prototype.setSplitEnabled = function (value) {
            this.splitEnabled = value;
        };
        return Graph;
    }());
    Five.Graph = Graph;
})(Five || (Five = {}));
var Five;
(function (Five) {
    function behaviorAction(caption, group, keyCode, keyModifier, isEnabled, execute) {
        return new BehaviorAction(caption, group, keyCode, keyModifier, isEnabled, execute);
    }
    Five.behaviorAction = behaviorAction;
    var BehaviorAction = (function () {
        function BehaviorAction(caption, group, keyCode, keyModifier, _isEnabled, _execute) {
            this.caption = caption;
            this.group = group;
            this.keyCode = keyCode;
            this.keyModifier = keyModifier;
            this._isEnabled = _isEnabled;
            this._execute = _execute;
        }
        BehaviorAction.prototype.setSelectionProvider = function (provider) {
            this.selectionProvider = provider;
        };
        BehaviorAction.prototype.getKeyCode = function () { return this.keyCode; };
        BehaviorAction.prototype.getKeyModifier = function () { return this.keyModifier; };
        BehaviorAction.prototype.isEnabled = function () {
            return this._isEnabled(this.selectionProvider);
        };
        BehaviorAction.prototype.execute = function () {
            this._execute(this.selectionProvider);
        };
        BehaviorAction.prototype.getCaption = function () { return this.caption; };
        BehaviorAction.prototype.getGroup = function () { return this.group; };
        return BehaviorAction;
    }());
})(Five || (Five = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var KeyCode = Five.KeyCode;
    var KeyModifier = Five.KeyModifier;
    var behaviorAction = Five.behaviorAction;
    var Application = (function () {
        function Application() {
        }
        Application.initialize = function () {
            var _this = this;
            this.setupActions();
            CloudDiagram.Menus.setupFileActions(this.fileActions);
            CloudDiagram.Menus.setupEditActions(this.editActions);
            CloudDiagram.Menus.setupLoginActions(this.loginActions);
            this.serverConnection = CloudDiagram.createServerConnection(this.baseUrl);
            this.serverConnection.startOptions.GetAll(function (startOptions) {
                var diagramId = startOptions[0].lastDiagram;
                if (diagramId != undefined) {
                    _this.serverConnection.diagrams.GetById(diagramId, function (diagram) { return _this.load(diagram, diagramId); });
                }
                else
                    _this.createNew();
            });
        };
        Application.setupActions = function () {
            var _this = this;
            this.fileActions = [
                behaviorAction("New Diagram", 1, KeyCode.n, KeyModifier.ctrl, function () { return true; }, function () { return Application.createNew(); }),
                behaviorAction("Open From", 1, KeyCode.o, KeyModifier.ctrl, function () { return false; }, function () { }),
                behaviorAction("Save", 2, KeyCode.s, KeyModifier.ctrlShift, function () { return !!_this.editor; }, function () { _this.save(); })
            ];
            this.editActions = [
                behaviorAction("Undo", 1, KeyCode.z, KeyModifier.ctrl, function () { return true; }, function () { }),
                behaviorAction("Redo", 1, KeyCode.o, KeyModifier.ctrl, function () { return false; }, function () { })
            ];
            this.loginActions = [
                behaviorAction("Login", 1, null, null, function () { return true; }, function () { CloudDiagram.localLoginDialog(null, _this.serverConnection); }),
                behaviorAction("Logout", 2, null, null, function () { return false; }, function () { })
            ];
        };
        Application.diagramContainer = function () {
            return document.getElementById("diagram");
        };
        Application.createNew = function () {
            var _this = this;
            CloudDiagram.createNewDialog({
                onSelected: function (type) {
                    var behavior;
                    switch (type) {
                        case CloudDiagram.DiagramType.MindMap:
                            behavior = CloudDiagram.createMindMap();
                            break;
                        case CloudDiagram.DiagramType.UmlActivity:
                            behavior = CloudDiagram.Uml.createActivity();
                            break;
                        default:
                            throw new Error("unsupported language");
                    }
                    _this.editor = CloudDiagram.createDiagramEditor(_this.diagramContainer(), behavior, null, null);
                }
            });
        };
        Application.save = function () {
            var dto = this.editor.getDiagram();
            var id = this.editor.getDiagramId();
            if (id)
                this.serverConnection.diagrams.Update(dto, id);
            else
                this.serverConnection.diagrams.Create(dto);
        };
        Application.load = function (diagram, diagramId) {
            var behavior = CloudDiagram.createMindMap();
            this.editor = CloudDiagram.createDiagramEditor(this.diagramContainer(), behavior, diagramId, diagram);
        };
        Application.baseUrl = "api/";
        return Application;
    }());
    CloudDiagram.Application = Application;
})(CloudDiagram || (CloudDiagram = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var KeyHandler = Five.KeyHandler;
    function createDiagramEditor(container, behavior, diagramId, diagram) {
        return new DiagramEditor(container, behavior, diagramId, diagram);
    }
    CloudDiagram.createDiagramEditor = createDiagramEditor;
    var DiagramEditor = (function () {
        function DiagramEditor(container, behavior, diagramId, diagram) {
            var _this = this;
            this.container = container;
            this.behavior = behavior;
            this.diagramId = diagramId;
            this.graph = this.createGraph();
            var graphPresenter = Five.graphPresenter(this.graph);
            behavior.setPresentation(graphPresenter);
            this.keyHandler = new KeyHandler(this.graph);
            behavior.actions.forEach(function (a) { return a.setSelectionProvider(graphPresenter); });
            CloudDiagram.Menus.setupDiagramContextActions(behavior.actions, behavior.menuCaption());
            behavior.actions.forEach(function (a) { return _this.bindKeyAction(a); });
            behavior.setDockPanelFactory(CloudDiagram.createDockPanelFactory(container));
            this.graph.cellsResizable = behavior.allowResize;
            if (diagramId)
                behavior.load(diagram);
            else
                behavior.bootstrap();
        }
        DiagramEditor.prototype.bindKeyAction = function (action) {
            var handler = function (evt) {
                if (action.isEnabled())
                    action.execute();
            };
            this.keyHandler.bindKey(action.getKeyModifier(), action.getKeyCode(), handler);
        };
        DiagramEditor.prototype.createGraph = function () {
            var model = new Five.GraphModel();
            var graph = new Five.Graph(this.container, this.defaultConfig(), model);
            return graph;
        };
        DiagramEditor.prototype.defaultConfig = function () {
            return {
                nodeSelection: {
                    color: "#FF0000",
                    strokeWidth: 3,
                    dashed: true
                },
                selectionHandle: {
                    fillColor: "#00FF00",
                    strokeColor: "black",
                    size: 7
                }
            };
        };
        DiagramEditor.prototype.getDiagram = function () {
            return this.behavior.getDiagram();
        };
        DiagramEditor.prototype.getDiagramId = function () {
            return this.diagramId;
        };
        return DiagramEditor;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var CloudDiagram;
(function (CloudDiagram) {
    function localLoginDialog(events, conn) { new LocalLoginDialog(events, conn).init(); }
    CloudDiagram.localLoginDialog = localLoginDialog;
    var LocalLoginDialog = (function () {
        function LocalLoginDialog(events, conn) {
            this.loginUrl = "account/login";
            this.registerUrl = "account/register";
            this.conn = conn;
            this.events = events;
        }
        LocalLoginDialog.prototype.enableControls = function () {
            this.dialog.setClosable(true);
        };
        LocalLoginDialog.prototype.disableControls = function () {
            this.dialog.setClosable(false);
        };
        LocalLoginDialog.prototype.onFormSubmitFailed = function (err) {
            this.enableControls();
            alert(err);
        };
        LocalLoginDialog.prototype.onAnchorClick = function (ev) {
            var _this = this;
            var href = ev.target.href;
            ev.preventDefault();
            this.conn.pageReader.get(href, function (data) { return _this.onAnchorLoaded(data); }, function () { return alert("Registration is not avaialble"); });
        };
        LocalLoginDialog.prototype.onSubmitClick = function (ev) {
            var _this = this;
            ev.preventDefault();
            var button = ev.target;
            button.disabled = true;
            var form = button.form;
            this.dialog.setClosable(false);
            var formData = $(form).serializeArray();
            formData.push({ name: button.name, value: button.value });
            this.conn.pageReader.post(form.action, jQuery.param(formData), function (data, status) { return _this.adoptPage(data, status); }, function (err) { _this.onFormSubmitFailed(err); });
        };
        LocalLoginDialog.prototype.onAnchorLoaded = function (data) {
            this.adoptPage(data, null);
        };
        LocalLoginDialog.prototype.adoptPage = function (data, status) {
            var _this = this;
            if (!data && status == "success") {
                this.dialog.close();
            }
            this.enableControls();
            this.pane.innerHTML = data;
            var anchors = this.pane.getElementsByTagName("a");
            var i;
            for (i = 0; i < anchors.length; i++)
                anchors[i].onclick = function (ev) { return _this.onAnchorClick(ev); };
            var buttons = this.pane.getElementsByTagName("button");
            for (i = 0; i < buttons.length; i++)
                if (buttons[i].type == "submit" && buttons[i].form.target != "_blank") {
                    buttons[i].onclick = function (ev) { return _this.onSubmitClick(ev); };
                }
        };
        LocalLoginDialog.prototype.show = function (data) {
            var options = {
                message: this.pane,
                type: BootstrapDialog.TYPE_PRIMARY,
                title: "Login using CloudDiagram credentials"
            };
            this.dialog = BootstrapDialog.show(options);
            this.dialog.getModalFooter().hide();
            this.adoptPage(data, null);
        };
        LocalLoginDialog.prototype.init = function () {
            var _this = this;
            this.pane = document.createElement("div");
            this.conn.pageReader.get(this.loginUrl, function (data) { return _this.show(data); }, function () { return alert("Login is not avaialble"); });
        };
        return LocalLoginDialog;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var CloudDiagram;
(function (CloudDiagram) {
    function createServerConnection(baseUrl) {
        return new ServerConnection(baseUrl);
    }
    CloudDiagram.createServerConnection = createServerConnection;
    var WebApi = (function () {
        function WebApi(url) {
            this.url = url;
        }
        WebApi.prototype.GetById = function (id, then) {
            var _this = this;
            $.getJSON(this.url + "/" + id)
                .done(function (data) { then(data); })
                .fail(function () { throw Error("error in " + _this.url + ".getbyId(" + id + ")"); });
        };
        WebApi.prototype.GetAll = function (then) {
            var _this = this;
            $.ajax({
                url: this.url,
                dataType: 'json',
                timeout: 20000,
                success: function (data) { then(data); },
                error: function (e) {
                    throw Error("error in " + _this.url + ".getAll() with " + e);
                }
            });
        };
        WebApi.prototype.Create = function (value) {
            $.ajax({
                url: this.url,
                type: "POST",
                contentType: WebApi.jsonType,
                data: JSON.stringify(value)
            });
        };
        WebApi.prototype.Update = function (value, id) {
            $.ajax({
                url: this.url + "/" + id,
                type: "PUT",
                contentType: WebApi.jsonType,
                data: JSON.stringify(value)
            });
        };
        WebApi.jsonType = "application/json; charset=utf-8";
        return WebApi;
    }());
    var PageReader = (function () {
        function PageReader(baseUrl) {
            this.baseUrl = baseUrl;
        }
        PageReader.prototype.get = function (page, then, fail) {
            $.get(page)
                .done(function (content) { then(content); })
                .fail(function () { return fail(); });
        };
        PageReader.prototype.post = function (page, data, then, fail) {
            $.post(page, data)
                .done(function (content, status) { then(content, status); })
                .fail(function (err) { return fail(err); });
        };
        return PageReader;
    }());
    var ServerConnection = (function () {
        function ServerConnection(baseUrl) {
            this.baseUrl = baseUrl;
            this.startOptions = new WebApi(this.baseUrl + "startOptions");
            this.diagrams = new WebApi(this.baseUrl + "diagram");
            this.pageReader = new PageReader(this.baseUrl);
        }
        return ServerConnection;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var ColorSelector = (function () {
        function ColorSelector(select, options) {
            this.options = options;
            this.$select = $(select);
            this.select = select;
            this._init();
        }
        ColorSelector.prototype._init = function () {
            var callback = this.options.callback;
            var selectValue = this.$select.val();
            var selectColor = this.$select.find("option:selected").data("color");
            var $markupUl = $("<ul>").addClass("dropdown-menu").addClass("dropdown-caret");
            var $markupDiv = $("<div>").addClass("dropdown").addClass("dropdown-colorselector");
            var $markupSpan = $("<span>").addClass("btn-colorselector").css("background-color", selectColor);
            var $markupA = $("<a>").attr("data-toggle", "dropdown").addClass("dropdown-toggle").attr("href", "#").append($markupSpan);
            $("option", this.$select).each(function () {
                var option = $(this);
                var value = option.attr("value");
                var color = option.data("color");
                var title = option.text();
                var $markupA = $("<a>").addClass("color-btn");
                if (option.prop("selected") === true || selectValue === color) {
                    $markupA.addClass("selected");
                }
                $markupA.css("background-color", color);
                $markupA.attr("href", "#").attr("data-color", color).attr("data-value", value).attr("title", title);
                $markupUl.append($("<li>").append($markupA));
            });
            $markupDiv.append($markupA);
            $markupDiv.append($markupUl);
            this.$select.hide();
            this.$selector = $($markupDiv).insertAfter(this.$select);
            this.$select.on("change", function () {
                var value = $(this).val();
                var color = $(this).find("option[value='" + value + "']").data("color");
                var title = $(this).find("option[value='" + value + "']").text();
                $(this).next().find("ul").find("li").find(".selected").removeClass("selected");
                $(this).next().find("ul").find("li").find("a[data-color='" + color + "']").addClass("selected");
                $(this).next().find(".btn-colorselector").css("background-color", color);
                callback(value, color, title);
            });
            $markupUl.on('click.colorselector', $.proxy(this._clickColor, this));
        };
        ColorSelector.prototype._clickColor = function (e) {
            var a = $(e.target);
            if (!a.is(".color-btn")) {
                return false;
            }
            this.$select.val(a.data("value")).change();
            e.preventDefault();
            return true;
        };
        ColorSelector.prototype.setColor = function (color) {
            var value = $(this.$selector).find("li").find("a[data-color='" + color + "']").data("value");
            this.setValue(value);
        };
        ColorSelector.prototype.setValue = function (value) {
            this.$select.val(value).change();
        };
        return ColorSelector;
    }());
    CloudDiagram.ColorSelector = ColorSelector;
    ;
    $.fn.colorselector = function (option) {
        var args = Array.apply(null, arguments);
        args.shift();
        return this.each(function () {
            var $this = $(this), data = $this.data("colorselector"), options = $.extend({}, $.fn.colorselector.defaults, $this.data(), typeof option == "object" && option);
            if (!data) {
                $this.data("colorselector", (data = new ColorSelector(this, options)));
            }
            if (typeof option == "string") {
                data[option].apply(data, args);
            }
        });
    };
    $.fn.colorselector.defaults = {
        callback: function (value, color, title) {
        },
        colorsPerRow: 8
    };
})(CloudDiagram || (CloudDiagram = {}));
var Five;
(function (Five) {
    var FileStructure = (function () {
        function FileStructure() {
        }
        Object.defineProperty(FileStructure, "basePath", {
            get: function () { return FileStructure._basePath; },
            set: function (value) {
                if (value != null && value.length > 0) {
                    if (value.substring(value.length - 1) == "/") {
                        value = value.substring(0, value.length - 1);
                    }
                    FileStructure._basePath = value;
                }
                else {
                    FileStructure._basePath = ".";
                }
                if (!this._imageBasePath)
                    this.imageBasePath = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileStructure, "imageBasePath", {
            get: function () { return FileStructure._imageBasePath; },
            set: function (value) {
                if (value != null && value.length > 0) {
                    if (value.substring(value.length - 1) == "/") {
                        value = value.substring(0, value.length - 1);
                    }
                    FileStructure._imageBasePath = value;
                }
                else {
                    FileStructure._imageBasePath = FileStructure.basePath + "/images";
                }
            },
            enumerable: true,
            configurable: true
        });
        FileStructure._imageBasePath = null;
        return FileStructure;
    }());
    Five.FileStructure = FileStructure;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Client = (function () {
        function Client() {
        }
        Client.isFf = navigator.userAgent.indexOf("Firefox/") >= 0;
        Client.isIe = navigator.userAgent.indexOf("MSIE") >= 0;
        Client.isIe11 = !!navigator.userAgent.match(/Trident\/7\./);
        Client.isIe9 = document["documentMode"] >= 9;
        Client.isIe8Or9 = document["documentMode"] == 8 || document["documentMode"] == 9;
        Client.isIe10 = document["documentMode"] != null && document["documentMode"] >= 10;
        Client.isSvg = navigator.userAgent.indexOf("Firefox/") >= 0 ||
            navigator.userAgent.indexOf("Iceweasel/") >= 0 ||
            navigator.userAgent.indexOf("Seamonkey/") >= 0 ||
            navigator.userAgent.indexOf("Iceape/") >= 0 ||
            navigator.userAgent.indexOf("Galeon/") >= 0 ||
            navigator.userAgent.indexOf("Epiphany/") >= 0 ||
            navigator.userAgent.indexOf("AppleWebKit/") >= 0 ||
            navigator.userAgent.indexOf("Gecko/") >= 0 ||
            navigator.userAgent.indexOf("Opera/") >= 0 ||
            Client.isIe9;
        Client.isQuirks = navigator.userAgent.indexOf("MSIE") >= 0 && (document["documentMode"] == null || document["documentMode"] == 5);
        Client.isOp = navigator.userAgent.indexOf("Opera/") >= 0;
        Client.isOt = navigator.userAgent.indexOf("Presto/2.4.") < 0 &&
            navigator.userAgent.indexOf("Presto/2.3.") < 0 &&
            navigator.userAgent.indexOf("Presto/2.2.") < 0 &&
            navigator.userAgent.indexOf("Presto/2.1.") < 0 &&
            navigator.userAgent.indexOf("Presto/2.0.") < 0 &&
            navigator.userAgent.indexOf("Presto/1.") < 0;
        Client.isBrowserSupported = function () { return Client.isSvg; };
        Client.isNs = navigator.userAgent.indexOf("Mozilla/") >= 0 && navigator.userAgent.indexOf("MSIE") < 0;
        Client.language = navigator.language;
        Client.isPointer = (window.navigator.msPointerEnabled != null) ? window.navigator.msPointerEnabled : false;
        Client.isTouch = "ontouchstart" in document.documentElement;
        Client.isSf = navigator.userAgent.indexOf("AppleWebKit/") >= 0 && navigator.userAgent.indexOf("Chrome/") < 0;
        Client.isGc = navigator.userAgent.indexOf("Chrome/") >= 0;
        Client.isMt = (navigator.userAgent.indexOf("Firefox/") >= 0 && navigator.userAgent.indexOf("Firefox/1.") < 0 && navigator.userAgent.indexOf("Firefox/2.") < 0) ||
            (navigator.userAgent.indexOf("Iceweasel/") >= 0 && navigator.userAgent.indexOf("Iceweasel/1.") < 0 && navigator.userAgent.indexOf("Iceweasel/2.") < 0) ||
            (navigator.userAgent.indexOf("SeaMonkey/") >= 0 && navigator.userAgent.indexOf("SeaMonkey/1.") < 0) ||
            (navigator.userAgent.indexOf("Iceape/") >= 0 && navigator.userAgent.indexOf("Iceape/1.") < 0);
        Client.isMac = navigator.appVersion.indexOf("Mac") > 0;
        Client.isIos = (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false);
        Client.noFo = navigator.userAgent.indexOf("Opera/") >= 0;
        Client.isVml = navigator.appName.toUpperCase() === "MICROSOFT INTERNET EXPLORER";
        Client.isLocal = document.location.href.indexOf('http://') < 0 && document.location.href.indexOf('https://') < 0;
        return Client;
    }());
    Five.Client = Client;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Utils = (function () {
        function Utils() {
        }
        Utils.write = function (parent, text) {
            var doc = parent.ownerDocument;
            var node = doc.createTextNode(text);
            if (parent != null) {
                parent.appendChild(node);
            }
            return node;
        };
        Utils.clone = function (obj, transients, shallow) {
            if (shallow === void 0) { shallow = null; }
            shallow = (shallow != null) ? shallow : false;
            var clone = null;
            if (obj != null && typeof (obj.constructor) == "function") {
                clone = Object.create(obj);
                for (var key in obj) {
                    if (key != Five.ObjectIdentity.fieldName && (transients == null || Utils.indexOf(transients, key) < 0)) {
                        if (!shallow && typeof (obj[key]) == "object") {
                            var subobj = obj[key];
                            clone[key] = this.clone(subobj);
                        }
                        else {
                            clone[key] = obj[key];
                        }
                    }
                }
            }
            return clone;
        };
        Utils.arcToCurves = function (x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y) {
            x -= x0;
            y -= y0;
            if (r1 === 0 || r2 === 0) {
                return [];
            }
            var fS = sweepFlag;
            var psai = angle;
            r1 = Math.abs(r1);
            r2 = Math.abs(r2);
            var ctx = -x / 2;
            var cty = -y / 2;
            var cpsi = Math.cos(psai * Math.PI / 180);
            var spsi = Math.sin(psai * Math.PI / 180);
            var rxd = cpsi * ctx + spsi * cty;
            var ryd = -1 * spsi * ctx + cpsi * cty;
            var rxdd = rxd * rxd;
            var rydd = ryd * ryd;
            var r1X = r1 * r1;
            var r2Y = r2 * r2;
            var lamda = rxdd / r1X + rydd / r2Y;
            var sds;
            if (lamda > 1) {
                r1 = Math.sqrt(lamda) * r1;
                r2 = Math.sqrt(lamda) * r2;
                sds = 0;
            }
            else {
                var seif = 1;
                if (largeArcFlag === fS) {
                    seif = -1;
                }
                sds = seif * Math.sqrt((r1X * r2Y - r1X * rydd - r2Y * rxdd) / (r1X * rydd + r2Y * rxdd));
            }
            var txd = sds * r1 * ryd / r2;
            var tyd = -1 * sds * r2 * rxd / r1;
            var tx = cpsi * txd - spsi * tyd + x / 2;
            var ty = spsi * txd + cpsi * tyd + y / 2;
            var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);
            var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;
            rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);
            var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;
            if (fS == 0 && dr > 0) {
                dr -= 2 * Math.PI;
            }
            else if (fS != 0 && dr < 0) {
                dr += 2 * Math.PI;
            }
            var sse = dr * 2 / Math.PI;
            var seg = Math.ceil(sse < 0 ? -1 * sse : sse);
            var segr = dr / seg;
            var t = 8 / 3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);
            var cpsir1 = cpsi * r1;
            var cpsir2 = cpsi * r2;
            var spsir1 = spsi * r1;
            var spsir2 = spsi * r2;
            var mc = Math.cos(s1);
            var ms = Math.sin(s1);
            var x2 = -t * (cpsir1 * ms + spsir2 * mc);
            var y2 = -t * (spsir1 * ms - cpsir2 * mc);
            var x3 = 0;
            var y3 = 0;
            var result = [];
            for (var n = 0; n < seg; ++n) {
                s1 += segr;
                mc = Math.cos(s1);
                ms = Math.sin(s1);
                x3 = cpsir1 * mc - spsir2 * ms + tx;
                y3 = spsir1 * mc + cpsir2 * ms + ty;
                var dx = -t * (cpsir1 * ms + spsir2 * mc);
                var dy = -t * (spsir1 * ms - cpsir2 * mc);
                var index = n * 6;
                result[index] = Number(x2 + x0);
                result[index + 1] = Number(y2 + y0);
                result[index + 2] = Number(x3 - dx + x0);
                result[index + 3] = Number(y3 - dy + y0);
                result[index + 4] = Number(x3 + x0);
                result[index + 5] = Number(y3 + y0);
                x2 = x3 + dx;
                y2 = y3 + dy;
            }
            return result;
        };
        Utils.isNode = function (value, nodeName, attributeName, attributeValue) {
            if (value instanceof Element &&
                !isNaN(value.nodeType) &&
                (nodeName == null ||
                    value.nodeName.toLowerCase() === nodeName.toLowerCase())) {
                return attributeName == null || value.getAttribute(attributeName) == attributeValue;
            }
            return false;
        };
        Utils.getRotatedPoint = function (pt, cos, sin, c) {
            c = (c != null) ? c : new Five.Point(0, 0);
            var x = pt.x - c.x;
            var y = pt.y - c.y;
            var x1 = x * cos - y * sin;
            var y1 = y * cos + x * sin;
            return new Five.Point(x1 + c.x, y1 + c.y);
        };
        Utils.getBoundingBox = function (rect, rotation, cx) {
            var result = null;
            if (rect != null && rotation != null && rotation != 0) {
                var rad = Utils.toRadians(rotation);
                var cos = Math.cos(rad);
                var sin = Math.sin(rad);
                cx = (cx != null) ? cx : new Five.Point(rect.x + rect.width / 2, rect.y + rect.height / 2);
                var p1 = new Five.Point(rect.x, rect.y);
                var p2 = new Five.Point(rect.x + rect.width, rect.y);
                var p3 = new Five.Point(p2.x, rect.y + rect.height);
                var p4 = new Five.Point(rect.x, p3.y);
                p1 = Utils.getRotatedPoint(p1, cos, sin, cx);
                p2 = Utils.getRotatedPoint(p2, cos, sin, cx);
                p3 = Utils.getRotatedPoint(p3, cos, sin, cx);
                p4 = Utils.getRotatedPoint(p4, cos, sin, cx);
                result = new Five.Rectangle(p1.x, p1.y, 0, 0);
                result.add(new Five.Rectangle(p2.x, p2.y, 0, 0));
                result.add(new Five.Rectangle(p3.x, p3.y, 0, 0));
                result.add(new Five.Rectangle(p4.x, p4.y, 0, 0));
            }
            return result;
        };
        Utils.toRadians = function (deg) {
            return Math.PI * deg / 180;
        };
        Utils.parseXml = function (xml) {
            var parser = new DOMParser();
            return parser.parseFromString(xml, "text/xml");
        };
        Utils.trim = function (str, chars) {
            return Utils.ltrim(Utils.rtrim(str, chars), chars);
        };
        Utils.ltrim = function (str, chars) {
            chars = chars || "\\s";
            return str.replace(new RegExp("^[" + chars + "]+", "g"), "");
        };
        Utils.rtrim = function (str, chars) {
            chars = chars || "\\s";
            return str.replace(new RegExp("[" + chars + "]+$", "g"), "");
        };
        Utils.htmlEntities = function (s, newline) {
            if (newline === void 0) { newline = true; }
            s = s || "";
            s = s.replace(/&/g, "&amp;");
            s = s.replace(/"/g, "&quot;");
            s = s.replace(/\'/g, "&#39;");
            s = s.replace(/</g, "&lt;");
            s = s.replace(/>/g, "&gt;");
            if (newline) {
                s = s.replace(/\n/g, "&#xa;");
            }
            return s;
        };
        Utils.getTextContent = function (node) {
            if (node == null)
                return "";
            if (node.innerText !== undefined)
                return node.innerText;
            else
                return node[(node.textContent === undefined) ? "text" : "textContent"];
        };
        Utils.eval = function (expr) {
            var result = null;
            if (expr.indexOf("function") >= 0) {
                throw new Error("unsupported");
            }
            else {
                try {
                    result = eval(expr);
                }
                catch (e) {
                    console.log(e.message + " while evaluating " + expr);
                }
            }
            return result;
        };
        Utils.indexOf = function (array, obj) {
            if (array != null && obj != null) {
                for (var i = 0; i < array.length; i++) {
                    if (array[i] === obj) {
                        return i;
                    }
                }
            }
            return -1;
        };
        Utils.bind = function (scope, funct) {
            return (function () { return funct.apply(scope, arguments); });
        };
        Utils.equalPoints = function (a, b) {
            if ((a == null && b != null) ||
                (a != null && b == null) ||
                (a != null && b != null && a.length != b.length)) {
                return false;
            }
            else if (a != null && b != null) {
                for (var i = 0; i < a.length; i++) {
                    if (a[i] == b[i] || (a[i] != null && !a[i].equals(b[i]))) {
                        return false;
                    }
                }
            }
            return true;
        };
        Utils.getFunctionName = function (f) {
            var str = null;
            if (f != null) {
                if (f.name != null) {
                    str = f.name;
                }
                else {
                    var tmp = f.toString();
                    var idx1 = 9;
                    while (tmp.charAt(idx1) == " ") {
                        idx1++;
                    }
                    var idx2 = tmp.indexOf("(", idx1);
                    str = tmp.substring(idx1, idx2);
                }
            }
            return str;
        };
        Utils.isAncestorNode = function (ancestor, child) {
            var parent = child;
            while (parent != null) {
                if (parent === ancestor) {
                    return true;
                }
                parent = (parent.parentNode);
            }
            return false;
        };
        Utils.getPortConstraints = function (terminal, edge, source, defaultValue) {
            var value = terminal.style.portConstraint;
            if (value == null) {
                return defaultValue;
            }
            else {
                var directions = value.toString();
                var returnValue = Five.Constants.directionMaskNone;
                var constraintRotationEnabled = terminal.style.portConstraintRotation;
                var rotation = 0;
                if (constraintRotationEnabled) {
                    rotation = terminal.style.rotation;
                }
                var quad = 0;
                if (rotation > 45) {
                    quad = 1;
                    if (rotation >= 135) {
                        quad = 2;
                    }
                }
                else if (rotation < -45) {
                    quad = 3;
                    if (rotation <= -135) {
                        quad = 2;
                    }
                }
                if (directions.indexOf(Five.Direction[Five.Direction.North]) >= 0) {
                    switch (quad) {
                        case 0:
                            returnValue |= Five.Constants.directionMaskNorth;
                            break;
                        case 1:
                            returnValue |= Five.Constants.directionMaskEast;
                            break;
                        case 2:
                            returnValue |= Five.Constants.directionMaskSouth;
                            break;
                        case 3:
                            returnValue |= Five.Constants.directionMaskWest;
                            break;
                    }
                }
                if (directions.indexOf(Five.Direction[Five.Direction.West]) >= 0) {
                    switch (quad) {
                        case 0:
                            returnValue |= Five.Constants.directionMaskWest;
                            break;
                        case 1:
                            returnValue |= Five.Constants.directionMaskNorth;
                            break;
                        case 2:
                            returnValue |= Five.Constants.directionMaskEast;
                            break;
                        case 3:
                            returnValue |= Five.Constants.directionMaskSouth;
                            break;
                    }
                }
                if (directions.indexOf(Five.Direction[Five.Direction.South]) >= 0) {
                    switch (quad) {
                        case 0:
                            returnValue |= Five.Constants.directionMaskSouth;
                            break;
                        case 1:
                            returnValue |= Five.Constants.directionMaskWest;
                            break;
                        case 2:
                            returnValue |= Five.Constants.directionMaskNorth;
                            break;
                        case 3:
                            returnValue |= Five.Constants.directionMaskEast;
                            break;
                    }
                }
                if (directions.indexOf(Five.Direction[Five.Direction.East]) >= 0) {
                    switch (quad) {
                        case 0:
                            returnValue |= Five.Constants.directionMaskEast;
                            break;
                        case 1:
                            returnValue |= Five.Constants.directionMaskSouth;
                            break;
                        case 2:
                            returnValue |= Five.Constants.directionMaskWest;
                            break;
                        case 3:
                            returnValue |= Five.Constants.directionMaskNorth;
                            break;
                    }
                }
                return returnValue;
            }
        };
        Utils.contains = function (bounds, x, y) {
            return (bounds.x <= x &&
                bounds.x + bounds.width >= x &&
                bounds.y <= y &&
                bounds.y + bounds.height >= y);
        };
        Utils.reversePortConstraints = function (constraint) {
            var result = 0;
            result |= (constraint & Five.Constants.directionMaskWest) << 3;
            result |= (constraint & Five.Constants.directionMaskNorth) << 1;
            result |= (constraint & Five.Constants.directionMaskSouth) >> 1;
            result |= (constraint & Five.Constants.directionMaskEast) >> 3;
            return result;
        };
        Utils.intersection = function (x0, y0, x1, y1, x2, y2, x3, y3) {
            var denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));
            var a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));
            var b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));
            var ua = a / denom;
            var ub = b / denom;
            if (ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0) {
                var intersectionX = x0 + ua * (x1 - x0);
                var intersectionY = y0 + ua * (y1 - y0);
                return new Five.Point(intersectionX, intersectionY);
            }
            return null;
        };
        Utils.prototype.addTransparentBackgroundFilter = function (node) {
        };
        Utils.setPrefixedStyle = function (style, name, value) {
            style[name] = value;
            if (Utils.prefix != null && name.length > 0) {
                name = Utils.prefix + name.substring(0, 1).toUpperCase() + name.substring(1);
                style[name] = value;
            }
        };
        Utils.middlePoint = function (p0, p1) {
            return new Five.Point((p0.x + p1.x) / 2, (p0.y + p1.y) / 2);
        };
        Utils.getAlignmentAsPoint = function (align, valign) {
            var dx = 0;
            var dy = 0;
            if (align === Five.HorizontalAlign.Center) {
                dx = -0.5;
            }
            else if (align == Five.HorizontalAlign.Right) {
                dx = -1;
            }
            if (valign == Five.VerticalAlign.Middle) {
                dy = -0.5;
            }
            else if (valign == Five.VerticalAlign.Bottom) {
                dy = -1;
            }
            return new Five.Point(dx, dy);
        };
        Utils.getOffset = function (container, scrollOffset) {
            if (scrollOffset === void 0) { scrollOffset = false; }
            var offsetLeft = 0;
            var offsetTop = 0;
            if (scrollOffset) {
                var offset = Utils.getDocumentScrollOrigin(container.ownerDocument);
                offsetLeft += offset.x;
                offsetTop += offset.y;
            }
            while (container.offsetParent) {
                offsetLeft += container.offsetLeft;
                offsetTop += container.offsetTop;
                container = (container.offsetParent);
            }
            return new Five.Point(offsetLeft, offsetTop);
        };
        Utils.getDocumentScrollOrigin = function (doc) {
            if (Five.Client.isQuirks) {
                return new Five.Point(doc.body.scrollLeft, doc.body.scrollTop);
            }
            else {
                var wnd = doc.defaultView || doc["parentWindow"];
                var x = (wnd != null && window.pageXOffset !== undefined)
                    ? window.pageXOffset
                    : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
                var y = (wnd != null && window.pageYOffset !== undefined)
                    ? window.pageYOffset
                    : (document.documentElement || document.body.parentNode || document.body).scrollTop;
                return new Five.Point(x, y);
            }
        };
        Utils.isNumeric = function (n) {
            return !isNaN(parseFloat(n)) &&
                isFinite(n) &&
                (typeof (n) != "string" || n.toLowerCase().indexOf("0x") < 0);
        };
        Utils.convertPoint = function (container, x, y) {
            var origin = Utils.getScrollOrigin(container);
            var offset = Utils.getOffset(container);
            offset.x -= origin.x;
            offset.y -= origin.y;
            return new Five.Point(x - offset.x, y - offset.y);
        };
        Utils.getScrollOrigin = function (node) {
            var body = document.body;
            var docElem = document.documentElement;
            var doc = (node != null) ? node.ownerDocument : document;
            var result = Utils.getDocumentScrollOrigin(doc);
            while (node != null && node != body && node != docElem) {
                if (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop)) {
                    result.x += node.scrollLeft;
                    result.y += node.scrollTop;
                }
                node = (node.parentNode);
            }
            return result;
        };
        Utils.fit = function (node) {
            var left = node.offsetLeft;
            var width = node.offsetWidth;
            var offset = Utils.getDocumentScrollOrigin(node.ownerDocument);
            var sl = offset.x;
            var st = offset.y;
            var b = document.body;
            var d = document.documentElement;
            var right = (sl) + (b.clientWidth || d.clientWidth);
            if (left + width > right) {
                node.style.left = Math.max(sl, right - width) + "px";
            }
            var top = node.offsetTop;
            var height = node.offsetHeight;
            var bottom = st + Math.max(b.clientHeight || 0, d.clientHeight);
            if (top + height > bottom) {
                node.style.top = Math.max(st, bottom - height) + "px";
            }
        };
        Utils.ptSegDistSq = function (x1, y1, x2, y2, px, py) {
            x2 -= x1;
            y2 -= y1;
            px -= x1;
            py -= y1;
            var dotprod = px * x2 + py * y2;
            var projlenSq;
            if (dotprod <= 0.0) {
                projlenSq = 0.0;
            }
            else {
                px = x2 - px;
                py = y2 - py;
                dotprod = px * x2 + py * y2;
                if (dotprod <= 0.0) {
                    projlenSq = 0.0;
                }
                else {
                    projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
                }
            }
            var lenSq = px * px + py * py - projlenSq;
            if (lenSq < 0) {
                lenSq = 0;
            }
            return lenSq;
        };
        Utils.relativeCcw = function (x1, y1, x2, y2, px, py) {
            x2 -= x1;
            y2 -= y1;
            px -= x1;
            py -= y1;
            var ccw = px * y2 - py * x2;
            if (ccw == 0.0) {
                ccw = px * x2 + py * y2;
                if (ccw > 0.0) {
                    px -= x2;
                    py -= y2;
                    ccw = px * x2 + py * y2;
                    if (ccw < 0.0) {
                        ccw = 0.0;
                    }
                }
            }
            return (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);
        };
        Utils.getCurrentStyle = function (element) {
            if (Five.Client.isIe) {
                return (element != null) ? element.currentStyle : null;
            }
            else {
                return (element != null) ? window.getComputedStyle(element, "") : null;
            }
        };
        Utils.nodeStyle = function (node) {
            if (node instanceof SVGGElement)
                return node.style;
            else
                return node.style;
        };
        Utils.isNaN = function (value) {
            return typeof (value) == "number" && isNaN(value);
        };
        Utils.equalEntries = function (a, b) {
            if ((a == null && b != null) ||
                (a != null && b == null) ||
                (a != null && b != null && a.length != b.length)) {
                return false;
            }
            else if (a != null && b != null) {
                for (var key in a) {
                    if (a.hasOwnProperty(key)) {
                        if ((!Utils.isNaN(a[key]) || !Utils.isNaN(b[key])) && a[key] != b[key]) {
                            return false;
                        }
                    }
                }
            }
            return true;
        };
        Utils.hasScrollbars = function (node) {
            var style = Utils.getCurrentStyle(node);
            return style != null && (style.overflow == "scroll" || style.overflow == "auto");
        };
        Utils.intersects = function (a, b) {
            var tw = a.width;
            var th = a.height;
            var rw = b.width;
            var rh = b.height;
            if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {
                return false;
            }
            var tx = a.x;
            var ty = a.y;
            var rx = b.x;
            var ry = b.y;
            rw += rx;
            rh += ry;
            tw += tx;
            th += ty;
            return ((rw < rx || rw > tx) &&
                (rh < ry || rh > ty) &&
                (tw < tx || tw > rx) &&
                (th < ty || th > ry));
        };
        Utils.intersectsHotspot = function (state, x, y, hotspot, min, max) {
            hotspot = (hotspot != null) ? hotspot : 1;
            min = (min != null) ? min : 0;
            max = (max != null) ? max : 0;
            if (hotspot > 0) {
                var cx = state.getCenterX();
                var cy = state.getCenterY();
                var w = state.width;
                var h = state.height;
                var start = state.style.startSize * state.view.scale;
                if (start > 0) {
                    if (state.style.portrait) {
                        cy = state.y + start / 2;
                        h = start;
                    }
                    else {
                        cx = state.x + start / 2;
                        w = start;
                    }
                }
                w = Math.max(min, w * hotspot);
                h = Math.max(min, h * hotspot);
                if (max > 0) {
                    w = Math.min(w, max);
                    h = Math.min(h, max);
                }
                var rect = new Five.Rectangle(cx - w / 2, cy - h / 2, w, h);
                var alpha = Utils.toRadians(state.style.rotation);
                if (alpha != 0) {
                    var cos = Math.cos(-alpha);
                    var sin = Math.sin(-alpha);
                    var c = new Five.Point(state.getCenterX(), state.getCenterY());
                    var pt = Utils.getRotatedPoint(new Five.Point(x, y), cos, sin, c);
                    x = pt.x;
                    y = pt.y;
                }
                return Utils.contains(rect, x, y);
            }
            return true;
        };
        Utils.findNearestSegment = function (state, x, y) {
            var index = -1;
            if (state.absolutePoints.length > 0) {
                var last = state.absolutePoints[0];
                var min = null;
                for (var i = 1; i < state.absolutePoints.length; i++) {
                    var current = state.absolutePoints[i];
                    var dist = Utils.ptSegDistSq(last.x, last.y, current.x, current.y, x, y);
                    if (min == null || dist < min) {
                        min = dist;
                        index = i - 1;
                    }
                    last = current;
                }
            }
            return index;
        };
        Utils.alert = function (message) {
            alert(message);
        };
        Utils.setStyle = function (style, key, value) {
            var isValue = value != null && (typeof (value.length) == "undefined" || value.length > 0);
            if (style == null || style.length == 0) {
                if (isValue) {
                    style = key + "=" + value;
                }
            }
            else {
                var index = style.indexOf(key + "=");
                if (index < 0) {
                    if (isValue) {
                        var sep = (style.charAt(style.length - 1) == ";") ? "" : ";";
                        style = style + sep + key + "=" + value;
                    }
                }
                else {
                    var tmp = (isValue) ? (key + "=" + value) : "";
                    var cont = style.indexOf(";", index);
                    if (!isValue) {
                        cont++;
                    }
                    style = style.substring(0, index) +
                        tmp +
                        ((cont > index) ? style.substring(cont) : "");
                }
            }
            return style;
        };
        Utils.getSizeForString = function (text, fontSize, fontFamily, maxWidth) {
            fontFamily = fontFamily || Five.Constants.defaultFontFamily;
            var div = document.createElement("div");
            div.style.fontFamily = fontFamily;
            div.style.fontSize = Math.round(fontSize) + "px";
            div.style.lineHeight = Math.round(fontSize * Five.Constants.lineHeight) + "px";
            div.style.position = "absolute";
            div.style.visibility = "hidden";
            div.style.display = (Five.Client.isQuirks) ? "inline" : "inline-block";
            div.style.zoom = "1";
            if (maxWidth > 0) {
                div.style.maxWidth = maxWidth + "px";
                div.style.whiteSpace = "normal";
            }
            else {
                div.style.whiteSpace = "nowrap";
            }
            div.innerHTML = text;
            document.body.appendChild(div);
            var size = new Five.Rectangle(0, 0, div.offsetWidth, div.offsetHeight);
            document.body.removeChild(div);
            return size;
        };
        Utils.clearSelection = function () {
            if (document["selection"]) {
                return function () {
                    document["selection"].empty();
                };
            }
            else if (window.getSelection) {
                return function () {
                    window.getSelection().removeAllRanges();
                };
            }
            else {
                return function () { };
            }
        };
        Utils.setOpacity = function (node, value) {
            var style = Utils.nodeStyle(node);
            if (Five.Client.isIe && !Five.Client.isIe9) {
                if (value >= 100) {
                    style.filter = null;
                }
                else {
                    style.filter = "alpha(opacity=" + value + ")";
                }
            }
            else {
                style.opacity = String(value / 100);
            }
        };
        Utils.button = function (label, onPress, doc) {
            doc = (doc != null) ? doc : document;
            var button = doc.createElement("button");
            Utils.write(button, label);
            Five.Events.addListener(button, "click", function (evt) { onPress(evt); });
            return button;
        };
        Utils.writeln = function (parent, text) {
            var doc = parent.ownerDocument;
            var node = doc.createTextNode(text);
            parent.appendChild(node);
            parent.appendChild(document.createElement('br'));
            return node;
        };
        Utils.br = function (parent, count) {
            if (count === void 0) { count = 1; }
            var br = null;
            for (var i = 0; i < count; i++) {
                if (parent != null) {
                    br = parent.ownerDocument.createElement('br');
                    parent.appendChild(br);
                }
            }
            return br;
        };
        Utils.makeDraggable = function (element, graphF, funct, dragElement, dx, dy, autoscroll, scalePreview, highlightDropTargets, getDropTarget) {
            if (dx === void 0) { dx = 0; }
            if (dy === void 0) { dy = Five.Constants.tooltipVerticalOffset; }
            var dragSource = new Five.DragSource(element, funct);
            dragSource.dragOffset = new Five.Point(dx, dy);
            dragSource.autoscroll = autoscroll;
            dragSource.setGuidesEnabled(false);
            if (highlightDropTargets != null) {
                dragSource.highlightDropTargets = highlightDropTargets;
            }
            if (getDropTarget != null) {
                dragSource.getDropTarget = getDropTarget;
            }
            dragSource.getGraphForEvent = function (evt) { return graphF(evt); };
            if (dragElement != null) {
                dragSource.createDragElement = function () { return dragElement.cloneNode(true); };
                if (scalePreview) {
                    dragSource.createPreviewElement = function (graph) {
                        var elt = dragElement.cloneNode(true);
                        var w = parseInt(elt.style.width);
                        var h = parseInt(elt.style.height);
                        elt.style.width = Math.round(w * graph.view.scale) + 'px';
                        elt.style.height = Math.round(h * graph.view.scale) + 'px';
                        return elt;
                    };
                }
            }
            return dragSource;
        };
        Utils.post = function (url, params, onLoad, onError) {
            return new Five.XmlRequest(url, params).send(onLoad, onError);
        };
        Utils.createXmlDocument = function () {
            var doc = null;
            if (document.implementation && document.implementation.createDocument) {
                doc = document.implementation.createDocument('', '', null);
            }
            return doc;
        };
        Utils.findNodeByAttribute = function (node, attr, value) {
            if (Five.Client.isIe9) {
                var result = null;
                if (node != null) {
                    if (node.nodeType == Five.NodeType.Element && node.getAttribute(attr) == value) {
                        result = node;
                    }
                    else {
                        var child = node.firstChild;
                        while (child != null && result == null) {
                            result = Utils.findNodeByAttribute(child, attr, value);
                            child = child.nextSibling;
                        }
                    }
                }
                return result;
            }
            else if (Five.Client.isIe) {
                if (node == null) {
                    return null;
                }
                else {
                    var expr = '//*[@' + attr + '=\'' + value + '\']';
                    return node.ownerDocument.selectSingleNode(expr);
                }
            }
            else {
                if (node == null) {
                    return null;
                }
                else {
                    var result1 = node.ownerDocument.evaluate('//*[@' + attr + '=\'' + value + '\']', node.ownerDocument, null, 0, null);
                    return result1.iterateNext();
                }
            }
        };
        Utils.importNode = function (doc, node, allChildren) {
            if (Five.Client.isIe && !Five.Client.isIe10) {
                switch (node.nodeType) {
                    case Five.NodeType.Element:
                        {
                            var element = node;
                            var newNode = doc.createElement(element.nodeName);
                            if (element.attributes && element.attributes.length > 0) {
                                var i;
                                for (i = 0; i < element.attributes.length; i++) {
                                    newNode.setAttribute(element.attributes[i].nodeName, element.getAttribute(element.attributes[i].nodeName));
                                }
                                if (allChildren && node.childNodes && node.childNodes.length > 0) {
                                    for (i = 0; i < node.childNodes.length; i++) {
                                        newNode.appendChild(Utils.importNode(doc, node.childNodes[i], allChildren));
                                    }
                                }
                            }
                            return newNode;
                        }
                    case Five.NodeType.Text:
                    case 4:
                    case 8:
                        {
                            return doc.createTextNode(node.nodeValue);
                        }
                }
            }
            else {
                return doc.importNode(node, allChildren);
            }
            return null;
        };
        Utils.load = function (url) {
            var req = new Five.XmlRequest(url, null, 'GET', false);
            req.send();
            return req;
        };
        Utils.removeCursors = function (element) {
            if (Utils.nodeStyle(element) != null) {
                Utils.nodeStyle(element).cursor = '';
            }
            var children = element.childNodes;
            if (children != null) {
                var childCount = children.length;
                for (var i = 0; i < childCount; i += 1) {
                    Utils.removeCursors(children[i]);
                }
            }
        };
        Utils.getOuterHtml = function (node) {
            if (Five.Client.isIe) {
                if (node != null) {
                    if (node.outerHTML != null) {
                        return node.outerHTML;
                    }
                    else {
                        var tmp = [];
                        tmp.push('<' + node.nodeName);
                        var attrs = node.attributes;
                        if (attrs != null) {
                            for (var i = 0; i < attrs.length; i++) {
                                var value = attrs[i].nodeValue;
                                if (value != null && value.length > 0) {
                                    tmp.push(' ');
                                    tmp.push(attrs[i].nodeName);
                                    tmp.push('="');
                                    tmp.push(value);
                                    tmp.push('"');
                                }
                            }
                        }
                        if (node.innerHTML.length == 0) {
                            tmp.push('/>');
                        }
                        else {
                            tmp.push('>');
                            tmp.push(node.innerHTML);
                            tmp.push('</' + node.nodeName + '>');
                        }
                        return tmp.join('');
                    }
                }
                return '';
            }
            else {
                if (node != null) {
                    var serializer = new XMLSerializer();
                    return serializer.serializeToString(node);
                }
                return '';
            }
        };
        Utils.getViewXml = function (graph, scale, cells, x0, y0) {
            if (x0 === void 0) { x0 = 0; }
            if (y0 === void 0) { y0 = 0; }
            x0 = (x0 != null) ? x0 : 0;
            y0 = (y0 != null) ? y0 : 0;
            scale = (scale != null) ? scale : 1;
            if (cells == null) {
                var model = graph.getModel();
                cells = [model.getRoot()];
            }
            var view = graph.getView();
            var result = null;
            var eventsEnabled = view.isEventsEnabled;
            view.isEventsEnabled = false;
            var drawPane = view.drawPane;
            var overlayPane = view.overlayPane;
            if (graph.dialect == Five.Dialect.Svg) {
                view.drawPane = document.createElementNS(Five.Constants.nsSvg, 'g');
                view.canvas.appendChild(view.drawPane);
                view.overlayPane = document.createElementNS(Five.Constants.nsSvg, 'g');
                view.canvas.appendChild(view.overlayPane);
            }
            else {
                view.drawPane = view.drawPane.cloneNode(false);
                view.canvas.appendChild(view.drawPane);
                view.overlayPane = view.overlayPane.cloneNode(false);
                view.canvas.appendChild(view.overlayPane);
            }
            var translate = view.getTranslate();
            view.translate = new Five.Point(x0, y0);
            var temp = new TemporaryCellStates(graph.getView(), scale, cells);
            try {
                var enc = new Five.Codec();
                result = enc.encode(graph.getView());
            }
            finally {
                temp.destroy();
                view.translate = translate;
                view.canvas.removeChild(view.drawPane);
                view.canvas.removeChild(view.overlayPane);
                view.drawPane = drawPane;
                view.overlayPane = overlayPane;
                view.isEventsEnabled = eventsEnabled;
            }
            return result;
        };
        Utils.getXml = function (node, linefeed) {
            var xml = '';
            if (window.XMLSerializer != null) {
                var xmlSerializer = new XMLSerializer();
                xml = xmlSerializer.serializeToString(node);
            }
            else if (node.xml != null) {
                xml = node.xml.replace(/\r\n\t[\t]*/g, '').replace(/>\r\n/g, '>').replace(/\r\n/g, '\n');
            }
            linefeed = linefeed || '&#xa;';
            xml = xml.replace(/\n/g, linefeed);
            return xml;
        };
        Utils.submit = function (url, params, doc, target) {
            return new Five.XmlRequest(url, params).simulate(doc, target);
        };
        Utils.sortCells = function (cells, ascending) {
            ascending = (ascending != null) ? ascending : true;
            var lookup = new Five.Dictionary();
            cells.sort(function (o1, o2) {
                var p1 = lookup.get(o1);
                if (p1 == null) {
                    p1 = Five.CellPath.create(o1).split(Five.CellPath.pathSeparator)[0];
                    lookup.put(o1, p1);
                }
                var p2 = lookup.get(o2);
                if (p2 == null) {
                    p2 = Five.CellPath.create(o2).split(Five.CellPath.pathSeparator)[0];
                    lookup.put(o2, p2);
                }
                var comp = Five.CellPath.compare(p1, p2);
                return (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);
            });
            return cells;
        };
        Utils.prompt = function (message, defaultValue) {
            return prompt(message, (defaultValue != null) ? defaultValue : '');
        };
        Utils.error = function (message, width, close, icon) {
            var div = document.createElement('div');
            div.style.padding = '20px';
            var img = document.createElement('img');
            img.setAttribute('src', icon || Utils.errorImage);
            img.setAttribute('valign', 'bottom');
            img.style.verticalAlign = 'middle';
            div.appendChild(img);
            div.appendChild(document.createTextNode('\u00a0'));
            div.appendChild(document.createTextNode('\u00a0'));
            div.appendChild(document.createTextNode('\u00a0'));
            Utils.write(div, message);
            var w = document.body.clientWidth;
            var h = (document.body.clientHeight || document.documentElement.clientHeight);
            var warn = new Five.Window(Five.Resources.get(Utils.errorResource), div, (w - width) / 2, h / 4, width, null, false, true);
            if (close) {
                Utils.br(div);
                var tmp = document.createElement('p');
                var button = document.createElement('button');
                if (Five.Client.isIe) {
                    button.style.cssText = 'float:right';
                }
                else {
                    button.setAttribute('style', 'float:right');
                }
                Five.Events.addListener(button, 'click', function () { warn.destroy(); });
                Utils.write(button, Five.Resources.get(Utils.closeResource));
                tmp.appendChild(button);
                div.appendChild(tmp);
                Utils.br(div);
                warn.setClosable(true);
            }
            warn.setVisible(true);
            return warn;
        };
        Utils.get = function (url, onload, onerror) {
            return new Five.XmlRequest(url, null, 'GET').send(onload, onerror);
        };
        Utils.pixels = function (value) {
            return "" + Math.floor(value) + "px";
        };
        Utils.mod = function (n, m) { return (((n % m) + m) % m); };
        Utils.prefix = (Five.Client.isOp && Five.Client.isOt)
            ? "O"
            : (Five.Client.isSf || Five.Client.isGc)
                ? "Webkit"
                : (Five.Client.isMt)
                    ? "Moz"
                    : (Five.Client.isIe9 && !Five.Client.isIe10)
                        ? "ms"
                        : null;
        Utils.errorImage = Five.FileStructure.imageBasePath + '/error.gif';
        Utils.errorResource = (Five.Client.language != 'none') ? 'error' : '';
        Utils.closeResource = (Five.Client.language != 'none') ? 'close' : '';
        return Utils;
    }());
    Five.Utils = Utils;
    var TemporaryCellStates = (function () {
        function TemporaryCellStates(view, scale, cells, isCellVisibleFn) {
            var _this = this;
            if (scale === void 0) { scale = 1; }
            this.view = view;
            this.oldValidateCellState = view.validateCellState;
            this.oldBounds = view.getGraphBounds();
            this.oldStates = view.getStates();
            this.oldScale = view.getScale();
            view.validateCellState = function (cell, recurse) {
                if (recurse === void 0) { recurse = true; }
                if (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell)) {
                    return _this.oldValidateCellState.apply(view, [cell, recurse]);
                }
                return null;
            };
            view.setStates(new Five.Dictionary());
            view.setScale(scale);
            if (cells != null) {
                view.resetValidationState();
                var bbox = null;
                for (var i = 0; i < cells.length; i++) {
                    var bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));
                    if (bbox == null) {
                        bbox = bounds;
                    }
                    else {
                        bbox.add(bounds);
                    }
                }
                view.setGraphBounds(bbox || new Five.Rectangle(0, 0));
            }
        }
        TemporaryCellStates.prototype.destroy = function () {
            this.view.setScale(this.oldScale);
            this.view.setStates(this.oldStates);
            this.view.setGraphBounds(this.oldBounds);
            this.view.validateCellState = this.oldValidateCellState;
        };
        return TemporaryCellStates;
    }());
})(Five || (Five = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var Utils = Five.Utils;
    var OverlayState;
    (function (OverlayState) {
        OverlayState[OverlayState["Hidden"] = 0] = "Hidden";
        OverlayState[OverlayState["Dim"] = 1] = "Dim";
        OverlayState[OverlayState["Active"] = 2] = "Active";
    })(OverlayState = CloudDiagram.OverlayState || (CloudDiagram.OverlayState = {}));
    var StackHtmlLayout = (function () {
        function StackHtmlLayout(container) {
            this.list = document.createElement("ul");
            this.list.classList.add("styleselect");
            container.appendChild(this.list);
        }
        StackHtmlLayout.prototype.append = function (widget) {
            var li = document.createElement("li");
            li.appendChild(widget.getRoot());
            this.list.appendChild(li);
        };
        return StackHtmlLayout;
    }());
    function createDockPanelFactory(container) {
        return {
            createOverlay: function (events) { return new Overlay(container, events); }
        };
    }
    CloudDiagram.createDockPanelFactory = createDockPanelFactory;
    var Overlay = (function () {
        function Overlay(container, events) {
            var _this = this;
            this.events = events;
            this.window = document.createElement("div");
            this.window.classList.add("overlay");
            this.window.classList.add("dropdown-menu");
            this.window.classList.add("context-panel");
            this.window.style.minHeight = "300px";
            this.window.style.visibility = "visible";
            this.closePanel = document.createElement("div");
            this.closePanel.classList.add("panel-close");
            this.closeButton = this.createIcon("close");
            this.closePanel.appendChild(this.closeButton);
            this.closeButton.addEventListener("click", function () { return _this.onClose(); });
            this.window.appendChild(this.closePanel);
            container.appendChild(this.window);
        }
        Overlay.prototype.onClose = function () {
            this.events.onCloseClick();
        };
        Overlay.prototype.createIcon = function (iconId) {
            var svg = document.createElementNS(Five.Constants.nsSvg, "svg");
            svg.width.baseVal.valueAsString = "13";
            svg.height.baseVal.valueAsString = "13";
            svg.setAttribute("viewBox", "0 0 32 32");
            var g = document.createElementNS(Five.Constants.nsSvg, "g");
            g.setAttribute("filter", "");
            var use = document.createElementNS(Five.Constants.nsSvg, "use");
            use.setAttributeNS(Five.Constants.nsXlink, "xlink:href", "#" + iconId);
            g.appendChild(use);
            svg.appendChild(g);
            return svg;
        };
        Overlay.prototype.moveTo = function (position) {
            this.window.style.left = Utils.pixels(position.x);
            this.window.style.top = Utils.pixels(position.y);
        };
        Overlay.prototype.stackLayout = function () {
            return new StackHtmlLayout(this.window);
        };
        Overlay.prototype.setState = function (state) {
            switch (state) {
                case OverlayState.Hidden:
                    this.window.classList.remove("open");
                    break;
                case OverlayState.Dim:
                default:
                    this.window.classList.add("open");
                    this.window.classList.add("dim");
                    break;
                case OverlayState.Active:
                    this.window.classList.add("open");
                    this.window.classList.remove("dim");
                    break;
            }
        };
        return Overlay;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var Client = Five.Client;
    function createTreeWidget(container, events, model) {
        return new TreeWidget(container, events, model);
    }
    CloudDiagram.createTreeWidget = createTreeWidget;
    var TreeWidget = (function () {
        function TreeWidget(container, events, model) {
            this.currentSelection = null;
            this.events = events;
            this.container = container;
            var rootList = this.injectRoot();
            this.appendChildren(rootList, model.roots);
        }
        TreeWidget.prototype.injectRoot = function () {
            var treeDiv = document.createElement("div");
            treeDiv.classList.add("tree");
            treeDiv.classList.add("well");
            var rootList = document.createElement("ul");
            treeDiv.appendChild(rootList);
            this.container.appendChild(treeDiv);
            return rootList;
        };
        TreeWidget.prototype.toggleFolderCollapsed = function (e) {
            var view = this.view;
            var children = view.children;
            var span = view.text;
            var icon = view.icon;
            if ($(children).is(":visible")) {
                $(children).hide("fast");
                $(span).attr("title", "Expand this branch");
                icon.classList.add(TreeWidget.closedFolderIcon);
                icon.classList.remove(TreeWidget.openedFolderIcon);
            }
            else {
                $(children).show("fast");
                $(span).attr("title", "Collapse this branch");
                icon.classList.remove(TreeWidget.closedFolderIcon);
                icon.classList.add(TreeWidget.openedFolderIcon);
            }
            e.stopPropagation();
        };
        TreeWidget.prototype.onLeafClick = function (view, e) {
            var _this = this;
            var showSelected = function (selected) {
                var classList = _this.currentSelection.text.classList;
                if (selected) {
                    classList.add("list-group-item");
                    classList.add("active");
                }
                else {
                    classList.remove("active");
                    classList.remove("list-group-item");
                }
            };
            if (this.currentSelection) {
                showSelected(false);
                this.currentSelection = null;
            }
            view.events.onLeafSelected(view.id);
            this.currentSelection = view;
            showSelected(true);
            e.stopPropagation();
        };
        TreeWidget.prototype.createView = function (node) {
            var _this = this;
            var result = {
                root: null,
                text: null,
                icon: null,
                children: null,
                events: this.events,
                id: node.id
            };
            result.icon = document.createElement("i");
            result.icon.classList.add("glyphicon");
            if (node.folder)
                result.icon.classList.add(TreeWidget.closedFolderIcon);
            result.icon.style.paddingRight = "4px";
            result.text = document.createElement("span");
            result.text.textContent = node.name;
            result.text.insertBefore(result.icon, null);
            if (Client.isFf)
                result.text.insertBefore(result.icon, null);
            else
                result.text.insertAdjacentElement("afterbegin", result.icon);
            result.root = document.createElement("li");
            result.root.appendChild(result.text);
            if (node.folder) {
                result.children = document.createElement("ul");
                result.children.style.display = "none";
                this.appendChildren(result.children, node.children);
                result.root.appendChild(result.children);
            }
            if (node.folder)
                result.root.onclick = this.toggleFolderCollapsed;
            else
                result.root.onclick = function (e) { return _this.onLeafClick(result, e); };
            result.root.view = result;
            return result;
        };
        TreeWidget.prototype.appendChildren = function (treeview, treedata) {
            var _this = this;
            treedata.forEach(function (node) {
                var view = _this.createView(node);
                treeview.appendChild(view.root);
            });
        };
        TreeWidget.closedFolderIcon = "glyphicon-chevron-right";
        TreeWidget.openedFolderIcon = "glyphicon-chevron-down";
        return TreeWidget;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var Five;
(function (Five) {
    var AbstractCanvas2D = (function () {
        function AbstractCanvas2D() {
            this.state = null;
            this.states = [];
            this.rotateHtml = true;
            this.lastX = 0;
            this.lastY = 0;
            this.moveOp = "M";
            this.lineOp = "L";
            this.quadOp = "Q";
            this.curveOp = "C";
            this.closeOp = "Z";
            this.pointerEvents = false;
            this.path = null;
            this.converter = this.createUrlConverter();
            this.reset();
        }
        AbstractCanvas2D.prototype.createUrlConverter = function () {
            return new Five.UrlConverter();
        };
        AbstractCanvas2D.prototype.reset = function () {
            this.state = new Five.CanvasState();
            this.states = [];
        };
        AbstractCanvas2D.prototype.scale = function (value) {
            this.state.scale *= value;
            this.state.strokeWidth *= value;
        };
        AbstractCanvas2D.prototype.setStrokeColor = function (value) {
            if (value == Five.Constants.none) {
                value = null;
            }
            this.state.strokeColor = value;
        };
        AbstractCanvas2D.prototype.setDashed = function (value) {
            this.state.dashed = value;
        };
        AbstractCanvas2D.prototype.setFillColor = function (value) {
            if (value == Five.Constants.none) {
                value = null;
            }
            this.state.fillColor = value;
            this.state.gradientColor = null;
        };
        AbstractCanvas2D.prototype.setGradient = function (color1, color2, x, y, w, h, direction, alpha1, alpha2) {
            if (alpha1 === void 0) { alpha1 = null; }
            if (alpha2 === void 0) { alpha2 = null; }
            var s = this.state;
            s.fillColor = color1;
            s.fillAlpha = (alpha1 != null) ? alpha1 : 1;
            s.gradientColor = color2;
            s.gradientAlpha = (alpha2 != null) ? alpha2 : 1;
            s.gradientDirection = direction;
        };
        AbstractCanvas2D.prototype.rotate = function (theta, flipH, flipV, cx, cy) {
            if (theta != 0 || flipH || flipV) {
                var s = this.state;
                cx += s.dx;
                cy += s.dy;
                cx *= s.scale;
                cy *= s.scale;
                s.transform = s.transform || "";
                if (flipH && flipV) {
                    theta += 180;
                }
                else if (flipH || flipV) {
                    var tx = (flipH) ? cx : 0;
                    var sx = (flipH) ? -1 : 1;
                    var ty = (flipV) ? cy : 0;
                    var sy = (flipV) ? -1 : 1;
                    s.transform += "translate(" + this.format1(tx) + "," + this.format1(ty) + ")" +
                        "scale(" + this.format1(sx) + "," + this.format1(sy) + ")" +
                        "translate(" + this.format1(-tx) + "," + this.format1(-ty) + ")";
                }
                if (flipH ? !flipV : flipV) {
                    theta *= -1;
                }
                if (theta != 0) {
                    s.transform += "rotate(" + this.format1(theta) + "," + this.format1(cx) + "," + this.format1(cy) + ")";
                }
                s.rotation = s.rotation + theta;
                s.rotationCx = cx;
                s.rotationCy = cy;
            }
        };
        AbstractCanvas2D.prototype.rotatePoint = function (x, y, theta, cx, cy) {
            var rad = theta * (Math.PI / 180);
            return Five.Utils.getRotatedPoint(new Five.Point(x, y), Math.cos(rad), Math.sin(rad), new Five.Point(cx, cy));
        };
        AbstractCanvas2D.prototype.setAlpha = function (value) {
            this.state.alpha = value;
        };
        AbstractCanvas2D.prototype.setStrokeWidth = function (value) {
            this.state.strokeWidth = value;
        };
        AbstractCanvas2D.prototype.format = function (value) {
            return Math.round(parseFloat(value));
        };
        AbstractCanvas2D.prototype.format1 = function (value) {
            return Math.round(value);
        };
        AbstractCanvas2D.prototype.setShadow = function (enabled) {
            this.state.shadow = enabled;
        };
        AbstractCanvas2D.prototype.setDashPattern = function (value) {
            this.state.dashPattern = value;
        };
        AbstractCanvas2D.prototype.save = function () {
            this.states.push(this.state);
            this.state = Five.Utils.clone(this.state);
        };
        AbstractCanvas2D.prototype.restore = function () {
            this.state = this.states.pop();
        };
        AbstractCanvas2D.prototype.begin = function () {
            this.lastX = 0;
            this.lastY = 0;
            this.path = [];
        };
        AbstractCanvas2D.prototype.close = function () {
            this.addOp(this.closeOp);
        };
        AbstractCanvas2D.prototype.addOp = function (op) {
            var numbers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                numbers[_i - 1] = arguments[_i];
            }
            if (this.path != null) {
                this.path.push(op);
                if (numbers.length > 1) {
                    var s = this.state;
                    for (var i = 0; i < numbers.length; i += 2) {
                        this.lastX = numbers[i];
                        this.lastY = numbers[i + 1];
                        this.path.push(this.format1((this.lastX + s.dx) * s.scale));
                        this.path.push(this.format1((this.lastY + s.dy) * s.scale));
                    }
                }
            }
        };
        AbstractCanvas2D.prototype.moveTo = function (x, y) {
            this.addOp(this.moveOp, x, y);
        };
        AbstractCanvas2D.prototype.lineTo = function (x, y) {
            this.addOp(this.lineOp, x, y);
        };
        AbstractCanvas2D.prototype.quadTo = function (x1, y1, x2, y2) {
            this.addOp(this.quadOp, x1, y1, x2, y2);
        };
        AbstractCanvas2D.prototype.curveTo = function (x1, y1, x2, y2, x3, y3) {
            this.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);
        };
        AbstractCanvas2D.prototype.arcTo = function (rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
            var curves = Five.Utils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);
            if (curves != null) {
                for (var i = 0; i < curves.length; i += 6) {
                    this.curveTo(curves[i], curves[i + 1], curves[i + 2], curves[i + 3], curves[i + 4], curves[i + 5]);
                }
            }
        };
        AbstractCanvas2D.prototype.rect = function (x, y, w, h) { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.roundrect = function (x, y, w, h, dx, dy) { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.ellipse = function (x, y, w, h) { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.image = function (x, y, w, h, src, aspect, flipH, flipV) { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.text = function (x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation) { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.fillAndStroke = function () { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.fill = function () { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.stroke = function () { throw new Error("Not implemented"); };
        AbstractCanvas2D.prototype.setLineCap = function (value) {
            this.state.lineCap = value;
        };
        AbstractCanvas2D.prototype.setLineJoin = function (value) {
            this.state.lineJoin = value;
        };
        AbstractCanvas2D.prototype.setMiterLimit = function (value) {
            this.state.miterLimit = value;
        };
        AbstractCanvas2D.prototype.setFontColor = function (value) {
            if (value == Five.Constants.none) {
                value = null;
            }
            this.state.fontColor = value;
        };
        AbstractCanvas2D.prototype.setFontStyle = function (value) {
            if (value == null) {
                value = 0;
            }
            this.state.fontStyle = value;
        };
        AbstractCanvas2D.prototype.setFontFamily = function (value) {
            this.state.fontFamily = value;
        };
        AbstractCanvas2D.prototype.setFontSize = function (value) {
            if (value == null) {
                value = 0;
            }
            this.state.fontStyle = value;
        };
        AbstractCanvas2D.prototype.setFontBackgroundColor = function (value) {
            if (value == Five.Constants.none) {
                value = null;
            }
            this.state.fontBackgroundColor = value;
        };
        AbstractCanvas2D.prototype.setFontBorderColor = function (value) {
            if (value == Five.Constants.none) {
                value = null;
            }
            this.state.fontBorderColor = value;
        };
        AbstractCanvas2D.prototype.translate = function (dx, dy) {
            this.state.dx += dx;
            this.state.dy += dy;
        };
        return AbstractCanvas2D;
    }());
    Five.AbstractCanvas2D = AbstractCanvas2D;
})(Five || (Five = {}));
var Five;
(function (Five) {
    function ElementInitializer(container) {
        return {
            isSvg: function () { return (container.ownerSVGElement != null); },
            addShape: function (shape) {
                container.appendChild(shape);
            }
        };
    }
    Five.ElementInitializer = ElementInitializer;
    var Shape = (function () {
        function Shape(stencil) {
            this.className = "shape";
            this.strokeWidth = 1;
            this.rotation = 0;
            this.node = null;
            this.visible = true;
            this.boundingBox = null;
            this.style = null;
            this.scale = 1;
            this.pointerEvents = true;
            this.stencil = null;
            this.svgStrokeTolerance = 8;
            this.outline = false;
            this.direction = null;
            this._shapePointerEvents = false;
            this._stencilPointerEvents = false;
            this._dialect = null;
            this.flipH = false;
            this.flipV = false;
            this.strokewidth = 1;
            this.stroke = null;
            this.isDashed = null;
            this.isRounded = null;
            this.glass = null;
            this.isShadow = null;
            this.gradient = null;
            this.fill = null;
            this.svgPointerEvents = "all";
            this.stencil = stencil;
            this.strokewidth = 1;
            this.rotation = 0;
            this.opacity = 100;
            this.flipH = false;
            this.flipV = false;
        }
        Object.defineProperty(Shape.prototype, "points", {
            get: function () { return this._points; },
            set: function (value) {
                if (value)
                    for (var i = 0; i < value.length; i++)
                        value[i].check();
                this._points = value;
            },
            enumerable: true,
            configurable: true
        });
        Shape.prototype.nodeStyle = function () {
            return this.node.style;
        };
        Object.defineProperty(Shape.prototype, "dialect", {
            set: function (value) {
                this._dialect = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shape.prototype, "bounds", {
            get: function () {
                return this._bounds;
            },
            set: function (value) {
                this._bounds = value;
            },
            enumerable: true,
            configurable: true
        });
        Shape.prototype.redraw = function () {
            this.updateBoundsFromPoints();
            if (this.visible && this.checkBounds()) {
                this.nodeStyle().visibility = "visible";
                this.clear();
                if (this.node.nodeName == "DIV" && (this.isHtmlAllowed() || !Five.Client.isVml)) {
                    this.redrawHtmlShape();
                }
                else {
                    this.redrawShape();
                }
                this.updateBoundingBox();
            }
            else {
                this.nodeStyle().visibility = "hidden";
                this.boundingBox = null;
            }
        };
        Shape.prototype.checkBounds = function () {
            return (this.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&
                !isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&
                this.bounds.width > 0 && this.bounds.height > 0);
        };
        Shape.prototype.updateBoundsFromPoints = function () {
            var pts = this.points;
            if (pts != null && pts.length > 0 && pts[0] != null) {
                this.bounds = new Five.Rectangle(pts[0].x, pts[0].y, 1, 1);
                for (var i = 1; i < this.points.length; i++) {
                    if (pts[i] != null) {
                        this.bounds.add(new Five.Rectangle(pts[i].x, pts[i].y, 1, 1));
                    }
                }
            }
        };
        Shape.prototype.redrawShape = function () {
            var canvas = this.createCanvas();
            if (canvas != null) {
                canvas.pointerEvents = this.pointerEvents;
                this.paint(canvas);
                this.destroyCanvas(canvas);
            }
        };
        Shape.prototype.isPaintBoundsInverted = function () {
            return this.stencil == null && (this.direction == Five.Direction.North || this.direction == Five.Direction.South);
        };
        Shape.prototype.paint = function (c) {
            var s = this.scale;
            var x = this.bounds.x / s;
            var y = this.bounds.y / s;
            var w = this.bounds.width / s;
            var h = this.bounds.height / s;
            if (this.isPaintBoundsInverted()) {
                var t = (w - h) / 2;
                x += t;
                y -= t;
                var tmp = w;
                w = h;
                h = tmp;
            }
            this.updateTransform(c, x, y, w, h);
            this.configureCanvas(c, x, y, w, h);
            var bg = null;
            if ((this.stencil == null && this.points == null && this._shapePointerEvents) ||
                (this.stencil != null && this._stencilPointerEvents)) {
                var bb = this.createBoundingBox();
                if (this.dialect == Five.Dialect.Svg) {
                    bg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);
                    this.node.appendChild(bg);
                }
            }
            if (this.stencil != null) {
                this.stencil.drawShape(c, this, x, y, w, h);
            }
            else {
                c.setStrokeWidth(this.strokeWidth);
                if (this.points != null) {
                    var pts = [];
                    for (var i = 0; i < this.points.length; i++) {
                        if (this.points[i] != null) {
                            pts.push(new Five.Point(this.points[i].x / s, this.points[i].y / s));
                        }
                    }
                    this.paintEdgeShape(c, pts);
                }
                else {
                    this.paintVertexShape(c, x, y, w, h);
                }
            }
            if (bg != null && c.state != null && c.state.transform != null) {
                bg.setAttribute("transform", c.state.transform);
            }
        };
        Shape.prototype.updateTransform = function (c, x, y, w, h) {
            c.scale(this.scale);
            c.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);
        };
        Shape.prototype.paintEdgeShape = function (c, pts) { };
        Shape.prototype.paintBackground = function (c, x, y, w, h) { };
        Shape.prototype.paintForeground = function (c, x, y, w, h) { };
        Shape.prototype.paintVertexShape = function (c, x, y, w, h) {
            this.paintBackground(c, x, y, w, h);
            c.setShadow(false);
            this.paintForeground(c, x, y, w, h);
        };
        Shape.prototype.createCanvas = function () {
            var canvas = this.createSvgCanvas();
            if (this.outline) {
                canvas.setStrokeWidth(this.strokewidth);
                canvas.setStrokeColor(this.stroke);
                if (this.isDashed != null) {
                    canvas.setDashed(this.isDashed);
                }
                canvas.setStrokeWidth = function () { };
                canvas.setStrokeColor = function () { };
                canvas.setFillColor = function () { };
                canvas.setGradient = function () { };
                canvas.setDashed = function () { };
            }
            return canvas;
        };
        Shape.prototype.configureCanvas = function (c, x, y, w, h) {
            var dash = null;
            if (this.style != null) {
                dash = this.style["dashPattern"];
            }
            c.setAlpha(this.opacity / 100);
            if (this.isShadow != null) {
                c.setShadow(this.isShadow);
            }
            if (this.isDashed != null) {
                c.setDashed(this.isDashed);
            }
            if (dash != null) {
                c.setDashPattern(dash);
            }
            if (this.gradient != null) {
                var b = this.getGradientBounds(c, x, y, w, h);
                c.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);
            }
            else {
                c.setFillColor(this.fill);
            }
            c.setStrokeColor(this.stroke);
        };
        Shape.prototype.createSvgCanvas = function () {
            var svgElement = this.node;
            var canvas = new Five.SvgCanvas2D(svgElement, false);
            canvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;
            canvas.pointerEventsValue = this.svgPointerEvents;
            canvas.blockImagePointerEvents = Five.Client.isFf;
            var off = this.getSvgScreenOffset();
            if (off != 0) {
                svgElement.setAttribute("transform", "translate(" + off + "," + off + ")");
            }
            else {
                this.node.removeAttribute("transform");
            }
            return canvas;
        };
        Shape.prototype.createBoundingBox = function () {
            var bb = Five.Utils.clone(this.bounds);
            if ((this.stencil != null && (this.direction === Five.Direction.North ||
                this.direction === Five.Direction.South)) || this.isPaintBoundsInverted()) {
                var t = (bb.width - bb.height) / 2;
                bb.x += t;
                bb.y -= t;
                var tmp = bb.width;
                bb.width = bb.height;
                bb.height = tmp;
            }
            return bb;
        };
        Shape.prototype.updateBoundingBox = function () {
            if (this.bounds != null) {
                var bbox = this.createBoundingBox();
                if (bbox != null) {
                    this.augmentBoundingBox(bbox);
                    var rot = this.getShapeRotation();
                    if (rot != 0) {
                        bbox = Five.Utils.getBoundingBox(bbox, rot);
                    }
                }
                this.boundingBox = bbox;
            }
        };
        Shape.prototype.createTransparentSvgRectangle = function (x, y, w, h) {
            var rect = document.createElementNS(Five.Constants.nsSvg, "rect");
            rect.setAttribute("x", "" + x);
            rect.setAttribute("y", "" + y);
            rect.setAttribute("width", "" + w);
            rect.setAttribute("height", "" + h);
            rect.setAttribute("fill", "none");
            rect.setAttribute("stroke", "none");
            rect.setAttribute("pointer-events", "all");
            return rect;
        };
        Shape.prototype.getShapeRotation = function () {
            var rot = this.getRotation();
            if (this.direction != null) {
                if (this.direction == Five.Direction.North) {
                    rot += 270;
                }
                else if (this.direction == Five.Direction.West) {
                    rot += 180;
                }
                else if (this.direction == Five.Direction.South) {
                    rot += 90;
                }
            }
            return rot;
        };
        Shape.prototype.getRotation = function () {
            return (this.rotation != null) ? this.rotation : 0;
        };
        Shape.prototype.releaseSvgGradients = function (grads) {
            if (grads != null) {
                for (var i = 0; i < grads.length; i++) {
                    var gradient = grads[i];
                    var obj = gradient;
                    obj.RefCount = (obj.RefCount || 0) - 1;
                    if (obj.RefCount == 0 && gradient.parentNode != null) {
                        gradient.parentNode.removeChild(gradient);
                    }
                }
            }
        };
        Shape.prototype.getGradientBounds = function (c, x, y, w, h) {
            return new Five.Rectangle(x, y, w, h);
        };
        Shape.prototype.getSvgScreenOffset = function () {
            var sw = this.stencil && this.stencil.strokewidth != null ? Number(this.stencil.strokewidth) : this.strokewidth;
            return (Five.Utils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;
        };
        Shape.prototype.augmentBoundingBox = function (bbox) {
            if (this.isShadow) {
                bbox.width += Math.ceil(Five.Constants.shadowOffsetX * this.scale);
                bbox.height += Math.ceil(Five.Constants.shadowOffsetY * this.scale);
            }
            bbox.grow(this.strokewidth * this.scale / 2);
        };
        Shape.prototype.init = function (initializer) {
            if (this.node == null) {
                this.node = this.create(initializer);
                if (initializer != null) {
                    initializer.addShape(this.node);
                }
            }
        };
        Shape.prototype.isHtmlAllowed = function () {
            return false;
        };
        Shape.prototype.create = function (initializer) {
            var node;
            if (initializer != null && initializer.isSvg()) {
                node = this.createGElement();
            }
            else
                node = this.createDiv();
            return node;
        };
        Shape.prototype.createGElement = function () {
            var result = document.createElementNS(Five.Constants.nsSvg, "g");
            result.id = this.className + "#" + Five.ObjectIdentity.nodeCounter++;
            return result;
        };
        Shape.prototype.createDiv = function () {
            var node = document.createElement("div");
            node.style.position = "absolute";
            return node;
        };
        Shape.prototype.reconfigure = function () {
            this.redraw();
        };
        Shape.prototype.clear = function () {
            if (this.node instanceof SVGElement) {
                while (this.node.lastChild != null) {
                    this.node.removeChild(this.node.lastChild);
                }
            }
            else {
                var htmlElement = this.node;
                htmlElement.style.cssText = "position:absolute;";
                htmlElement.innerHTML = "";
            }
        };
        Shape.prototype.getLabelBounds = function (rect) {
            return rect;
        };
        Shape.prototype.redrawHtmlShape = function () {
            this.updateHtmlBounds(this.node);
            this.updateHtmlFilters(this.node);
            this.updateHtmlColors(this.node);
        };
        Shape.prototype.updateHtmlFilters = function (node) {
            var f = "";
            if (this.opacity < 100) {
                f += "alpha(opacity=" + (this.opacity) + ")";
            }
            if (this.isShadow) {
                f += "progid:DXImageTransform.Microsoft.dropShadow (" +
                    "OffX='" + Math.round(Five.Constants.shadowOffsetX * this.scale) + "', " +
                    "OffY='" + Math.round(Five.Constants.shadowOffsetY * this.scale) + "', " +
                    "Color='" + Five.Constants.shadowColor + "')";
            }
            if (this.gradient) {
                var start = this.fill;
                var end = this.gradient;
                var type = "0";
                var lookup = { east: 0, south: 1, west: 2, north: 3 };
                var dir = (this.direction != null) ? lookup[this.direction] : 0;
                if (this.gradientDirection != null) {
                    dir = Five.Utils.mod(dir + lookup[this.gradientDirection] - 1, 4);
                }
                var tmp;
                if (dir == 1) {
                    type = "1";
                    tmp = start;
                    start = end;
                    end = tmp;
                }
                else if (dir == 2) {
                    tmp = start;
                    start = end;
                    end = tmp;
                }
                else if (dir == 3) {
                    type = "1";
                }
                f += "progid:DXImageTransform.Microsoft.gradient(" +
                    "startColorStr='" + start + "', endColorStr='" + end +
                    "', gradientType='" + type + "')";
            }
            node.style.filter = f;
        };
        Shape.prototype.updateHtmlColors = function (node) {
            var color = this.stroke;
            if (color != null && color != Five.Constants.none) {
                node.style.borderColor = color;
                if (this.isDashed) {
                    node.style.borderStyle = "dashed";
                }
                else if (this.strokewidth > 0) {
                    node.style.borderStyle = "solid";
                }
                node.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + "px";
            }
            else {
                node.style.borderWidth = "0px";
            }
            color = this.fill;
            if (color != null && color != Five.Constants.none) {
                node.style.backgroundColor = color;
                node.style.backgroundImage = "none";
            }
            else if (this.pointerEvents) {
                node.style.backgroundColor = "transparent";
            }
            else {
                this.setTransparentBackgroundImage(node);
            }
        };
        Shape.prototype.updateHtmlBounds = function (node) {
            var sw = (Five.Client.isIe9) ? 0 : Math.ceil(this.strokewidth * this.scale);
            node.style.borderWidth = Math.max(1, sw) + "px";
            node.style.overflow = "hidden";
            node.style.left = Math.round(this.bounds.x - sw / 2) + "px";
            node.style.top = Math.round(this.bounds.y - sw / 2) + "px";
            if (document.compatMode == "CSS1Compat") {
                sw = -sw;
            }
            node.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + "px";
            node.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + "px";
        };
        Shape.prototype.destroyCanvas = function (canvas) {
            if (canvas instanceof Five.SvgCanvas2D) {
                var gradients = canvas.gradients;
                for (var i = 0; i < gradients.length; i++) {
                    var gradient = canvas.gradients[i];
                    gradient.mxRefCount = (gradient.mxRefCount || 0) + 1;
                }
                this.releaseSvgGradients(this.oldGradients);
                this.oldGradients = canvas.gradients;
            }
        };
        Shape.prototype.getArcSize = function (w, h) {
            var f = (this.style.arcSize || Five.Constants.rectangleRoundingFactor * 100) / 100;
            return Math.min(w * f, h * f);
        };
        Shape.prototype.paintGlassEffect = function (c, x, y, w, h, arc) {
            var sw = Math.ceil(this.strokewidth / 2);
            var size = 0.4;
            c.setGradient("#ffffff", "#ffffff", x, y, w, h * 0.6, Five.Direction.South, 0.9, 0.1);
            c.begin();
            arc += 2 * sw;
            if (this.isRounded) {
                c.moveTo(x - sw + arc, y - sw);
                c.quadTo(x - sw, y - sw, x - sw, y - sw + arc);
                c.lineTo(x - sw, y + h * size);
                c.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);
                c.lineTo(x + w + sw, y - sw + arc);
                c.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);
            }
            else {
                c.moveTo(x - sw, y - sw);
                c.lineTo(x - sw, y + h * size);
                c.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);
                c.lineTo(x + w + sw, y - sw);
            }
            c.close();
            c.fill();
        };
        Shape.prototype.apply = function (state) {
            this.state = state;
            this.style = state.style;
            if (this.style != null) {
                this.fill = this.style.fillColor || this.fill;
                this.gradient = this.style.gradientColor || this.gradient;
                this.gradientDirection = this.style.gradientDirection || this.gradientDirection;
                this.opacity = this.style.opacity || this.opacity;
                this.stroke = this.style.strokeColor || this.stroke;
                this.strokewidth = this.style.strokeWidth || this.strokewidth;
                this.arrowStrokewidth = this.style.strokeWidth || this.strokewidth;
                this.spacing = this.style.spacing || this.spacing;
                this.startSize = this.style.startSize || this.startSize;
                this.endSize = this.style.endSize || this.endSize;
                this.startArrow = this.style.startArrow || this.startArrow;
                this.endArrow = this.style.endArrow || this.endArrow;
                this.rotation = this.style.rotation || this.rotation;
                this.direction = this.style.direction || this.direction;
                this.flipH = this.style.flipH;
                this.flipV = this.style.flipV;
                if (this.direction == Five.Direction.North || this.direction == Five.Direction.South) {
                    var tmp = this.flipH;
                    this.flipH = this.flipV;
                    this.flipV = tmp;
                }
                this.isShadow = this.style.shadow || this.isShadow;
                this.isDashed = this.style.dashed || this.isDashed;
                this.isRounded = this.style.rounded || this.isRounded;
                this.glass = this.style.glass || this.glass;
                if (this.fill == "none") {
                    this.fill = null;
                }
                if (this.gradient == "none") {
                    this.gradient = null;
                }
                if (this.stroke == "none") {
                    this.stroke = null;
                }
            }
        };
        Shape.prototype.setCursor = function (cursor) {
            if (cursor == null) {
                cursor = "";
            }
            this.cursor = cursor;
            if (this.node != null) {
                this.nodeStyle().cursor = cursor;
            }
        };
        Shape.prototype.getCursor = function () {
            return this.cursor;
        };
        Shape.prototype.getTextRotation = function () {
            var rot = this.getRotation();
            if (this.style.portrait) {
                rot += Five.TextShape.verticalTextRotation;
            }
            return rot;
        };
        Shape.prototype.setTransparentBackgroundImage = function (node) {
            node.style.backgroundImage = "url('" + Five.FileStructure.imageBasePath + "/transparent.gif')";
        };
        Shape.prototype.destroy = function () {
            if (this.node != null) {
                Five.Events.release(this.node);
                if (this.node.parentNode != null) {
                    this.node.parentNode.removeChild(this.node);
                }
                this.node = null;
            }
            this.releaseSvgGradients(this.oldGradients);
            this.oldGradients = null;
        };
        return Shape;
    }());
    Five.Shape = Shape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ActorShape = (function (_super) {
        __extends(ActorShape, _super);
        function ActorShape(bounds, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            return _this;
        }
        ActorShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            c.translate(x, y);
            c.begin();
            this.redrawPath(c, x, y, w, h);
            c.fillAndStroke();
        };
        ActorShape.prototype.redrawPath = function (c, x, y, w, h) {
            var width = w / 3;
            c.moveTo(0, h);
            c.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);
            c.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);
            c.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);
            c.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);
            c.close();
        };
        ActorShape.factory = function () { return new ActorShape(null, null, null, 0); };
        return ActorShape;
    }(Five.Shape));
    Five.ActorShape = ActorShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var BasicEvent = (function () {
        function BasicEvent() {
            this.consumed_ = false;
        }
        BasicEvent.prototype.consume = function () {
            this.consumed_ = true;
        };
        BasicEvent.prototype.isConsumed = function () {
            return this.consumed_;
        };
        return BasicEvent;
    }());
    Five.BasicEvent = BasicEvent;
    var EventListeners = (function () {
        function EventListeners() {
            this.listeners_ = [];
        }
        Object.defineProperty(EventListeners.prototype, "disabled", {
            set: function (value) { this.disabled_ = value; },
            enumerable: true,
            configurable: true
        });
        EventListeners.prototype.add = function (listener) {
            this.remove(listener);
            this.listeners_.push(listener);
        };
        EventListeners.prototype.remove = function (listener) {
            var i = 0;
            while (i < this.listeners_.length) {
                if (this.listeners_[i] === listener) {
                    this.listeners_.splice(i, 1);
                }
                else {
                    i++;
                }
            }
        };
        EventListeners.prototype.fire = function (event) {
            if (!this.disabled_) {
                this.listeners_.forEach(function (l) { return l(event); });
            }
        };
        return EventListeners;
    }());
    Five.EventListeners = EventListeners;
    var Events = (function () {
        function Events() {
        }
        Events.addListener = function (element, eventName, funct) {
            element.addEventListener(eventName, funct, false);
            Events.updateListenerList(element, eventName, funct);
        };
        Events.updateListener = function (element, eventName, funct) {
            var listeners = element.listenerList;
            if (listeners != null) {
                var listenerCount = listeners.length;
                for (var i = 0; i < listenerCount; i++) {
                    var entry = listeners[i];
                    if (entry.f == funct) {
                        listeners.splice(i, 1);
                        break;
                    }
                }
                if (listeners.length == 0) {
                    element.listenerList = null;
                    var idx = Five.Utils.indexOf(Events.objects, element);
                    if (idx >= 0) {
                        Events.objects.splice(idx, 1);
                    }
                }
            }
        };
        Events.removeListener = function (element, eventName, funct) {
            element.removeEventListener(eventName, funct, false);
            Events.updateListener(element, eventName, funct);
        };
        Events.disableContextMenu = function (element) {
            element.setAttribute("oncontextmenu", "return false;");
        };
        Events.isConsumed = function (evt) {
            return evt.isConsumed != null && evt.isConsumed;
        };
        Events.consume = function (evt, preventDefault, stopPropagation) {
            preventDefault = (preventDefault != null) ? preventDefault : true;
            stopPropagation = (stopPropagation != null) ? stopPropagation : true;
            if (preventDefault) {
                if (evt.preventDefault) {
                    if (stopPropagation) {
                        evt.stopPropagation();
                    }
                    evt.preventDefault();
                }
                else if (stopPropagation) {
                    evt.cancelBubble = true;
                }
            }
            evt.isConsumed = true;
            if (!evt.preventDefault) {
                evt.returnValue = false;
            }
        };
        Events.isControlDown = function (event) {
            return (event != null) ? event.ctrlKey : false;
        };
        Events.isMouseControlDown = function (event) {
            return (event != null) ? event.ctrlKey : false;
        };
        Events.isShiftDown = function (event) {
            return (event != null) ? event.shiftKey : false;
        };
        Events.isMouseShiftDown = function (event) {
            return (event != null) ? event.shiftKey : false;
        };
        Events.isMetaDown = function (event) {
            return (event != null) ? event.metaKey : false;
        };
        Events.isMouseMetaDown = function (event) {
            return (event != null) ? event.metaKey : false;
        };
        Events.isAltDown = function (event) {
            return (event != null) ? event.altKey : false;
        };
        Events.isMouseAltDown = function (event) {
            return (event != null) ? event.altKey : false;
        };
        Events.getSource = function (event) {
            return (event.srcElement != null) ? event.srcElement : event.target;
        };
        Events.addGestureListeners = function (node, startListener, moveListener, endListener) {
            if (startListener != null) {
                Events.addListener(node, (Five.Client.isPointer) ? "MSPointerDown" : "mousedown", startListener);
            }
            if (moveListener != null) {
                Events.addListener(node, (Five.Client.isPointer) ? "MSPointerMove" : "mousemove", moveListener);
            }
            if (endListener != null) {
                Events.addListener(node, (Five.Client.isPointer) ? "MSPointerUp" : "mouseup", endListener);
            }
            if (!Five.Client.isPointer && Five.Client.isTouch) {
                if (startListener != null) {
                    Events.addListener(node, "touchstart", startListener);
                }
                if (moveListener != null) {
                    Events.addListener(node, "touchmove", moveListener);
                }
                if (endListener != null) {
                    Events.addListener(node, "touchend", endListener);
                }
            }
        };
        Events.removeGestureListeners = function (node, startListener, moveListener, endListener) {
            if (startListener != null) {
                Events.removeListener(node, (Five.Client.isPointer) ? "MSPointerDown" : "mousedown", startListener);
            }
            if (moveListener != null) {
                Events.removeListener(node, (Five.Client.isPointer) ? "MSPointerMove" : "mousemove", moveListener);
            }
            if (endListener != null) {
                Events.removeListener(node, (Five.Client.isPointer) ? "MSPointerUp" : "mouseup", endListener);
            }
            if (!Five.Client.isPointer && Five.Client.isTouch) {
                if (startListener != null) {
                    Events.removeListener(node, "touchstart", startListener);
                }
                if (moveListener != null) {
                    Events.removeListener(node, "touchmove", moveListener);
                }
                if (endListener != null) {
                    Events.removeListener(node, "touchend", endListener);
                }
            }
        };
        Events.getMainEvent = function (e) {
            var touchEvent;
            if ((e.type == "touchstart" || e.type == "touchmove")) {
                touchEvent = e;
                if (touchEvent.touches != null && touchEvent.touches[0] != null)
                    return touchEvent.touches[0];
            }
            else if (e.type == "touchend") {
                touchEvent = e;
                if (touchEvent.changedTouches != null && touchEvent.changedTouches[0] != null)
                    return touchEvent.changedTouches[0];
            }
            return null;
        };
        Events.getClientX = function (mouseEvent) {
            var touch = Events.getMainEvent(mouseEvent);
            return touch != null ? touch.clientX : mouseEvent.clientX;
        };
        Events.getClientY = function (mouseEvent) {
            var touch = Events.getMainEvent(mouseEvent);
            return touch != null ? touch.clientY : mouseEvent.clientY;
        };
        Events.listenerList = function (element, createIfEmpty) {
            var obj = element;
            return obj.ListenerList;
        };
        Events.clearListenerList = function (element) {
            var obj = element;
            return obj.ListenerList = null;
        };
        Events.updateListenerList = function (element, eventName, funct) {
            if (element.listenerList == null) {
                element.listenerList = [];
                Events.objects.push(element);
            }
            element.listenerList.push({ name: eventName, f: funct });
        };
        Events.removeAllListeners = function (element) {
            var list = Events.listenerList(element, false);
            if (list != null) {
                while (list.length > 0) {
                    var entry = list[0];
                    Events.removeListener(element, entry.name, entry.f);
                }
            }
        };
        Events.release = function (element) {
            if (element != null) {
                Events.removeAllListeners(element);
                var children = element.childNodes;
                if (children != null) {
                    var childCount = children.length;
                    for (var i = 0; i < childCount; i += 1) {
                        Events.release(children[i]);
                    }
                }
            }
        };
        Events.isPopupTrigger = function (evt) {
            return Events.isRightMouseButton(evt) || (Five.Client.isMac && Events.isMouseControlDown(evt) &&
                !Events.isMouseShiftDown(evt) && !Events.isMouseMetaDown(evt) && !Events.isMouseAltDown(evt));
        };
        Events.isRightMouseButton = function (evt) {
            return evt.button === 2;
        };
        Events.isLeftMouseButton = function (evt) {
            return evt.button === (Five.Client.isIe && !Five.Client.isIe9 ? 1 : 0);
        };
        Events.isMouseEvent = function (evt) {
            return (evt.pointerType != null) ? (evt.pointerType == "mouse" || evt.pointerType ===
                evt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?
                evt.mozInputSource == 1 : evt.type.indexOf("mouse") == 0);
        };
        Events.isMultiTouchEvent = function (evt) {
            return (evt.type != null && evt.type.indexOf("touch") == 0 && evt.touches != null && evt.touches.length > 1);
        };
        Events.isTouchEvent = function (evt) {
            if (evt.pointerType != null) {
                var pe = (evt);
                return pe.pointerType == "touch" || pe.pointerType === 2;
            }
            else
                return (evt.mozInputSource != null) ?
                    evt.mozInputSource == 5 : evt.type.indexOf("touch") == 0;
        };
        Events.redirectMouseEvents = function (node, graph, state, down, move, up, dblClick) {
            Events.addGestureListeners(node, function (evt) {
                if (down != null) {
                    down(evt);
                }
                else if (!Events.isConsumed(evt)) {
                    graph.fireMouseEvent(Events.mouseDown, new Five.MouseEventContext(evt, state(evt)));
                }
            }, function (evt) {
                if (move != null) {
                    move(evt);
                }
                else if (!Events.isConsumed(evt)) {
                    graph.fireMouseEvent(Events.mouseMove, new Five.MouseEventContext(evt, state(evt)));
                }
            }, function (evt) {
                if (up != null) {
                    up(evt);
                }
                else if (!Events.isConsumed(evt)) {
                    graph.fireMouseEvent(Events.mouseUp, new Five.MouseEventContext(evt, state(evt)));
                }
            });
            Events.addListener(node, "dblclick", function (evt) {
                if (dblClick != null) {
                    dblClick(evt);
                }
                else if (!Events.isConsumed(evt)) {
                    var tmp = state;
                    graph.dblClick(evt, (tmp != null) ? tmp(evt).cell : null);
                }
            });
        };
        Events.objects = [];
        Events.change = "change";
        Events.scale = "scale";
        Events.translate = "translate";
        Events.scaleAndTranslate = "scaleAndTranslate";
        Events.down = "down";
        Events.up = "up";
        Events.escape = "escape";
        Events.startEditing = "startEditing";
        Events.undo = "undo";
        Events.redo = "redo";
        Events.mouseDown = "mouseDown";
        Events.mouseMove = "mouseMove";
        Events.mouseUp = "mouseUp";
        Events.show = "show";
        Events.hide = "hide";
        Events.destroy = "destroy";
        Events.gesture = "gesture";
        Events.startEdit = "startEdit";
        Events.endEdit = "endEdit";
        Events.size = "size";
        Events.click = "click";
        Events.doubleClick = "doubleClick";
        Events.fireMouseEvent = "fireMouseEvent";
        Events.pan = "pan";
        Events.panStart = "panStart";
        Events.panEnd = "panEnd";
        Events.labelChanged = "labelChanged";
        Events.mark = "mark";
        Events.execute = "execute";
        Events.executed = "executed";
        Events.beginUpdate = "beginUpdate";
        Events.endUpdate = "endUpdate";
        Events.beforeUndo = "beforeUndo";
        Events.notify = "notify";
        Events.connectCell = "connectCell";
        Events.cellConnected = "cellConnected";
        Events.add = "add";
        Events.remove = "remove";
        Events.start = "start";
        Events.reset = "reset";
        Events.connect = "connect";
        Events.disconnect = "disconnect";
        Events.suspend = "suspend";
        Events.resume = "resume";
        Events.tapAndHold = "tapAndHold";
        Events.addOverlay = "addOverlay";
        Events.foldCells = "foldCells";
        Events.labelHandle = "labelHandle";
        Events.addCells = "addCells";
        Events.flipEdge = "flipEdge";
        Events.splitEdge = "splitEdge";
        Events.moveCells = "moveCells";
        Events.cellsFolded = "cellsFolded";
        Events.resizeCells = "resizeCells";
        Events.cellsAdded = "cellsAdded";
        Events.cellsMoved = "cellsMoved";
        Events.cellsResized = "cellsResized";
        Events.cellsRemoved = "cellsRemoved";
        Events.cellsOrdered = "cellsOrdered";
        Events.updateCellSize = "updateCellSize";
        Events.root = "root";
        Events.done = "done";
        Events.clear = "clear";
        Events.activate = "activate";
        Events.resizeStart = "resizeStart";
        Events.resize = "resize";
        Events.resizeEnd = "resizeEnd";
        Events.minimize = "minimize";
        Events.normalize = "normalize";
        Events.maximize = "maximize";
        Events.close = "close";
        Events.move = "move";
        Events.moveStart = "moveStart";
        Events.moveEnd = "moveEnd";
        Events.select = "select";
        Events.fired = "fired";
        Events.receive = "receive";
        Events.get = "get";
        Events.refresh = "refresh";
        Events.removeCells = "removeCells";
        Events.ungroupCells = "ungroupCells";
        Events.removeCellsFromParent = "removeCellsFromParent";
        Events.session = "session";
        Events.save = "save";
        Events.open = "open";
        Events.post = "post";
        Events.orderCells = "orderCells";
        Events.alignCells = "alignCells";
        Events.layoutCells = "layoutCells";
        Events.removeOverlay = "removeOverlay";
        Events.groupCells = "groupCells";
        Events.beforeAddVertex = "beforeAddVertex";
        Events.addVertex = "addVertex";
        Events.afterAddVertex = "afterAddVertex";
        return Events;
    }());
    Five.Events = Events;
    var EventHandle;
    (function (EventHandle) {
        EventHandle[EventHandle["Label"] = -1] = "Label";
        EventHandle[EventHandle["Rotation"] = -2] = "Rotation";
        EventHandle[EventHandle["Custom"] = -100] = "Custom";
    })(EventHandle = Five.EventHandle || (Five.EventHandle = {}));
    var ModelChangeEvent = (function (_super) {
        __extends(ModelChangeEvent, _super);
        function ModelChangeEvent(edit, changes) {
            var _this = _super.call(this) || this;
            _this.edit = edit;
            _this.changes = changes;
            return _this;
        }
        return ModelChangeEvent;
    }(BasicEvent));
    Five.ModelChangeEvent = ModelChangeEvent;
    var NotifyEvent = (function (_super) {
        __extends(NotifyEvent, _super);
        function NotifyEvent(edit, changes) {
            var _this = _super.call(this) || this;
            _this.edit = edit;
            _this.changes = changes;
            return _this;
        }
        return NotifyEvent;
    }(BasicEvent));
    Five.NotifyEvent = NotifyEvent;
    var AfterExecuteEvent = (function (_super) {
        __extends(AfterExecuteEvent, _super);
        function AfterExecuteEvent(change) {
            var _this = _super.call(this) || this;
            _this.change = change;
            return _this;
        }
        return AfterExecuteEvent;
    }(BasicEvent));
    Five.AfterExecuteEvent = AfterExecuteEvent;
    var UndoEvent = (function (_super) {
        __extends(UndoEvent, _super);
        function UndoEvent(edit) {
            var _this = _super.call(this) || this;
            _this.edit = edit;
            return _this;
        }
        return UndoEvent;
    }(BasicEvent));
    Five.UndoEvent = UndoEvent;
    var ScaleEvent = (function (_super) {
        __extends(ScaleEvent, _super);
        function ScaleEvent(scale, previousScale) {
            var _this = _super.call(this) || this;
            _this.scale = scale;
            _this.previousScale = previousScale;
            return _this;
        }
        return ScaleEvent;
    }(BasicEvent));
    Five.ScaleEvent = ScaleEvent;
    var ScaleAndTranslateEvent = (function (_super) {
        __extends(ScaleAndTranslateEvent, _super);
        function ScaleAndTranslateEvent(scale, previousScale, translate, previousTranslate) {
            var _this = _super.call(this) || this;
            _this.scale = scale;
            _this.previousScale = previousScale;
            _this.translate = translate;
            _this.previousTranslate = previousTranslate;
            return _this;
        }
        return ScaleAndTranslateEvent;
    }(BasicEvent));
    Five.ScaleAndTranslateEvent = ScaleAndTranslateEvent;
    var TranslateEvent = (function (_super) {
        __extends(TranslateEvent, _super);
        function TranslateEvent(translate, previousTranslate) {
            var _this = _super.call(this) || this;
            _this.translate = translate;
            _this.previousTranslate = previousTranslate;
            return _this;
        }
        return TranslateEvent;
    }(BasicEvent));
    Five.TranslateEvent = TranslateEvent;
    var SizeEvent = (function (_super) {
        __extends(SizeEvent, _super);
        function SizeEvent(bounds) {
            var _this = _super.call(this) || this;
            _this.bounds = bounds;
            return _this;
        }
        return SizeEvent;
    }(BasicEvent));
    Five.SizeEvent = SizeEvent;
    var GestureEvent = (function (_super) {
        __extends(GestureEvent, _super);
        function GestureEvent(event, cell) {
            var _this = _super.call(this) || this;
            _this.event = event;
            _this.cell = cell;
            return _this;
        }
        return GestureEvent;
    }(BasicEvent));
    Five.GestureEvent = GestureEvent;
    var BasicMouseEvent = (function (_super) {
        __extends(BasicMouseEvent, _super);
        function BasicMouseEvent(event) {
            var _this = _super.call(this) || this;
            _this.event = event;
            return _this;
        }
        return BasicMouseEvent;
    }(BasicEvent));
    Five.BasicMouseEvent = BasicMouseEvent;
    var FireMouseEvent = (function (_super) {
        __extends(FireMouseEvent, _super);
        function FireMouseEvent(eventName, event) {
            var _this = _super.call(this) || this;
            _this.eventName = eventName;
            _this.event = event;
            return _this;
        }
        return FireMouseEvent;
    }(BasicEvent));
    Five.FireMouseEvent = FireMouseEvent;
    var ClickEvent = (function (_super) {
        __extends(ClickEvent, _super);
        function ClickEvent(event, cell) {
            var _this = _super.call(this) || this;
            _this.event = event;
            _this.cell = cell;
            return _this;
        }
        return ClickEvent;
    }(BasicEvent));
    Five.ClickEvent = ClickEvent;
    var DoubleClickEvent = (function (_super) {
        __extends(DoubleClickEvent, _super);
        function DoubleClickEvent(event, cell) {
            var _this = _super.call(this) || this;
            _this.event = event;
            _this.cell = cell;
            return _this;
        }
        return DoubleClickEvent;
    }(BasicEvent));
    Five.DoubleClickEvent = DoubleClickEvent;
    var CellOverlayEvent = (function (_super) {
        __extends(CellOverlayEvent, _super);
        function CellOverlayEvent(cell, overlay) {
            var _this = _super.call(this) || this;
            _this.cell = cell;
            _this.overlay = overlay;
            return _this;
        }
        return CellOverlayEvent;
    }(BasicEvent));
    Five.CellOverlayEvent = CellOverlayEvent;
    var FoldCellsEvent = (function (_super) {
        __extends(FoldCellsEvent, _super);
        function FoldCellsEvent(collapse, recurse, cells) {
            var _this = _super.call(this) || this;
            _this.collapse = collapse;
            _this.recurse = recurse;
            _this.cells = cells;
            return _this;
        }
        return FoldCellsEvent;
    }(BasicEvent));
    Five.FoldCellsEvent = FoldCellsEvent;
    var ResizeCellsEvent = (function (_super) {
        __extends(ResizeCellsEvent, _super);
        function ResizeCellsEvent(cells, bounds) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.bounds = bounds;
            return _this;
        }
        return ResizeCellsEvent;
    }(BasicEvent));
    Five.ResizeCellsEvent = ResizeCellsEvent;
    var CellsResizeEvent = (function (_super) {
        __extends(CellsResizeEvent, _super);
        function CellsResizeEvent(cells, bounds) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.bounds = bounds;
            return _this;
        }
        return CellsResizeEvent;
    }(BasicEvent));
    Five.CellsResizeEvent = CellsResizeEvent;
    var LabelChangedEvent = (function (_super) {
        __extends(LabelChangedEvent, _super);
        function LabelChangedEvent(cell, value, old, event) {
            var _this = _super.call(this) || this;
            _this.cell = cell;
            _this.value = value;
            _this.old = old;
            _this.event = event;
            return _this;
        }
        return LabelChangedEvent;
    }(BasicEvent));
    Five.LabelChangedEvent = LabelChangedEvent;
    var ConnectCellEvent = (function (_super) {
        __extends(ConnectCellEvent, _super);
        function ConnectCellEvent(edge, terminal, source, previous) {
            var _this = _super.call(this) || this;
            _this.edge = edge;
            _this.terminal = terminal;
            _this.source = source;
            _this.previous = previous;
            return _this;
        }
        return ConnectCellEvent;
    }(BasicEvent));
    Five.ConnectCellEvent = ConnectCellEvent;
    var FlipEdgeEvent = (function (_super) {
        __extends(FlipEdgeEvent, _super);
        function FlipEdgeEvent(edge) {
            var _this = _super.call(this) || this;
            _this.edge = edge;
            return _this;
        }
        return FlipEdgeEvent;
    }(BasicEvent));
    Five.FlipEdgeEvent = FlipEdgeEvent;
    var SplitEdgeEvent = (function (_super) {
        __extends(SplitEdgeEvent, _super);
        function SplitEdgeEvent(edge, cells, newEdge, dx, dy) {
            var _this = _super.call(this) || this;
            _this.edge = edge;
            _this.cells = cells;
            _this.newEdge = newEdge;
            _this.dx = dx;
            _this.dy = dy;
            return _this;
        }
        return SplitEdgeEvent;
    }(BasicEvent));
    Five.SplitEdgeEvent = SplitEdgeEvent;
    var StartEditingEvent = (function (_super) {
        __extends(StartEditingEvent, _super);
        function StartEditingEvent(cell, event) {
            var _this = _super.call(this) || this;
            _this.cell = cell;
            _this.event = event;
            return _this;
        }
        return StartEditingEvent;
    }(BasicEvent));
    Five.StartEditingEvent = StartEditingEvent;
    var AddCellsEvent = (function (_super) {
        __extends(AddCellsEvent, _super);
        function AddCellsEvent(cells, parent, index, source, target) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.parent = parent;
            _this.index = index;
            _this.source = source;
            _this.target = target;
            return _this;
        }
        return AddCellsEvent;
    }(BasicEvent));
    Five.AddCellsEvent = AddCellsEvent;
    var CellsAddedEvent = (function (_super) {
        __extends(CellsAddedEvent, _super);
        function CellsAddedEvent(cells, parent, index, source, target, absolute) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.parent = parent;
            _this.index = index;
            _this.source = source;
            _this.target = target;
            _this.absolute = absolute;
            return _this;
        }
        return CellsAddedEvent;
    }(BasicEvent));
    Five.CellsAddedEvent = CellsAddedEvent;
    var RemoveCellsEvent = (function (_super) {
        __extends(RemoveCellsEvent, _super);
        function RemoveCellsEvent(cells, includeEdges) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.includeEdges = includeEdges;
            return _this;
        }
        return RemoveCellsEvent;
    }(BasicEvent));
    Five.RemoveCellsEvent = RemoveCellsEvent;
    var MoveCellsEvent = (function (_super) {
        __extends(MoveCellsEvent, _super);
        function MoveCellsEvent(cells, dx, dy, clone, target, event) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.dx = dx;
            _this.dy = dy;
            _this.clone = clone;
            _this.target = target;
            _this.event = event;
            return _this;
        }
        return MoveCellsEvent;
    }(BasicEvent));
    Five.MoveCellsEvent = MoveCellsEvent;
    var CellsMovedEvent = (function (_super) {
        __extends(CellsMovedEvent, _super);
        function CellsMovedEvent(cells, dx, dy, disconnect) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.dx = dx;
            _this.dy = dy;
            _this.disconnect = disconnect;
            return _this;
        }
        return CellsMovedEvent;
    }(BasicEvent));
    Five.CellsMovedEvent = CellsMovedEvent;
    var CellsEvent = (function (_super) {
        __extends(CellsEvent, _super);
        function CellsEvent(cells) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            return _this;
        }
        return CellsEvent;
    }(BasicEvent));
    Five.CellsEvent = CellsEvent;
    var OrderCellsEvent = (function (_super) {
        __extends(OrderCellsEvent, _super);
        function OrderCellsEvent(cells, back) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.back = back;
            return _this;
        }
        return OrderCellsEvent;
    }(BasicEvent));
    Five.OrderCellsEvent = OrderCellsEvent;
    var AlignCellsEvent = (function (_super) {
        __extends(AlignCellsEvent, _super);
        function AlignCellsEvent(cells, halign, valign) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            _this.halign = halign;
            _this.valign = valign;
            return _this;
        }
        return AlignCellsEvent;
    }(BasicEvent));
    Five.AlignCellsEvent = AlignCellsEvent;
    var GroupCellsEvent = (function (_super) {
        __extends(GroupCellsEvent, _super);
        function GroupCellsEvent(group, border, cells) {
            var _this = _super.call(this) || this;
            _this.group = group;
            _this.border = border;
            _this.cells = cells;
            return _this;
        }
        return GroupCellsEvent;
    }(BasicEvent));
    Five.GroupCellsEvent = GroupCellsEvent;
    var UpdateCellSizeEvent = (function (_super) {
        __extends(UpdateCellSizeEvent, _super);
        function UpdateCellSizeEvent(cell, ignoreChildren) {
            var _this = _super.call(this) || this;
            _this.cell = cell;
            _this.ignoreChildren = ignoreChildren;
            return _this;
        }
        return UpdateCellSizeEvent;
    }(BasicEvent));
    Five.UpdateCellSizeEvent = UpdateCellSizeEvent;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var AnimationDoneEvent = (function (_super) {
        __extends(AnimationDoneEvent, _super);
        function AnimationDoneEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AnimationDoneEvent;
    }(Five.BasicEvent));
    Five.AnimationDoneEvent = AnimationDoneEvent;
    var Animation = (function () {
        function Animation(delay) {
            if (delay === void 0) { delay = 20; }
            this.delay = delay;
            this.thread = null;
            this.onDone = new Five.EventListeners();
        }
        Animation.prototype.isRunning = function () {
            return this.thread != null;
        };
        Animation.prototype.startAnimation = function () {
            var _this = this;
            if (this.thread == null) {
                this.thread = window.setInterval(function () { return _this.updateAnimation; }, this.delay);
            }
        };
        Animation.prototype.updateAnimation = function () {
        };
        Animation.prototype.stopAnimation = function () {
            if (this.thread != null) {
                window.clearInterval(this.thread);
                this.thread = null;
                this.onDone.fire(new AnimationDoneEvent());
            }
        };
        return Animation;
    }());
    Five.Animation = Animation;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ArrowShape = (function (_super) {
        __extends(ArrowShape, _super);
        function ArrowShape(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize) {
            if (strokewidth === void 0) { strokewidth = 1; }
            if (arrowWidth === void 0) { arrowWidth = Five.Constants.arrowWidth; }
            if (spacing === void 0) { spacing = Five.Constants.arrowSpacing; }
            if (endSize === void 0) { endSize = Five.Constants.arrowSize; }
            var _this = _super.call(this) || this;
            _this.points = points;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            _this.arrowWidth = arrowWidth;
            _this.spacing = spacing;
            _this.endSize = endSize;
            return _this;
        }
        ArrowShape.prototype.paintEdgeShape = function (c, pts) {
            var spacing = Five.Constants.arrowSpacing;
            var width = Five.Constants.arrowWidth;
            var arrow = Five.Constants.arrowSize;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            var dx = pe.x - p0.x;
            var dy = pe.y - p0.y;
            var dist = Math.sqrt(dx * dx + dy * dy);
            var length = dist - 2 * spacing - arrow;
            var nx = dx / dist;
            var ny = dy / dist;
            var basex = length * nx;
            var basey = length * ny;
            var floorx = width * ny / 3;
            var floory = -width * nx / 3;
            var p0x = p0.x - floorx / 2 + spacing * nx;
            var p0y = p0.y - floory / 2 + spacing * ny;
            var p1x = p0x + floorx;
            var p1y = p0y + floory;
            var p2x = p1x + basex;
            var p2y = p1y + basey;
            var p3x = p2x + floorx;
            var p3y = p2y + floory;
            var p5x = p3x - 3 * floorx;
            var p5y = p3y - 3 * floory;
            c.begin();
            c.moveTo(p0x, p0y);
            c.lineTo(p1x, p1y);
            c.lineTo(p2x, p2y);
            c.lineTo(p3x, p3y);
            c.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);
            c.lineTo(p5x, p5y);
            c.lineTo(p5x + floorx, p5y + floory);
            c.close();
            c.fillAndStroke();
        };
        ArrowShape.factory = function () { return new ArrowShape(new Array(), null, null); };
        return ArrowShape;
    }(Five.Shape));
    Five.ArrowShape = ArrowShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CanvasState = (function () {
        function CanvasState() {
            this.dx = 0;
            this.dy = 0;
            this.scale = 1;
            this.alpha = 1;
            this.fillColor = null;
            this.fillAlpha = 1;
            this.gradientColor = null;
            this.gradientAlpha = 1;
            this.gradientDirection = null;
            this.strokeColor = null;
            this.strokeWidth = 1;
            this.dashed = false;
            this.dashPattern = "3 3";
            this.lineCap = "flat";
            this.lineJoin = "miter";
            this.miterLimit = 10;
            this.fontColor = "#000000";
            this.fontBackgroundColor = null;
            this.fontBorderColor = null;
            this.fontSize = Five.defaultStyle().fontSize;
            this.fontFamily = Five.Constants.defaultFontFamily;
            this.fontStyle = 0;
            this.shadow = false;
            this.shadowColor = Five.Constants.shadowColor;
            this.shadowAlpha = Five.Constants.shadowOpacity;
            this.shadowDx = Five.Constants.shadowOffsetX;
            this.shadowDy = Five.Constants.shadowOffsetY;
            this.rotation = 0;
            this.rotationCx = 0;
            this.rotationCy = 0;
            this.transform = null;
        }
        return CanvasState;
    }());
    Five.CanvasState = CanvasState;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Cells = (function () {
        function Cells() {
        }
        Cells.getGeometry = function (cell) {
            return (cell != null) ? cell.getGeometry() : null;
        };
        Cells.getValue = function (cell) {
            return (cell != null) ? cell.getValue() : null;
        };
        Cells.isEdge = function (cell) {
            return (cell != null) ? cell.isEdge() : false;
        };
        Cells.isVertex = function (cell) {
            return (cell != null) ? cell.isVertex() : false;
        };
        Cells.getStyle = function (cell) {
            return (cell != null) ? cell.getStyle() : null;
        };
        Cells.isVisible = function (cell) {
            return (cell != null) ? cell.isVisible() : false;
        };
        Cells.getParent = function (cell) {
            return (cell != null) ? cell.getParent() : null;
        };
        Cells.getChildCount = function (cell) {
            return (cell != null) ? cell.getChildCount() : 0;
        };
        Cells.getChildAt = function (cell, index) {
            return (cell != null) ? cell.getChildAt(index) : null;
        };
        Cells.getEdgeCount = function (cell) {
            return (cell != null) ? cell.getEdgeCount() : 0;
        };
        Cells.getEdgeAt = function (cell, index) {
            return (cell != null) ? cell.getEdgeAt(index) : null;
        };
        Cells.getTerminal = function (edge, isSource) {
            return (edge != null) ? edge.getTerminal(isSource) : null;
        };
        Cells.isCollapsed = function (cell) {
            return (cell != null) ? cell.isCollapsed() : false;
        };
        Cells.isAncestor = function (parent, child) {
            while (child != null && child != parent) {
                child = Cells.getParent(child);
            }
            return child == parent;
        };
        return Cells;
    }());
    Five.Cells = Cells;
    var Cell = (function () {
        function Cell(value, geometry, style) {
            this.className = "Cell";
            this.id = null;
            this.value = null;
            this.geometry = null;
            this.style = null;
            this.vertex = false;
            this.edge = false;
            this.connectable = true;
            this.visible = true;
            this.collapsed = false;
            this.parent = null;
            this.source = null;
            this.target = null;
            this.children = null;
            this.edges = null;
            this.transient = ["id", "value", "parent", "source", "target", "children", "edges"];
            this.value = value;
            this.setGeometry(geometry);
            this.setStyle(style);
        }
        Cell.prototype.getId = function () {
            return this.id;
        };
        Cell.prototype.setId = function (id) {
            this.id = id;
        };
        Cell.prototype.getValue = function () {
            return this.value;
        };
        Cell.prototype.setValue = function (value) {
            this.value = value;
        };
        Cell.prototype.valueChanged = function (newValue) {
            var previous = this.getValue();
            this.setValue(newValue);
            return previous;
        };
        Cell.prototype.getGeometry = function () {
            return this.geometry;
        };
        Cell.prototype.startChangeGeometry = function () {
            return Five.createGeomtryChange(this);
        };
        Cell.prototype.setGeometry = function (geometry) {
            this.geometry = geometry;
        };
        Cell.prototype.getStyle = function () {
            return this.style;
        };
        Cell.prototype.setStyle = function (style) {
            this.style = style;
        };
        Cell.prototype.isVertex = function () {
            return this.vertex;
        };
        Cell.prototype.setVertex = function (vertex) {
            this.vertex = vertex;
        };
        Cell.prototype.isEdge = function () {
            return this.edge;
        };
        Cell.prototype.setEdge = function (edge) {
            this.edge = edge;
        };
        Cell.prototype.isConnectable = function () {
            return this.connectable;
        };
        Cell.prototype.setConnectable = function (connectable) {
            this.connectable = connectable;
        };
        Cell.prototype.isVisible = function () {
            return this.visible;
        };
        Cell.prototype.setVisible = function (visible) {
            this.visible = visible;
        };
        Cell.prototype.isCollapsed = function () {
            return this.collapsed;
        };
        Cell.prototype.setCollapsed = function (collapsed) {
            this.collapsed = collapsed;
        };
        Cell.prototype.getParent = function () {
            return this.parent;
        };
        Cell.prototype.setParent = function (parent) {
            this.parent = parent;
        };
        Cell.prototype.getTerminal = function (source) {
            return (source) ? this.source : this.target;
        };
        Cell.prototype.setTerminal = function (terminal, isSource) {
            if (isSource) {
                this.source = terminal;
            }
            else {
                this.target = terminal;
            }
            return terminal;
        };
        Cell.prototype.getChildCount = function () {
            return (this.children == null) ? 0 : this.children.length;
        };
        Cell.prototype.getIndex = function (child) {
            return Five.Utils.indexOf(this.children, child);
        };
        Cell.prototype.getChildAt = function (index) {
            return (this.children == null) ? null : this.children[index];
        };
        Cell.prototype.insert = function (child, index) {
            if (child != null) {
                if (index == null) {
                    index = this.getChildCount();
                    if (child.getParent() == this) {
                        index--;
                    }
                }
                child.removeFromParent();
                child.setParent(this);
                if (this.children == null) {
                    this.children = [];
                    this.children.push(child);
                }
                else {
                    this.children.splice(index, 0, child);
                }
            }
            return child;
        };
        Cell.prototype.remove = function (index) {
            var child = null;
            if (this.children != null && index >= 0) {
                child = this.getChildAt(index);
                if (child != null) {
                    this.children.splice(index, 1);
                    child.setParent(null);
                }
            }
            return child;
        };
        Cell.prototype.removeFromParent = function () {
            if (this.parent != null) {
                var index = this.parent.getIndex(this);
                this.parent.remove(index);
            }
        };
        Cell.prototype.getEdgeCount = function () {
            return (this.edges == null) ? 0 : this.edges.length;
        };
        Cell.prototype.getEdgeIndex = function (edge) {
            return Five.Utils.indexOf(this.edges, edge);
        };
        Cell.prototype.getEdgeAt = function (index) {
            return (this.edges == null) ? null : this.edges[index];
        };
        Cell.prototype.insertEdge = function (edge, isOutgoing) {
            if (edge != null) {
                edge.removeFromTerminal(isOutgoing);
                edge.setTerminal(this, isOutgoing);
                if (this.edges == null ||
                    edge.getTerminal(!isOutgoing) != this || Five.Utils.indexOf(this.edges, edge) < 0) {
                    if (this.edges == null) {
                        this.edges = [];
                    }
                    this.edges.push(edge);
                }
            }
            return edge;
        };
        Cell.prototype.removeEdge = function (edge, isOutgoing) {
            if (edge != null) {
                if (edge.getTerminal(!isOutgoing) != this &&
                    this.edges != null) {
                    var index = this.getEdgeIndex(edge);
                    if (index >= 0) {
                        this.edges.splice(index, 1);
                    }
                }
                edge.setTerminal(null, isOutgoing);
            }
            return edge;
        };
        Cell.prototype.removeFromTerminal = function (isSource) {
            var terminal = this.getTerminal(isSource);
            if (terminal != null) {
                terminal.removeEdge(this, isSource);
            }
        };
        Cell.prototype.getAttribute = function (name, defaultValue) {
            var userObject = this.getValue();
            var val = (userObject != null && userObject.nodeType === Five.NodeType.Element) ? userObject.getAttribute(name) : null;
            return val || defaultValue;
        };
        Cell.prototype.setAttribute = function (name, value) {
            var userObject = this.getValue();
            if (userObject != null &&
                userObject.nodeType === Five.NodeType.Element) {
                userObject.setAttribute(name, value);
            }
        };
        Cell.prototype.clone = function () {
            var clone = Five.Utils.clone(this, this.transient);
            clone.setValue(this.cloneValue());
            return clone;
        };
        Cell.prototype.cloneValue = function () {
            var value = this.getValue();
            if (value != null) {
                if (!isNaN(value.nodeType)) {
                    value = value.cloneNode(true);
                }
            }
            return value;
        };
        Cell.prototype.getHeight = function () {
            return this.geometry.height;
        };
        Cell.prototype.setNodeStyle = function (style) {
            this.style = style;
        };
        return Cell;
    }());
    Five.Cell = Cell;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellAttributeChange = (function () {
        function CellAttributeChange(cell, attribute, value) {
            this.cell = cell;
            this.attribute = attribute;
            this.value = value;
            this.previous = value;
        }
        CellAttributeChange.prototype.execute = function () {
            var tmp = this.cell.getAttribute(this.attribute, null);
            if (this.previous == null) {
                this.cell.value.removeAttribute(this.attribute);
            }
            else {
                this.cell.setAttribute(this.attribute, this.previous);
            }
            this.previous = tmp;
        };
        return CellAttributeChange;
    }());
    Five.CellAttributeChange = CellAttributeChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellEditor = (function () {
        function CellEditor(graph) {
            this.graph = null;
            this.textarea = null;
            this.editingCell = null;
            this.trigger = null;
            this.modified = false;
            this.autoSize = true;
            this.selectText = true;
            this.emptyLabelText = "";
            this.zIndex = 5;
            this.graph = graph;
        }
        CellEditor.prototype.init = function () {
            this.textarea = document.createElement("textarea");
            this.textarea.className = "CellEditor";
            this.textarea.style.position = "absolute";
            this.textarea.style.overflow = "visible";
            this.textarea.setAttribute("cols", "20");
            this.textarea.setAttribute("rows", "4");
            this.installListeners(this.textarea);
        };
        CellEditor.prototype.installListeners = function (elt) {
            var _this = this;
            Five.Events.addListener(elt, "blur", Five.Utils.bind(this, function (evt) {
                _this.focusLost(evt);
            }));
            Five.Events.addListener(elt, "change", Five.Utils.bind(this, function () {
                _this.setModified(true);
            }));
            Five.Events.addListener(elt, "keydown", Five.Utils.bind(this, function (evt) {
                if (!Five.Events.isConsumed(evt)) {
                    if (_this.isStopEditingEvent(evt)) {
                        _this.graph.stopEditing(false);
                        Five.Events.consume(evt);
                    }
                    else if (evt.keyCode == 27) {
                        _this.graph.stopEditing(true);
                        Five.Events.consume(evt);
                    }
                    else {
                        if (_this.clearOnChange && elt.value == _this.getEmptyLabelText()) {
                            _this.clearOnChange = false;
                            elt.value = "";
                        }
                        _this.setModified(true);
                    }
                }
            }));
            this.changeHandler = function () {
                if (_this.editingCell != null && _this.graph.getView().getState(_this.editingCell) == null) {
                    _this.stopEditing(true);
                }
            };
            this.graph.getModel().onChange.add(this.changeHandler);
            var evtName = (!Five.Client.isIe || Five.Client.isIe9) ? "input" : "keypress";
            Five.Events.addListener(elt, evtName, Five.Utils.bind(this, function (evt) {
                if (_this.autoSize && !Five.Events.isConsumed(evt)) {
                    setTimeout(Five.Utils.bind(_this, function () {
                        _this.resize();
                    }), 0);
                }
            }));
        };
        CellEditor.prototype.isStopEditingEvent = function (evt) {
            return evt.keyCode === 113 || (this.graph.isEnterStopsCellEditing() &&
                evt.keyCode === 13 && !Five.Events.isControlDown(evt) &&
                !Five.Events.isShiftDown(evt));
        };
        CellEditor.prototype.isEventSource = function (evt) {
            return Five.Events.getSource(evt) === this.textarea;
        };
        CellEditor.prototype.resize = function () {
            if (this.textDiv != null) {
                var state = this.graph.getView().getState(this.editingCell);
                if (state == null) {
                    this.stopEditing(true);
                }
                else {
                    var clip = this.graph.isLabelClipped(state.cell);
                    var wrap = this.graph.isWrapping(state.cell);
                    var isEdge = Five.Cells.isEdge(state.cell);
                    var scale = this.graph.getView().scale;
                    var spacing = state.style.spacing * scale;
                    var spacingTop = ((state.style.spacingTop || 0) + Five.TextShape.baseSpacingTop) * scale + spacing;
                    var spacingRight = (state.style.spacingRight || 0 + Five.TextShape.baseSpacingRight) * scale + spacing;
                    var spacingBottom = (state.style.spacingBottom || 0 + Five.TextShape.baseSpacingBottom) * scale + spacing;
                    var spacingLeft = (state.style.spacingLeft + Five.TextShape.baseSpacingLeft) * scale + spacing;
                    var bds = new Five.Rectangle(state.x, state.y, state.width - spacingLeft - spacingRight, state.height - spacingTop - spacingBottom);
                    bds = (state.shape != null) ? state.shape.getLabelBounds(bds) : bds;
                    if (isEdge) {
                        this.bounds.x = state.absoluteOffset.x;
                        this.bounds.y = state.absoluteOffset.y;
                        this.bounds.width = 0;
                        this.bounds.height = 0;
                    }
                    else if (this.bounds != null) {
                        this.bounds.x = bds.x + state.absoluteOffset.x;
                        this.bounds.y = bds.y + state.absoluteOffset.y;
                        this.bounds.width = bds.width;
                        this.bounds.height = bds.height;
                    }
                    var value = this.textarea.value;
                    if (value.charAt(value.length - 1) == "\n" || value == "") {
                        value += "&nbsp;";
                    }
                    value = Five.Utils.htmlEntities(value, false);
                    if (wrap) {
                        this.textDiv.style.whiteSpace = "normal";
                        this.textDiv.style.width = this.bounds.width + "px";
                    }
                    else {
                        value = value.replace(/ /g, "&nbsp;");
                    }
                    value = value.replace(/\n/g, "<br/>");
                    this.textDiv.innerHTML = value;
                    var ow = this.textDiv.offsetWidth + 30;
                    var oh = this.textDiv.offsetHeight + 16;
                    ow = Math.max(ow, 40);
                    oh = Math.max(oh, 20);
                    if (clip) {
                        ow = Math.min(this.bounds.width, ow);
                        oh = Math.min(this.bounds.height, oh);
                    }
                    else if (wrap) {
                        ow = Math.max(this.bounds.width, this.textDiv.scrollWidth);
                    }
                    var m = (state.text != null) ? state.text.margin : null;
                    if (m == null) {
                        var align = state.style.hAlign;
                        var valign = state.style.vAlign;
                        m = Five.Utils.getAlignmentAsPoint(align, valign);
                    }
                    if (m != null) {
                        this.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * this.bounds.width + m.x * ow) - 3) + "px";
                        this.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * this.bounds.height + m.y * oh) + 4) + "px";
                    }
                    var dx = this.textarea.offsetWidth - this.textarea.clientWidth + 4;
                    this.textarea.style.width = (ow + dx) + "px";
                    this.textarea.style.height = oh + "px";
                }
            }
        };
        CellEditor.prototype.isModified = function () {
            return this.modified;
        };
        CellEditor.prototype.setModified = function (value) {
            this.modified = value;
        };
        CellEditor.prototype.focusLost = function (evt) {
            this.stopEditing(!this.graph.isInvokesStopCellEditing());
        };
        CellEditor.prototype.startEditing = function (cell, trigger) {
            if (this.textarea == null) {
                this.init();
            }
            this.stopEditing(true);
            var state = this.graph.getView().getState(cell);
            if (state != null) {
                this.editingCell = cell;
                this.trigger = trigger;
                this.textNode = null;
                if (state.text != null && this.isHideLabel(state)) {
                    this.textNode = state.text.node;
                    Five.Utils.nodeStyle(this.textNode).visibility = "hidden";
                }
                var scale = this.graph.getView().scale;
                var size = state.style.fontSize * scale;
                var family = state.style.fontFamily || Five.Constants.defaultFontFamily;
                var color = state.style.fontColor || "black";
                var align = state.style.hAlign || Five.HorizontalAlign.Left;
                var fontStyle = state.style.fontStyle || 0;
                var bold = (fontStyle & Five.FontStyle.Bold) == Five.FontStyle.Bold;
                var italic = (fontStyle & Five.FontStyle.Italic) == Five.FontStyle.Italic;
                var uline = (fontStyle & Five.FontStyle.Underline) == Five.FontStyle.Underline;
                this.textarea.style.lineHeight = (Five.Constants.absoluteLineHeight) ? Math.round(size * Five.Constants.lineHeight) + "px" : "" + Five.Constants.lineHeight;
                this.textarea.style.textDecoration = (uline) ? "underline" : "";
                this.textarea.style.fontWeight = (bold) ? "bold" : "normal";
                this.textarea.style.fontStyle = (italic) ? "italic" : "";
                this.textarea.style.fontSize = Math.round(size) + "px";
                this.textarea.style.fontFamily = family;
                this.textarea.style.textAlign = Five.HorizontalAlign[align];
                this.textarea.style.overflow = "auto";
                this.textarea.style.outline = "none";
                this.textarea.style.color = color;
                var bounds = this.getEditorBounds(state);
                this.bounds = bounds;
                this.textarea.style.left = bounds.x + "px";
                this.textarea.style.top = bounds.y + "px";
                this.textarea.style.width = bounds.width + "px";
                this.textarea.style.height = bounds.height + "px";
                this.textarea.style.zIndex = String(this.zIndex);
                var value = this.getInitialValue(state, trigger);
                if (value == null || value.length == 0) {
                    value = this.getEmptyLabelText();
                    this.clearOnChange = value.length > 0;
                }
                else {
                    this.clearOnChange = false;
                }
                this.setModified(false);
                this.textarea.value = value;
                this.graph.container.setTextEditor(this.textarea);
                if (this.textarea.style.display != "none") {
                    if (this.autoSize) {
                        this.textDiv = this.createTextDiv();
                        document.body.appendChild(this.textDiv);
                        this.resize();
                    }
                    this.textarea.focus();
                    if (this.isSelectText() && this.textarea.value.length > 0) {
                        if (Five.Client.isIos) {
                            document.execCommand("selectAll");
                        }
                        else {
                            this.textarea.select();
                        }
                    }
                }
            }
        };
        CellEditor.prototype.isSelectText = function () {
            return this.selectText;
        };
        CellEditor.prototype.createTextDiv = function () {
            var div = document.createElement("div");
            var style = div.style;
            style.position = "absolute";
            style.whiteSpace = "nowrap";
            style.visibility = "hidden";
            style.display = (Five.Client.isQuirks) ? "inline" : "inline-block";
            style.zoom = "1";
            style.verticalAlign = "top";
            style.lineHeight = this.textarea.style.lineHeight;
            style.fontSize = this.textarea.style.fontSize;
            style.fontFamily = this.textarea.style.fontFamily;
            style.fontWeight = this.textarea.style.fontWeight;
            style.textAlign = this.textarea.style.textAlign;
            style.fontStyle = this.textarea.style.fontStyle;
            style.textDecoration = this.textarea.style.textDecoration;
            return div;
        };
        CellEditor.prototype.stopEditing = function (cancel) {
            cancel = cancel || false;
            if (this.editingCell != null) {
                if (this.textNode != null) {
                    Five.Utils.nodeStyle(this.textNode).visibility = "visible";
                    this.textNode = null;
                }
                if (!cancel && this.isModified()) {
                    this.graph.labelChanged(this.editingCell, this.getCurrentValue(), this.trigger);
                }
                if (this.textDiv != null) {
                    document.body.removeChild(this.textDiv);
                    this.textDiv = null;
                }
                this.editingCell = null;
                this.trigger = null;
                this.bounds = null;
                this.textarea.blur();
                if (this.textarea.parentNode != null) {
                    this.textarea.parentNode.removeChild(this.textarea);
                }
            }
        };
        CellEditor.prototype.getInitialValue = function (state, trigger) {
            return this.graph.getEditingValue(state.cell, trigger);
        };
        CellEditor.prototype.getCurrentValue = function () {
            return this.textarea.value.replace(/\r/g, "");
        };
        CellEditor.prototype.isHideLabel = function (state) {
            return true;
        };
        CellEditor.prototype.getMinimumSize = function (state) {
            var scale = this.graph.getView().scale;
            return new Five.Rectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20, (this.textarea.style.textAlign == "left") ? 120 : 40);
        };
        CellEditor.prototype.getEditorBounds = function (state) {
            var isEdge = Five.Cells.isEdge(state.cell);
            var scale = this.graph.getView().scale;
            var minSize = this.getMinimumSize(state);
            var minWidth = minSize.width;
            var minHeight = minSize.height;
            var spacing = state.style.spacing * scale;
            var spacingTop = (state.style.spacingTop || 0 + Five.TextShape.baseSpacingTop) * scale + spacing;
            var spacingRight = (state.style.spacingRight || 0 + Five.TextShape.baseSpacingRight) * scale + spacing;
            var spacingBottom = (state.style.spacingBottom || 0 + Five.TextShape.baseSpacingBottom) * scale + spacing;
            var spacingLeft = (state.style.spacingLeft + Five.TextShape.baseSpacingLeft) * scale + spacing;
            var result = new Five.Rectangle(state.x, state.y, Math.max(minWidth, state.width - spacingLeft - spacingRight), Math.max(minHeight, state.height - spacingTop - spacingBottom));
            result = (state.shape != null) ? state.shape.getLabelBounds(result) : result;
            if (isEdge) {
                result.x = state.absoluteOffset.x;
                result.y = state.absoluteOffset.y;
                if (state.text != null && state.text.boundingBox != null) {
                    if (state.text.boundingBox.x > 0) {
                        result.x = state.text.boundingBox.x;
                    }
                    if (state.text.boundingBox.y > 0) {
                        result.y = state.text.boundingBox.y;
                    }
                }
            }
            else if (state.text != null && state.text.boundingBox != null) {
                result.x = Math.min(result.x, state.text.boundingBox.x);
                result.y = Math.min(result.y, state.text.boundingBox.y);
            }
            result.x += spacingLeft;
            result.y += spacingTop;
            if (state.text != null && state.text.boundingBox != null) {
                if (!isEdge) {
                    result.width = Math.max(result.width, state.text.boundingBox.width);
                    result.height = Math.max(result.height, state.text.boundingBox.height);
                }
                else {
                    result.width = Math.max(minWidth, state.text.boundingBox.width);
                    result.height = Math.max(minHeight, state.text.boundingBox.height);
                }
            }
            if (Five.Cells.isVertex(state.cell)) {
                var horizontal = state.style.hAlign || Five.HorizontalAlign.Center;
                if (horizontal == Five.HorizontalAlign.Left) {
                    result.x -= state.width;
                }
                else if (horizontal == Five.HorizontalAlign.Right) {
                    result.x += state.width;
                }
                var vertical = state.style.vLabelPosition || Five.VerticalAlign.Middle;
                if (vertical == Five.VerticalAlign.Top) {
                    result.y -= state.height;
                }
                else if (vertical == Five.VerticalAlign.Bottom) {
                    result.y += state.height;
                }
            }
            return result;
        };
        CellEditor.prototype.getEmptyLabelText = function () {
            return this.emptyLabelText;
        };
        CellEditor.prototype.getEditingCell = function () {
            return this.editingCell;
        };
        CellEditor.prototype.destroy = function () {
            if (this.textarea != null) {
                Five.Events.release(this.textarea);
                if (this.textarea.parentNode != null) {
                    this.textarea.parentNode.removeChild(this.textarea);
                }
                this.textarea = null;
                if (this.changeHandler != null) {
                    this.graph.getModel().onChange.remove(this.changeHandler);
                    this.changeHandler = null;
                }
            }
        };
        return CellEditor;
    }());
    Five.CellEditor = CellEditor;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellHighlight = (function () {
        function CellHighlight(graph, highlightColor, strokeWidth, dashed) {
            var _this = this;
            if (highlightColor === void 0) { highlightColor = Five.Constants.defaultValidColor; }
            if (strokeWidth === void 0) { strokeWidth = Five.Constants.highlightStrokewidth; }
            if (dashed === void 0) { dashed = false; }
            this.keepOnTop = false;
            this.graph = null;
            this.state = null;
            this.spacing = 2;
            if (graph != null) {
                this.graph = graph;
                this.highlightColor = highlightColor;
                this.strokeWidth = strokeWidth;
                this.dashed = dashed;
                this.repaintHandler = Five.Utils.bind(this, function () {
                    if (_this.state != null) {
                        var tmp = _this.graph.view.getState(_this.state.cell);
                        if (tmp == null) {
                            _this.hide();
                        }
                        else {
                            _this.state = tmp;
                            _this.repaint();
                        }
                    }
                });
                this.graph.getView().onScale.add(this.repaintHandler);
                this.graph.getView().onTranslate.add(this.repaintHandler);
                this.graph.getView().onScaleAndTranslate.add(this.repaintHandler);
                this.graph.getModel().onChange.add(this.repaintHandler);
                this.resetHandler = function () { return _this.hide(); };
                this.graph.getView().onRootChange.add(this.resetHandler);
            }
        }
        CellHighlight.prototype.setHighlightColor = function (color) {
            this.highlightColor = color;
            if (this.shape != null) {
                this.shape.stroke = color;
            }
        };
        CellHighlight.prototype.drawHighlight = function () {
            this.shape = this.createShape();
            this.repaint();
            if (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node) {
                this.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);
            }
        };
        CellHighlight.prototype.createShape = function () {
            var _this = this;
            var key = this.state.style.shape;
            var stencil = Five.StencilRegistry.getStencil(key);
            var shape;
            if (stencil != null) {
                shape = new Five.Shape(stencil);
            }
            else {
                var constructor = this.state.shape.constructor;
                shape = new constructor();
            }
            shape.scale = this.state.view.scale;
            shape.outline = true;
            shape.points = this.state.absolutePoints;
            shape.apply(this.state);
            shape.strokewidth = this.strokeWidth / this.state.view.scale / this.state.view.scale;
            shape.arrowStrokewidth = this.strokeWidth;
            shape.stroke = this.highlightColor;
            shape.isDashed = this.dashed;
            shape.isShadow = false;
            shape.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.Vml : Five.Dialect.Svg;
            shape.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
            Five.Events.redirectMouseEvents(shape.node, this.graph, function () { return _this.state; });
            if (this.graph.dialect != Five.Dialect.Svg) {
                shape.pointerEvents = false;
            }
            else {
                shape.svgPointerEvents = "stroke";
            }
            return shape;
        };
        CellHighlight.prototype.repaint = function () {
            if (this.state != null && this.shape != null) {
                if (Five.Cells.isEdge(this.state.cell)) {
                    this.shape.points = this.state.absolutePoints;
                }
                else {
                    this.shape.bounds = new Five.Rectangle(this.state.x - this.spacing, this.state.y - this.spacing, this.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);
                    this.shape.rotation = this.state.style.rotation;
                }
                if (this.state.shape != null) {
                    this.shape.setCursor(this.state.shape.getCursor());
                }
                this.shape.redraw();
            }
        };
        CellHighlight.prototype.hide = function () {
            this.highlight(null);
        };
        CellHighlight.prototype.highlight = function (state) {
            if (this.state != state) {
                if (this.shape != null) {
                    this.shape.destroy();
                    this.shape = null;
                }
                this.state = state;
                if (this.state != null) {
                    this.drawHighlight();
                }
            }
        };
        CellHighlight.prototype.destroy = function () {
            this.graph.getView().onScale.remove(this.repaintHandler);
            this.graph.getView().onTranslate.remove(this.repaintHandler);
            this.graph.getView().onScaleAndTranslate.remove(this.repaintHandler);
            this.graph.getModel().onChange.remove(this.repaintHandler);
            this.graph.getView().onRootChange.remove(this.resetHandler);
            if (this.shape != null) {
                this.shape.destroy();
                this.shape = null;
            }
        };
        return CellHighlight;
    }());
    Five.CellHighlight = CellHighlight;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var MarkEvent = (function (_super) {
        __extends(MarkEvent, _super);
        function MarkEvent(state) {
            var _this = _super.call(this) || this;
            _this.state = state;
            return _this;
        }
        return MarkEvent;
    }(Five.BasicEvent));
    Five.MarkEvent = MarkEvent;
    var CellMarker = (function () {
        function CellMarker(graph, validColor, invalidColor, hotspot) {
            if (validColor === void 0) { validColor = Five.Constants.defaultValidColor; }
            if (invalidColor === void 0) { invalidColor = Five.Constants.defaultInvalidColor; }
            if (hotspot === void 0) { hotspot = Five.Constants.defaultHotspot; }
            this.onMark = new Five.EventListeners();
            this.graph = null;
            this.enabled = true;
            this.hotspot = Five.Constants.defaultHotspot;
            this.hotspotEnabled = false;
            this.validColor = null;
            this.invalidColor = null;
            this.currentColor = null;
            this.validState = null;
            this.markedState = null;
            if (graph != null) {
                this.graph = graph;
                this.validColor = validColor;
                this.invalidColor = invalidColor;
                this.hotspot = hotspot;
                this.highlight = new Five.CellHighlight(graph);
            }
        }
        CellMarker.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        CellMarker.prototype.isEnabled = function () {
            return this.enabled;
        };
        CellMarker.prototype.setHotspot = function (hotspot) {
            this.hotspot = hotspot;
        };
        CellMarker.prototype.getHotspot = function () {
            return this.hotspot;
        };
        CellMarker.prototype.setHotspotEnabled = function (enabled) {
            this.hotspotEnabled = enabled;
        };
        CellMarker.prototype.isHotspotEnabled = function () {
            return this.hotspotEnabled;
        };
        CellMarker.prototype.hasValidState = function () {
            return this.validState != null;
        };
        CellMarker.prototype.getValidState = function () {
            return this.validState;
        };
        CellMarker.prototype.getMarkedState = function () {
            return this.markedState;
        };
        CellMarker.prototype.reset = function () {
            this.validState = null;
            if (this.markedState != null) {
                this.markedState = null;
                this.unmark();
            }
        };
        CellMarker.prototype.process = function (me) {
            var state = null;
            if (this.isEnabled()) {
                state = this.getState(me);
                this.setCurrentState(state, me);
            }
            return state;
        };
        CellMarker.prototype.setCurrentState = function (state, me, color) {
            var isValid = (state != null) ? this.isValidState(state) : false;
            color = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);
            if (isValid) {
                this.validState = state;
            }
            else {
                this.validState = null;
            }
            if (state != this.markedState || color != this.currentColor) {
                this.currentColor = color;
                if (state != null && this.currentColor != null) {
                    this.markedState = state;
                    this.mark();
                }
                else if (this.markedState != null) {
                    this.markedState = null;
                    this.unmark();
                }
            }
        };
        CellMarker.prototype.markCell = function (cell, color) {
            var state = this.graph.getView().getState(cell);
            if (state != null) {
                this.currentColor = (color != null) ? color : this.validColor;
                this.markedState = state;
                this.mark();
            }
        };
        CellMarker.prototype.mark = function () {
            this.highlight.setHighlightColor(this.currentColor);
            this.highlight.highlight(this.markedState);
            this.onMark.fire(new MarkEvent(this.markedState));
        };
        CellMarker.prototype.unmark = function () {
            this.mark();
        };
        CellMarker.prototype.isValidState = function (state) {
            return true;
        };
        CellMarker.prototype.getMarkerColor = function (evt, state, isValid) {
            return (isValid) ? this.validColor : this.invalidColor;
        };
        CellMarker.prototype.getState = function (me) {
            var view = this.graph.getView();
            var cell = this.getCell(me);
            var state = this.getStateToMark(view.getState(cell));
            return (state != null && this.intersects(state, me)) ? state : null;
        };
        CellMarker.prototype.getCell = function (me) {
            return me.getCell();
        };
        CellMarker.prototype.getStateToMark = function (state) {
            return state;
        };
        CellMarker.prototype.intersects = function (state, me) {
            if (this.hotspotEnabled) {
                return Five.Utils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(), this.hotspot, Five.Constants.minHotspotSize, Five.Constants.maxHotspotSize);
            }
            return true;
        };
        CellMarker.prototype.destroy = function () {
            this.highlight.destroy();
        };
        return CellMarker;
    }());
    Five.CellMarker = CellMarker;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellOverlay = (function () {
        function CellOverlay(image, tooltip, align, verticalAlign, offset, cursor) {
            if (align === void 0) { align = Five.HorizontalAlign.Right; }
            if (verticalAlign === void 0) { verticalAlign = Five.VerticalAlign.Bottom; }
            if (offset === void 0) { offset = new Five.Point(); }
            if (cursor === void 0) { cursor = "help"; }
            this.image = image;
            this.tooltip = tooltip;
            this.align = align;
            this.verticalAlign = verticalAlign;
            this.offset = offset;
            this.cursor = cursor;
            this.onClick = new Five.EventListeners();
            this.defaultOverlap = 0.5;
        }
        CellOverlay.prototype.getBounds = function (state) {
            var isEdge = Five.Cells.isEdge(state.cell);
            var s = state.view.scale;
            var pt;
            var w = this.image.width;
            var h = this.image.height;
            if (isEdge) {
                var pts = state.absolutePoints;
                if (pts.length % 2 == 1) {
                    pt = pts[Math.floor(pts.length / 2)];
                }
                else {
                    var idx = pts.length / 2;
                    var p0 = pts[idx - 1];
                    var p1 = pts[idx];
                    pt = new Five.Point(p0.x + (p1.x - p0.x) / 2, p0.y + (p1.y - p0.y) / 2);
                }
            }
            else {
                pt = new Five.Point();
                if (this.align == Five.HorizontalAlign.Left) {
                    pt.x = state.x;
                }
                else if (this.align == Five.HorizontalAlign.Center) {
                    pt.x = state.x + state.width / 2;
                }
                else {
                    pt.x = state.x + state.width;
                }
                if (this.verticalAlign == Five.VerticalAlign.Top) {
                    pt.y = state.y;
                }
                else if (this.verticalAlign == Five.VerticalAlign.Middle) {
                    pt.y = state.y + state.height / 2;
                }
                else {
                    pt.y = state.y + state.height;
                }
            }
            return new Five.Rectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s), Math.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);
        };
        CellOverlay.prototype.toString = function () {
            return this.tooltip;
        };
        return CellOverlay;
    }());
    Five.CellOverlay = CellOverlay;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellPath = (function () {
        function CellPath() {
        }
        CellPath.create = function (cell) {
            var result = "";
            if (cell != null) {
                var parent = cell.getParent();
                while (parent != null) {
                    var index = parent.getIndex(cell);
                    result = index + CellPath.pathSeparator + result;
                    cell = parent;
                    parent = cell.getParent();
                }
            }
            var n = result.length;
            if (n > 1) {
                result = result.substring(0, n - 1);
            }
            return result;
        };
        CellPath.getParentPath = function (path) {
            if (path != null) {
                var index = path.lastIndexOf(CellPath.pathSeparator);
                if (index >= 0) {
                    return path.substring(0, index);
                }
                else if (path.length > 0) {
                    return "";
                }
            }
            return null;
        };
        CellPath.resolve = function (root, path) {
            var parent = root;
            if (path != null) {
                var tokens = path.split(CellPath.pathSeparator);
                for (var i = 0; i < tokens.length; i++) {
                    parent = parent.getChildAt(parseInt(tokens[i]));
                }
            }
            return parent;
        };
        CellPath.compare = function (p1, p2) {
            var min = Math.min(p1.length, p2.length);
            var comp = 0;
            var t1;
            var t2;
            for (var i = 0; i < min; i++) {
                if (p1[i] != p2[i]) {
                    if (p1[i].length == 0 ||
                        p2[i].length == 0) {
                        comp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);
                    }
                    else {
                        t1 = parseInt(p1[i]);
                        t2 = parseInt(p2[i]);
                        comp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);
                    }
                    break;
                }
            }
            if (comp == 0) {
                t1 = p1.length;
                t2 = p2.length;
                if (t1 != t2) {
                    comp = (t1 > t2) ? 1 : -1;
                }
            }
            return comp;
        };
        CellPath.pathSeparator = ".";
        return CellPath;
    }());
    Five.CellPath = CellPath;
})(Five || (Five = {}));
var Five;
(function (Five) {
    "use strict";
    var Point = (function () {
        function Point(x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            this._x = x;
            this._y = y;
            this.check();
        }
        Object.defineProperty(Point.prototype, "x", {
            get: function () { return this._x; },
            set: function (value) {
                this._x = value;
                this.check();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Point.prototype, "y", {
            get: function () { return this._y; },
            set: function (value) {
                this._y = value;
                this.check();
            },
            enumerable: true,
            configurable: true
        });
        Point.prototype.check = function () {
            if (isNaN(this.x) || isNaN(this.y))
                throw new Error("invalid parameters:  " + this.x + " " + this.y);
        };
        Point.prototype.equals = function (p) {
            return p != null && p.x === this.x && p.y === this.y;
        };
        Point.prototype.clone = function () {
            return Five.Utils.clone(this);
        };
        return Point;
    }());
    Five.Point = Point;
    var Rectangle = (function (_super) {
        __extends(Rectangle, _super);
        function Rectangle(x, y, width, height) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = 0; }
            if (height === void 0) { height = 0; }
            var _this = this;
            if (isNaN(x) || isNaN(y) || isNaN(width) || isNaN(height))
                throw new Error("invalid parameters:  " + x + " " + y + " " + width + " " + height);
            _this = _super.call(this, x, y) || this;
            _this.width = width;
            _this.height = height;
            return _this;
        }
        Object.defineProperty(Rectangle.prototype, "width", {
            get: function () { return this._width; },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "height", {
            get: function () { return this._height; },
            set: function (value) { this._height = value; },
            enumerable: true,
            configurable: true
        });
        Rectangle.prototype.clone = function () {
            return Five.Utils.clone(this);
        };
        Rectangle.prototype.add = function (rect) {
            if (rect != null) {
                var minX = Math.min(this.x, rect.x);
                var minY = Math.min(this.y, rect.y);
                var maxX = Math.max(this.x + this.width, rect.x + rect.width);
                var maxY = Math.max(this.y + this.height, rect.y + rect.height);
                this.x = minX;
                this.y = minY;
                this.width = maxX - minX;
                this.height = maxY - minY;
            }
        };
        Rectangle.prototype.equals = function (rect) {
            return _super.prototype.equals.call(this, rect) && rect.width === this.width && rect.height === this.height;
        };
        Rectangle.prototype.getCenterX = function () {
            return this.x + this.width / 2;
        };
        Rectangle.prototype.getCenterY = function () {
            return this.y + this.height / 2;
        };
        Rectangle.prototype.grow = function (amount) {
            this.x -= amount;
            this.y -= amount;
            this.width += 2 * amount;
            this.height += 2 * amount;
        };
        Rectangle.prototype.rotate90 = function () {
            var t = (this.width - this.height) / 2;
            this.x += t;
            this.y -= t;
            var tmp = this.width;
            this.width = this.height;
            this.height = tmp;
        };
        return Rectangle;
    }(Point));
    Five.Rectangle = Rectangle;
    var Direction;
    (function (Direction) {
        Direction[Direction["North"] = 0] = "North";
        Direction[Direction["South"] = 1] = "South";
        Direction[Direction["East"] = 2] = "East";
        Direction[Direction["West"] = 3] = "West";
    })(Direction = Five.Direction || (Five.Direction = {}));
    var Dialect;
    (function (Dialect) {
        Dialect[Dialect["Svg"] = 0] = "Svg";
        Dialect[Dialect["Vml"] = 1] = "Vml";
        Dialect[Dialect["MixedHtml"] = 2] = "MixedHtml";
        Dialect[Dialect["PreferHtml"] = 3] = "PreferHtml";
        Dialect[Dialect["StrictHtml"] = 4] = "StrictHtml";
    })(Dialect = Five.Dialect || (Five.Dialect = {}));
    var RenderingHint;
    (function (RenderingHint) {
        RenderingHint[RenderingHint["Exact"] = 0] = "Exact";
        RenderingHint[RenderingHint["Faster"] = 1] = "Faster";
        RenderingHint[RenderingHint["Fastest"] = 2] = "Fastest";
    })(RenderingHint = Five.RenderingHint || (Five.RenderingHint = {}));
    var NodeType;
    (function (NodeType) {
        NodeType[NodeType["Element"] = 1] = "Element";
        NodeType[NodeType["Attribute"] = 2] = "Attribute";
        NodeType[NodeType["Text"] = 3] = "Text";
        NodeType[NodeType["Cdata"] = 4] = "Cdata";
        NodeType[NodeType["EntityReference"] = 5] = "EntityReference";
        NodeType[NodeType["Entity"] = 6] = "Entity";
        NodeType[NodeType["ProcessingInstruction"] = 7] = "ProcessingInstruction";
        NodeType[NodeType["Comment"] = 8] = "Comment";
        NodeType[NodeType["Document"] = 9] = "Document";
        NodeType[NodeType["DocumentType"] = 10] = "DocumentType";
        NodeType[NodeType["DocumentFragment"] = 11] = "DocumentFragment";
        NodeType[NodeType["Notation"] = 12] = "Notation";
    })(NodeType = Five.NodeType || (Five.NodeType = {}));
    var Constants = (function () {
        function Constants() {
        }
        Object.defineProperty(Constants, "shadowOpacity", {
            get: function () { return 1; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "shadowOffsetX", {
            get: function () { return 2; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "shadowOffsetY", {
            get: function () { return 3; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "nsSvg", {
            get: function () { return "http://www.w3.org/2000/svg"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "nsXlink", {
            get: function () { return "http://www.w3.org/1999/xlink"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "nsXhtml", {
            get: function () { return "http://www.w3.org/1999/xhtml"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "none", {
            get: function () { return "none"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "rectangleRoundingFactor", {
            get: function () { return this.rectangleRoundingFactor_; },
            set: function (value) { this.rectangleRoundingFactor_ = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "absoluteLineHeight", {
            get: function () { return false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "lineHeight", {
            get: function () { return 1.2; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "styleAlign", {
            get: function () { return "align"; },
            enumerable: true,
            configurable: true
        });
        Constants.rectangleRoundingFactor_ = 0.15;
        Constants.shadowColor = "gray";
        Constants.pageFormatA4Portrait = new Rectangle(0, 0, 826, 1169);
        Constants.styleLoop = "loopStyle";
        Constants.styleEdge = "edgeStyle";
        Constants.styleShape = "shape";
        Constants.entitySegment = 30;
        Constants.directionMaskNone = 0;
        Constants.directionMaskWest = 1;
        Constants.directionMaskNorth = 2;
        Constants.directionMaskSouth = 4;
        Constants.directionMaskEast = 8;
        Constants.directionMaskAll = 15;
        Constants.defaultFontstyle = 0;
        Constants.defaultFontFamily = "\"Helvetica Neue\", Helvetica, Arial, sans-serif";
        Constants.styleVerticalAlign = "verticalAlign";
        Constants.styleHorizontal = "horizontal";
        Constants.styleFillcolor = "fillColor";
        Constants.styleOverflow = "overflow";
        Constants.styleWhiteSpace = "whiteSpace";
        Constants.stylePerimeterSpacing = "perimeterSpacing";
        Constants.styleSourcePerimeterSpacing = "sourcePerimeterSpacing";
        Constants.styleTargetPerimeterSpacing = "targetPerimeterSpacing";
        Constants.styleSourcePort = "sourcePort";
        Constants.styleTargetPort = "targetPort";
        Constants.tooltipVerticalOffset = 16;
        Constants.styleRoutingCenterX = "routingCenterX";
        Constants.styleRoutingCenterY = "routingCenterY";
        Constants.stylePerimeter = "perimeter";
        Constants.styleCurved = "curved";
        Constants.lineArcsize = 20;
        Constants.defaultMarkersize = 6;
        Constants.arrowWidth = 30;
        Constants.arrowSpacing = 10;
        Constants.arrowSize = 30;
        Constants.defaultStartsize = 40;
        Constants.defaultImagesize = 24;
        Constants.styleIndicatorShape = "indicatorShape";
        Constants.styleEditable = "editable";
        Constants.edgeSelectionColor = "#00FF00";
        Constants.edgeSelectionStrokewidth = 1;
        Constants.edgeSelectionDashed = true;
        Constants.labelHandleSize = 4;
        Constants.labelHandleFillcolor = "yellow";
        Constants.connectHandleFillcolor = "#0000FF";
        Constants.cursorMovableVertex = "move";
        Constants.cursorMovableEdge = "move";
        Constants.cursorLabelHandle = "default";
        Constants.cursorBendHandle = "pointer";
        Constants.cursorConnect = "pointer";
        Constants.defaultValidColor = "#00FF00";
        Constants.defaultInvalidColor = "#FF0000";
        Constants.guideColor = "#FF0000";
        Constants.guideStrokewidth = 1;
        Constants.defaultHotspot = 0.3;
        Constants.minHotspotSize = 8;
        Constants.maxHotspotSize = 0;
        Constants.highlightStrokewidth = 3;
        Constants.outlineHighlightColor = "#00FF00";
        Constants.outlineHighlightStrokewidth = 5;
        Constants.lockedHandleFillcolor = "#FF0000";
        Constants.validColor = "#00FF00";
        Constants.invalidColor = "#FF0000";
        Constants.dropTargetColor = "#0000FF";
        Constants.connectTargetColor = "#0000FF";
        Constants.invalidConnectTargetColor = "#FF0000";
        Constants.styleBendable = "bendable";
        Constants.styleAspect = "aspect";
        Constants.styleFoldable = "foldable";
        Constants.styleAutosize = "autosize";
        Constants.styleRotatable = "rotatable";
        Constants.styleCloneable = "cloneable";
        Constants.styleDeletable = "deletable";
        Constants.outlineColor = '#0099FF';
        Constants.outlineStrokewidth = (Five.Client.isIe) ? 2 : 3;
        Constants.outlineHandleFillcolor = '#00FFFF';
        Constants.outlineHandleStrokecolor = '#0033FF';
        Constants.defaultFontSize = 12;
        return Constants;
    }());
    Five.Constants = Constants;
    var Resources = (function () {
        function Resources() {
        }
        Resources.get = function (key, params, defaultValue) {
            var value = Resources.resources[key];
            if (value == null) {
                value = key;
            }
            if (value != null &&
                params != null) {
                var result = [];
                var index = null;
                for (var i = 0; i < value.length; i++) {
                    var c = value.charAt(i);
                    if (c == "{") {
                        index = "";
                    }
                    else if (index != null && c == "}") {
                        index = parseInt(index) - 1;
                        if (index >= 0 && index < params.length) {
                            result.push(params[index]);
                        }
                        index = null;
                    }
                    else if (index != null) {
                        index += c;
                    }
                    else {
                        result.push(c);
                    }
                }
                value = result.join("");
            }
            return value;
        };
        Resources.resources = [];
        return Resources;
    }());
    Five.Resources = Resources;
    var Dictionary = (function () {
        function Dictionary() {
            this.map = {};
            this.clear();
        }
        Dictionary.prototype.clear = function () {
            this.map = {};
        };
        Dictionary.prototype.get = function (key) {
            return this.map[this.getId(key)];
        };
        Dictionary.prototype.getId = function (key) {
            return Five.ObjectIdentity.get(key);
        };
        Dictionary.prototype.put = function (key, value) {
            var id = this.getId(key);
            var previous = this.map[id];
            this.map[id] = value;
            return previous;
        };
        Dictionary.prototype.remove = function (key) {
            var id = Five.ObjectIdentity.get(key);
            var previous = this.map[id];
            delete this.map[id];
            return previous;
        };
        Dictionary.prototype.getKeys = function () {
            var result = [];
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    result.push(key);
                }
            }
            return result;
        };
        Dictionary.prototype.getValues = function () {
            var result = [];
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    result.push(map[key]);
                }
            }
            return result;
        };
        Dictionary.prototype.visit = function (visitor) {
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    visitor(map[key]);
                }
            }
        };
        return Dictionary;
    }());
    Five.Dictionary = Dictionary;
    var StringDictionary = (function () {
        function StringDictionary() {
            this.clear();
        }
        StringDictionary.prototype.clear = function () {
            this.map = {};
        };
        StringDictionary.prototype.get = function (key) {
            return this.map[key];
        };
        StringDictionary.prototype.put = function (key, value) {
            var previous = this.map[key];
            this.map[key] = value;
            return previous;
        };
        StringDictionary.prototype.remove = function (key) {
            var previous = this.map[key];
            delete this.map[key];
            return previous;
        };
        StringDictionary.prototype.removeValue = function (value) {
            var map = this.map;
            for (var key in map) {
                if (map[key] === value) {
                    delete this.map[key];
                    return key;
                }
            }
            return null;
        };
        StringDictionary.prototype.getKeys = function () {
            var result = [];
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    result.push(key);
                }
            }
            return result;
        };
        StringDictionary.prototype.getValues = function () {
            var result = [];
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    result.push(map[key]);
                }
            }
            return result;
        };
        StringDictionary.prototype.visit = function (visitor) {
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    visitor(key, map[key]);
                }
            }
        };
        return StringDictionary;
    }());
    Five.StringDictionary = StringDictionary;
    var Image = (function () {
        function Image(src, width, height) {
            this.src = null;
            this.width = null;
            this.height = null;
            this.src = src;
            this.width = width;
            this.height = height;
        }
        return Image;
    }());
    Five.Image = Image;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var RectangleShape = (function (_super) {
        __extends(RectangleShape, _super);
        function RectangleShape(bounds, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.className = "RectangleShape";
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            return _this;
        }
        RectangleShape.factory = function () { return new RectangleShape(null, null, null); };
        RectangleShape.prototype.isHtmlAllowed = function () {
            return !this.isRounded && !this.glass && this.rotation == 0;
        };
        RectangleShape.prototype.paintBackground = function (c, x, y, w, h) {
            if (this.isRounded) {
                var f = (this.style.arcSize || Five.Constants.rectangleRoundingFactor * 100) / 100;
                var r = Math.min(w * f, h * f);
                c.roundrect(x, y, w, h, r, r);
            }
            else {
                c.rect(x, y, w, h);
            }
            c.fillAndStroke();
        };
        RectangleShape.prototype.paintForeground = function (c, x, y, w, h) {
            if (this.glass) {
                this.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));
            }
        };
        return RectangleShape;
    }(Five.Shape));
    Five.RectangleShape = RectangleShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var EllipseShape = (function (_super) {
        __extends(EllipseShape, _super);
        function EllipseShape(bounds, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            return _this;
        }
        EllipseShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            c.ellipse(x, y, w, h);
            c.fillAndStroke();
        };
        EllipseShape.factory = function () { return new EllipseShape(null, null, null, 0); };
        return EllipseShape;
    }(Five.Shape));
    Five.EllipseShape = EllipseShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var RhombusShape = (function (_super) {
        __extends(RhombusShape, _super);
        function RhombusShape(bounds, fill, stroke, strokewidth) {
            var _this = _super.call(this) || this;
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = (strokewidth != null) ? strokewidth : 1;
            return _this;
        }
        RhombusShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            var hw = w / 2;
            var hh = h / 2;
            c.begin();
            c.moveTo(x + hw, y);
            c.lineTo(x + w, y + hh);
            c.lineTo(x + hw, y + h);
            c.lineTo(x, y + hh);
            c.close();
            c.fillAndStroke();
        };
        RhombusShape.factory = function () { return new RhombusShape(null, null, null, null); };
        return RhombusShape;
    }(Five.Shape));
    Five.RhombusShape = RhombusShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CylinderShape = (function (_super) {
        __extends(CylinderShape, _super);
        function CylinderShape(bounds, fill, stroke, strokewidth) {
            var _this = _super.call(this) || this;
            _this.maxHeight = 40;
            _this.svgStrokeTolerance = 0;
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = (strokewidth != null) ? strokewidth : 1;
            return _this;
        }
        CylinderShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            c.translate(x, y);
            c.begin();
            this.redrawPath(c, x, y, w, h, false);
            c.fillAndStroke();
            c.setShadow(false);
            c.begin();
            this.redrawPath(c, x, y, w, h, true);
            c.stroke();
        };
        CylinderShape.prototype.redrawPath = function (c, x, y, w, h, isForeground) {
            var dy = Math.min(this.maxHeight, Math.round(h / 5));
            if ((isForeground && this.fill != null) || (!isForeground && this.fill == null)) {
                c.moveTo(0, dy);
                c.curveTo(0, 2 * dy, w, 2 * dy, w, dy);
                if (!isForeground) {
                    c.stroke();
                    c.begin();
                }
            }
            if (!isForeground) {
                c.moveTo(0, dy);
                c.curveTo(0, -dy / 3, w, -dy / 3, w, dy);
                c.lineTo(w, h - dy);
                c.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);
                c.close();
            }
        };
        CylinderShape.factory = function () { return new CylinderShape(null, null, null, null); };
        return CylinderShape;
    }(Five.Shape));
    Five.CylinderShape = CylinderShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var PolylineShape = (function (_super) {
        __extends(PolylineShape, _super);
        function PolylineShape(points, stroke, strokewidth) {
            if (stroke === void 0) { stroke = "black"; }
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.points = points;
            _this.stroke = stroke;
            _this.strokewidth = (strokewidth != null) ? strokewidth : 1;
            return _this;
        }
        PolylineShape.prototype.getRotation = function () {
            return 0;
        };
        PolylineShape.prototype.getShapeRotation = function () {
            return 0;
        };
        PolylineShape.prototype.isPaintBoundsInverted = function () {
            return false;
        };
        PolylineShape.prototype.paintEdgeShape = function (c, pts) {
            if (this.style == null || !this.style.curved) {
                this.paintLine(c, pts, this.isRounded);
            }
            else {
                this.paintCurvedLine(c, pts);
            }
        };
        PolylineShape.prototype.paintLine = function (c, pts, rounded) {
            var arcSize = (this.style.arcSize || Five.Constants.lineArcsize) / 2;
            var pt = pts[0];
            var pe = pts[pts.length - 1];
            c.begin();
            c.moveTo(pt.x, pt.y);
            for (var i = 1; i < pts.length - 1; i++) {
                var tmp = pts[i];
                var dx = pt.x - tmp.x;
                var dy = pt.y - tmp.y;
                if ((rounded && i < pts.length - 1) && (dx != 0 || dy != 0)) {
                    var dist = Math.sqrt(dx * dx + dy * dy);
                    var nx1 = dx * Math.min(arcSize, dist / 2) / dist;
                    var ny1 = dy * Math.min(arcSize, dist / 2) / dist;
                    var x1 = tmp.x + nx1;
                    var y1 = tmp.y + ny1;
                    c.lineTo(x1, y1);
                    var next = pts[i + 1];
                    while (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0) {
                        next = pts[i + 2];
                        i++;
                    }
                    dx = next.x - tmp.x;
                    dy = next.y - tmp.y;
                    dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));
                    var nx2 = dx * Math.min(arcSize, dist / 2) / dist;
                    var ny2 = dy * Math.min(arcSize, dist / 2) / dist;
                    var x2 = tmp.x + nx2;
                    var y2 = tmp.y + ny2;
                    c.quadTo(tmp.x, tmp.y, x2, y2);
                    tmp = new Five.Point(x2, y2);
                }
                else {
                    c.lineTo(tmp.x, tmp.y);
                }
                pt = tmp;
            }
            c.lineTo(pe.x, pe.y);
            c.stroke();
        };
        PolylineShape.prototype.paintCurvedLine = function (c, pts) {
            c.begin();
            var pt = pts[0];
            var n = pts.length;
            c.moveTo(pt.x, pt.y);
            var p0;
            var p1;
            for (var i = 1; i < n - 2; i++) {
                p0 = pts[i];
                p1 = pts[i + 1];
                var ix = (p0.x + p1.x) / 2;
                var iy = (p0.y + p1.y) / 2;
                c.quadTo(p0.x, p0.y, ix, iy);
            }
            p0 = pts[n - 2];
            p1 = pts[n - 1];
            c.quadTo(p0.x, p0.y, p1.x, p1.y);
            c.stroke();
        };
        return PolylineShape;
    }(Five.Shape));
    Five.PolylineShape = PolylineShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ConnectorShape = (function (_super) {
        __extends(ConnectorShape, _super);
        function ConnectorShape(points, stroke, strokewidth) {
            return _super.call(this, points, stroke, strokewidth) || this;
        }
        ConnectorShape.prototype.paintEdgeShape = function (c, pts) {
            var sourceMarker = this.createMarker(c, pts, true);
            var targetMarker = this.createMarker(c, pts, false);
            _super.prototype.paintEdgeShape.call(this, c, pts);
            c.setFillColor(this.stroke);
            c.setShadow(false);
            c.setDashed(false);
            if (sourceMarker != null) {
                sourceMarker();
            }
            if (targetMarker != null) {
                targetMarker();
            }
        };
        ConnectorShape.prototype.createMarker = function (c, pts, source) {
            var result = null;
            var n = pts.length;
            var type = (source) ? this.style.startArrow : this.style.endArrow;
            var p0 = (source) ? pts[1] : pts[n - 2];
            var pe = (source) ? pts[0] : pts[n - 1];
            if (type != null && p0 != null && pe != null) {
                var count = 1;
                while (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0) {
                    p0 = (source) ? pts[1 + count] : pts[n - 2 - count];
                    count++;
                }
                var dx = pe.x - p0.x;
                var dy = pe.y - p0.y;
                var dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));
                var unitX = dx / dist;
                var unitY = dy / dist;
                var size = ((source) ? this.style.startSize : this.style.endSize) || Five.Constants.defaultMarkersize;
                var filled = source ? this.style.startFill : this.style.endFill;
                result = Five.Marker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.arrowStrokewidth, filled);
            }
            return result;
        };
        ConnectorShape.prototype.augmentBoundingBox = function (bbox) {
            _super.prototype.augmentBoundingBox.call(this, bbox);
            var size = 0;
            if (this.style.startArrow) {
                size = this.style.startSize + 1;
            }
            if (this.style.endArrow) {
                size = Math.max(size, this.style.endSize + 1);
            }
            bbox.grow(Math.ceil(size * this.scale));
        };
        ConnectorShape.factory = function () { return new ConnectorShape(null, null, null); };
        return ConnectorShape;
    }(Five.PolylineShape));
    Five.ConnectorShape = ConnectorShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var TriangleShape = (function (_super) {
        __extends(TriangleShape, _super);
        function TriangleShape() {
            return _super.call(this, null, null, null, 0) || this;
        }
        TriangleShape.prototype.redrawPath = function (c, x, y, w, h) {
            c.moveTo(0, 0);
            c.lineTo(w, 0.5 * h);
            c.lineTo(0, h);
            c.close();
        };
        TriangleShape.factory = function () { return new TriangleShape(); };
        return TriangleShape;
    }(Five.ActorShape));
    Five.TriangleShape = TriangleShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var HexagonShape = (function (_super) {
        __extends(HexagonShape, _super);
        function HexagonShape() {
            return _super.call(this) || this;
        }
        HexagonShape.prototype.redrawPath = function (c, x, y, w, h) {
            c.moveTo(0.25 * w, 0);
            c.lineTo(0.75 * w, 0);
            c.lineTo(w, 0.5 * h);
            c.lineTo(0.75 * w, h);
            c.lineTo(0.25 * w, h);
            c.lineTo(0, 0.5 * h);
            c.close();
        };
        HexagonShape.factory = function () { return new HexagonShape(); };
        return HexagonShape;
    }(Five.ActorShape));
    Five.HexagonShape = HexagonShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CloudShape = (function (_super) {
        __extends(CloudShape, _super);
        function CloudShape(bounds, fill, stroke, strokewidth) {
            return _super.call(this, bounds, fill, stroke, strokewidth) || this;
        }
        CloudShape.prototype.redrawPath = function (c, x, y, w, h) {
            c.moveTo(0.25 * w, 0.25 * h);
            c.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);
            c.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);
            c.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);
            c.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);
            c.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);
            c.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);
            c.close();
        };
        CloudShape.factory = function () { return new CloudShape(null, null, null, 0); };
        return CloudShape;
    }(Five.ActorShape));
    Five.CloudShape = CloudShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var LineShape = (function (_super) {
        __extends(LineShape, _super);
        function LineShape(bounds, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.bounds = bounds;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            return _this;
        }
        LineShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            var mid = y + h / 2;
            c.begin();
            c.moveTo(x, mid);
            c.lineTo(x + w, mid);
            c.stroke();
        };
        LineShape.factory = function () { return new LineShape(null, null, 0); };
        return LineShape;
    }(Five.Shape));
    Five.LineShape = LineShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var DoubleEllipseShape = (function (_super) {
        __extends(DoubleEllipseShape, _super);
        function DoubleEllipseShape(bounds, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.vmlScale = 10;
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            return _this;
        }
        DoubleEllipseShape.prototype.paintBackground = function (c, x, y, w, h) {
            c.ellipse(x, y, w, h);
            c.fillAndStroke();
        };
        DoubleEllipseShape.prototype.paintForeground = function (c, x, y, w, h) {
            if (!this.outline) {
                var inset = this.style.margin || Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5));
                x += inset;
                y += inset;
                w -= 2 * inset;
                h -= 2 * inset;
                if (w > 0 && h > 0) {
                    c.ellipse(x, y, w, h);
                }
                c.stroke();
            }
        };
        DoubleEllipseShape.factory = function () { return new DoubleEllipseShape(null, null, null); };
        return DoubleEllipseShape;
    }(Five.Shape));
    Five.DoubleEllipseShape = DoubleEllipseShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var SwimlaneShape = (function (_super) {
        __extends(SwimlaneShape, _super);
        function SwimlaneShape(bounds, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this) || this;
            _this.imageSize = 16;
            _this.bounds = bounds;
            _this.fill = fill;
            _this.stroke = stroke;
            _this.strokewidth = strokewidth;
            return _this;
        }
        SwimlaneShape.prototype.getTitleSize = function () {
            return Math.max(0, this.style.startSize, Five.Constants.defaultStartsize);
        };
        SwimlaneShape.prototype.getLabelBounds = function (rect) {
            var start = this.getTitleSize();
            var bounds = new Five.Rectangle(rect.x, rect.y, rect.width, rect.height);
            var horizontal = this.isHorizontal();
            var flipH = this.style.flipH;
            var flipV = this.style.flipV;
            var shapeVertical = (this.direction == Five.Direction.North || this.direction == Five.Direction.South);
            var realHorizontal = horizontal == !shapeVertical;
            var realFlipH = !realHorizontal && flipH != (this.direction === Five.Direction.South || this.direction === Five.Direction.West);
            var realFlipV = realHorizontal && flipV != (this.direction === Five.Direction.South || this.direction === Five.Direction.West);
            var tmp;
            if (!shapeVertical) {
                tmp = Math.min(bounds.height, start * this.scale);
                if (realFlipH || realFlipV) {
                    bounds.y += bounds.height - tmp;
                }
                bounds.height = tmp;
            }
            else {
                tmp = Math.min(bounds.width, start * this.scale);
                if (realFlipH || realFlipV) {
                    bounds.x += bounds.width - tmp;
                }
                bounds.width = tmp;
            }
            return bounds;
        };
        SwimlaneShape.prototype.getGradientBounds = function (c, x, y, w, h) {
            var start = this.getTitleSize();
            if (this.isHorizontal()) {
                start = Math.min(start, h);
                return new Five.Rectangle(x, y, w, start);
            }
            else {
                start = Math.min(start, w);
                return new Five.Rectangle(x, y, start, h);
            }
        };
        SwimlaneShape.prototype.getArcSizeWithStart = function (w, h, start) {
            var f = (this.style.arcSize || Five.Constants.rectangleRoundingFactor * 100) / 100;
            return start * f * 3;
        };
        SwimlaneShape.prototype.isHorizontal = function () {
            return !this.style.portrait;
        };
        SwimlaneShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            var start = this.getTitleSize();
            var fill = this.style.swimlaneFillColor;
            var swimlaneLine = this.style.swimlaneLine || true;
            var r = 0;
            if (this.isHorizontal()) {
                start = Math.min(start, h);
            }
            else {
                start = Math.min(start, w);
            }
            c.translate(x, y);
            if (!this.isRounded) {
                this.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);
            }
            else {
                r = this.getArcSizeWithStart(w, h, start);
                this.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);
            }
            var sep = this.style.separatorColor;
            this.paintSeparator(c, x, y, w, h, start, sep);
            if (this.image != null) {
                var bounds = this.getImageBounds(x, y, w, h);
                c.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height, this.image, false, false, false);
            }
            if (this.glass) {
                c.setShadow(false);
                this.paintGlassEffect(c, 0, 0, w, start, r);
            }
        };
        SwimlaneShape.prototype.paintSwimlane = function (c, x, y, w, h, start, fill, swimlaneLine) {
            if (fill != Five.Constants.none) {
                c.save();
                c.setFillColor(fill);
                c.rect(0, 0, w, h);
                c.fillAndStroke();
                c.restore();
                c.setShadow(false);
            }
            c.begin();
            if (this.isHorizontal()) {
                c.moveTo(0, start);
                c.lineTo(0, 0);
                c.lineTo(w, 0);
                c.lineTo(w, start);
                if (swimlaneLine) {
                    c.close();
                }
                c.fillAndStroke();
                if (start < h && fill == Five.Constants.none) {
                    c.pointerEvents = false;
                    c.begin();
                    c.moveTo(0, start);
                    c.lineTo(0, h);
                    c.lineTo(w, h);
                    c.lineTo(w, start);
                    c.stroke();
                }
            }
            else {
                c.moveTo(start, 0);
                c.lineTo(0, 0);
                c.lineTo(0, h);
                c.lineTo(start, h);
                if (swimlaneLine) {
                    c.close();
                }
                c.fillAndStroke();
                if (start < w && fill == Five.Constants.none) {
                    c.pointerEvents = false;
                    c.begin();
                    c.moveTo(start, 0);
                    c.lineTo(w, 0);
                    c.lineTo(w, h);
                    c.lineTo(start, h);
                    c.stroke();
                }
            }
        };
        SwimlaneShape.prototype.paintRoundedSwimlane = function (c, x, y, w, h, start, r, fill, swimlaneLine) {
            if (fill != Five.Constants.none) {
                c.save();
                c.setFillColor(fill);
                c.roundrect(0, 0, w, h, r, r);
                c.fillAndStroke();
                c.restore();
                c.setShadow(false);
            }
            c.begin();
            if (this.isHorizontal()) {
                c.moveTo(w, start);
                c.lineTo(w, r);
                c.quadTo(w, 0, w - Math.min(w / 2, r), 0);
                c.lineTo(Math.min(w / 2, r), 0);
                c.quadTo(0, 0, 0, r);
                c.lineTo(0, start);
                if (swimlaneLine) {
                    c.close();
                }
                c.fillAndStroke();
                if (start < h && fill == Five.Constants.none) {
                    c.pointerEvents = false;
                    c.begin();
                    c.moveTo(0, start);
                    c.lineTo(0, h - r);
                    c.quadTo(0, h, Math.min(w / 2, r), h);
                    c.lineTo(w - Math.min(w / 2, r), h);
                    c.quadTo(w, h, w, h - r);
                    c.lineTo(w, start);
                    c.stroke();
                }
            }
            else {
                c.moveTo(start, 0);
                c.lineTo(r, 0);
                c.quadTo(0, 0, 0, Math.min(h / 2, r));
                c.lineTo(0, h - Math.min(h / 2, r));
                c.quadTo(0, h, r, h);
                c.lineTo(start, h);
                if (swimlaneLine) {
                    c.close();
                }
                c.fillAndStroke();
                if (start < w && fill == Five.Constants.none) {
                    c.pointerEvents = false;
                    c.begin();
                    c.moveTo(start, h);
                    c.lineTo(w - r, h);
                    c.quadTo(w, h, w, h - Math.min(h / 2, r));
                    c.lineTo(w, Math.min(h / 2, r));
                    c.quadTo(w, 0, w - r, 0);
                    c.lineTo(start, 0);
                    c.stroke();
                }
            }
        };
        SwimlaneShape.prototype.paintSeparator = function (c, x, y, w, h, start, color) {
            if (color != Five.Constants.none) {
                c.setStrokeColor(color);
                c.setDashed(true);
                c.begin();
                if (this.isHorizontal()) {
                    c.moveTo(w, start);
                    c.lineTo(w, h);
                }
                else {
                    c.moveTo(start, 0);
                    c.lineTo(w, 0);
                }
                c.stroke();
                c.setDashed(false);
            }
        };
        SwimlaneShape.prototype.getImageBounds = function (x, y, w, h) {
            if (this.isHorizontal()) {
                return new Five.Rectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);
            }
            else {
                return new Five.Rectangle(x, y, this.imageSize, this.imageSize);
            }
        };
        SwimlaneShape.factory = function () { return new SwimlaneShape(null, null, null); };
        return SwimlaneShape;
    }(Five.Shape));
    Five.SwimlaneShape = SwimlaneShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ImageShape = (function (_super) {
        __extends(ImageShape, _super);
        function ImageShape(bounds, image, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this, bounds, fill, stroke, strokewidth) || this;
            _this.image = image;
            _this.preserveImageAspect = true;
            _this.shadow = false;
            return _this;
        }
        ImageShape.factory = function () { return new ImageShape(null, null, null); };
        ImageShape.prototype.getSvgScreenOffset = function () {
            return (!Five.Client.isIe) ? 0.5 : 0;
        };
        ImageShape.prototype.apply = function (state) {
            _super.prototype.apply.call(this, state);
            this.fill = null;
            this.stroke = null;
            this.gradient = null;
            if (this.style != null) {
                this.preserveImageAspect = this.style.preserveImageAspect;
            }
        };
        ImageShape.prototype.isHtmlAllowed = function () {
            return !this.preserveImageAspect;
        };
        ImageShape.prototype.paintVertexShape = function (c, x, y, w, h) {
            if (this.image != null) {
                var fill = this.style.imageBackground;
                var stroke = this.style.imageBorder;
                if (fill != null || stroke != null) {
                    c.setFillColor(fill);
                    c.setStrokeColor(stroke);
                    c.rect(x, y, w, h);
                    c.fillAndStroke();
                }
                c.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);
            }
            else {
                _super.prototype.paintBackground.call(this, c, x, y, w, h);
            }
        };
        ImageShape.prototype.redrawHtmlShape = function () {
            var elem = (this.node);
            elem.style.left = Math.round(this.bounds.x) + "px";
            elem.style.top = Math.round(this.bounds.y) + "px";
            elem.style.width = Math.max(0, Math.round(this.bounds.width)) + "px";
            elem.style.height = Math.max(0, Math.round(this.bounds.height)) + "px";
            elem.innerHTML = "";
            if (this.image != null) {
                var fill = this.style.imageBackground;
                var stroke = this.style.imageBorder;
                elem.style.backgroundColor = fill;
                elem.style.borderColor = stroke;
                var img = document.createElement("img");
                img.style.position = "absolute";
                img.src = this.image;
                var filter = (this.opacity < 100) ? "alpha(opacity=" + this.opacity + ")" : "";
                elem.style.filter = filter;
                if (this.flipH && this.flipV) {
                    filter += "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
                }
                else if (this.flipH) {
                    filter += "progid:DXImageTransform.Microsoft.BasicImage(mirror=1)";
                }
                else if (this.flipV) {
                    filter += "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";
                }
                if (img.style.filter != filter) {
                    img.style.filter = filter;
                }
                if (this.rotation != 0) {
                    Five.Utils.setPrefixedStyle(img.style, "transform", "rotate(" + this.rotation + "deg)");
                }
                else {
                    Five.Utils.setPrefixedStyle(img.style, "transform", "");
                }
                img.style.width = elem.style.width;
                img.style.height = elem.style.height;
                elem.style.backgroundImage = "";
                elem.appendChild(img);
            }
            else {
                this.setTransparentBackgroundImage(this.node);
            }
        };
        return ImageShape;
    }(Five.RectangleShape));
    Five.ImageShape = ImageShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var LabelShape = (function (_super) {
        __extends(LabelShape, _super);
        function LabelShape(bounds, fill, stroke, strokewidth) {
            if (strokewidth === void 0) { strokewidth = 1; }
            var _this = _super.call(this, bounds, fill, stroke, strokewidth) || this;
            _this.spacing = 2;
            _this.indicatorSize = 10;
            _this.indicatorSpacing = 2;
            return _this;
        }
        LabelShape.factory = function () { return new LabelShape(null, null, null); };
        LabelShape.prototype.init = function (initializer) {
            _super.prototype.init.call(this, initializer);
            if (this.indicatorShape != null) {
                this.indicator = this.indicatorShape();
                this.indicator.dialect = this.dialect;
                this.indicator.init(Five.ElementInitializer(this.node));
            }
        };
        LabelShape.prototype.redraw = function () {
            if (this.indicator != null) {
                this.indicator.fill = this.indicatorColor;
                this.indicator.stroke = this.indicatorStrokeColor;
                this.indicator.gradient = this.indicatorGradientColor;
                this.indicator.direction = this.indicatorDirection;
            }
            _super.prototype.redraw.call(this);
        };
        LabelShape.prototype.isHtmlAllowed = function () {
            return _super.prototype.isHtmlAllowed.call(this) && this.indicatorColor == null && this.indicatorShape == null;
        };
        LabelShape.prototype.paintForeground = function (c, x, y, w, h) {
            this.paintImage(c, x, y, w, h);
            this.paintIndicator(c, x, y, w, h);
            _super.prototype.paintForeground.call(this, c, x, y, w, h);
        };
        LabelShape.prototype.paintImage = function (c, x, y, w, h) {
            if (this.image != null) {
                var bounds = this.getImageBounds(x, y, w, h);
                c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);
            }
        };
        LabelShape.prototype.getImageBounds = function (x, y, w, h) {
            var align = this.style.imageAlign || Five.HorizontalAlign.Left;
            var valign = this.style.imageVerticalAlign || Five.VerticalAlign.Middle;
            var width = this.style.imageWidth || Five.Constants.defaultImagesize;
            var height = this.style.imageHeight || Five.Constants.defaultImagesize;
            var spacing = (this.style.spacing || this.spacing) + 5;
            if (align == Five.HorizontalAlign.Center) {
                x += (w - width) / 2;
            }
            else if (align == Five.HorizontalAlign.Right) {
                x += w - width - spacing;
            }
            else {
                x += spacing;
            }
            if (valign == Five.VerticalAlign.Top) {
                y += spacing;
            }
            else if (valign == Five.VerticalAlign.Bottom) {
                y += h - height - spacing;
            }
            else {
                y += (h - height) / 2;
            }
            return new Five.Rectangle(x, y, width, height);
        };
        LabelShape.prototype.paintIndicator = function (c, x, y, w, h) {
            if (this.indicator != null) {
                this.indicator.bounds = this.getIndicatorBounds(x, y, w, h);
                this.indicator.paint(c);
            }
            else if (this.indicatorImage != null) {
                var bounds = this.getIndicatorBounds(x, y, w, h);
                c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);
            }
        };
        LabelShape.prototype.getIndicatorBounds = function (x, y, w, h) {
            var align = this.style.imageAlign || Five.HorizontalAlign.Left;
            var valign = this.style.imageVerticalAlign || Five.VerticalAlign.Middle;
            var width = this.style.indicatorWidth || this.indicatorSize;
            var height = this.style.indicatorHeight || this.indicatorSize;
            var spacing = this.spacing + 5;
            if (align == Five.HorizontalAlign.Right) {
                x += w - width - spacing;
            }
            else if (align == Five.HorizontalAlign.Center) {
                x += (w - width) / 2;
            }
            else {
                x += spacing;
            }
            if (valign == Five.VerticalAlign.Bottom) {
                y += h - height - spacing;
            }
            else if (valign == Five.VerticalAlign.Top) {
                y += spacing;
            }
            else {
                y += (h - height) / 2;
            }
            return new Five.Rectangle(x, y, width, height);
        };
        LabelShape.prototype.redrawHtmlShape = function () {
            _super.prototype.redrawHtmlShape.call(this);
            while (this.node.hasChildNodes()) {
                this.node.removeChild(this.node.lastChild);
            }
            if (this.image != null) {
                var node = document.createElement("img");
                node.style.position = "relative";
                node.setAttribute("border", "0");
                var bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
                bounds.x -= this.bounds.x;
                bounds.y -= this.bounds.y;
                node.style.left = Math.round(bounds.x) + "px";
                node.style.top = Math.round(bounds.y) + "px";
                node.style.width = Math.round(bounds.width) + "px";
                node.style.height = Math.round(bounds.height) + "px";
                node.src = this.image;
                this.node.appendChild(node);
            }
        };
        LabelShape.imageSize = Five.Constants.defaultImagesize;
        return LabelShape;
    }(Five.RectangleShape));
    Five.LabelShape = LabelShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ElbowStyle;
    (function (ElbowStyle) {
        ElbowStyle[ElbowStyle["Horizontal"] = 0] = "Horizontal";
        ElbowStyle[ElbowStyle["Vertical"] = 1] = "Vertical";
    })(ElbowStyle = Five.ElbowStyle || (Five.ElbowStyle = {}));
    var ShapeStyle;
    (function (ShapeStyle) {
        ShapeStyle[ShapeStyle["Rectangle"] = 1] = "Rectangle";
        ShapeStyle[ShapeStyle["Ellipse"] = 2] = "Ellipse";
        ShapeStyle[ShapeStyle["DoubleEllipse"] = 3] = "DoubleEllipse";
        ShapeStyle[ShapeStyle["Rhombus"] = 4] = "Rhombus";
        ShapeStyle[ShapeStyle["Line"] = 5] = "Line";
        ShapeStyle[ShapeStyle["Image"] = 6] = "Image";
        ShapeStyle[ShapeStyle["Arrow"] = 7] = "Arrow";
        ShapeStyle[ShapeStyle["Label"] = 8] = "Label";
        ShapeStyle[ShapeStyle["Cylinder"] = 9] = "Cylinder";
        ShapeStyle[ShapeStyle["Swimlane"] = 10] = "Swimlane";
        ShapeStyle[ShapeStyle["Connector"] = 11] = "Connector";
        ShapeStyle[ShapeStyle["Actor"] = 12] = "Actor";
        ShapeStyle[ShapeStyle["Cloud"] = 13] = "Cloud";
        ShapeStyle[ShapeStyle["Triangle"] = 14] = "Triangle";
        ShapeStyle[ShapeStyle["Hexagon"] = 15] = "Hexagon";
    })(ShapeStyle = Five.ShapeStyle || (Five.ShapeStyle = {}));
    var ArrowStyle;
    (function (ArrowStyle) {
        ArrowStyle[ArrowStyle["Classic"] = 1] = "Classic";
        ArrowStyle[ArrowStyle["Block"] = 2] = "Block";
        ArrowStyle[ArrowStyle["Open"] = 3] = "Open";
        ArrowStyle[ArrowStyle["Oval"] = 4] = "Oval";
        ArrowStyle[ArrowStyle["Diamond"] = 5] = "Diamond";
        ArrowStyle[ArrowStyle["DiamondThin"] = 6] = "DiamondThin";
        ArrowStyle[ArrowStyle["None"] = 7] = "None";
    })(ArrowStyle = Five.ArrowStyle || (Five.ArrowStyle = {}));
    var PerimeterStyle;
    (function (PerimeterStyle) {
        PerimeterStyle[PerimeterStyle["Ellipse"] = 1] = "Ellipse";
        PerimeterStyle[PerimeterStyle["Rectangle"] = 2] = "Rectangle";
        PerimeterStyle[PerimeterStyle["Rhombus"] = 3] = "Rhombus";
        PerimeterStyle[PerimeterStyle["Hexagon"] = 4] = "Hexagon";
        PerimeterStyle[PerimeterStyle["Triangle"] = 5] = "Triangle";
    })(PerimeterStyle = Five.PerimeterStyle || (Five.PerimeterStyle = {}));
    var FontStyle;
    (function (FontStyle) {
        FontStyle[FontStyle["Bold"] = 1] = "Bold";
        FontStyle[FontStyle["Italic"] = 2] = "Italic";
        FontStyle[FontStyle["Underline"] = 4] = "Underline";
        FontStyle[FontStyle["Shadow"] = 8] = "Shadow";
    })(FontStyle = Five.FontStyle || (Five.FontStyle = {}));
    var EdgeKind;
    (function (EdgeKind) {
        EdgeKind[EdgeKind["Elbow"] = 1] = "Elbow";
        EdgeKind[EdgeKind["EntityRelation"] = 2] = "EntityRelation";
        EdgeKind[EdgeKind["Loop"] = 3] = "Loop";
        EdgeKind[EdgeKind["Sidetoside"] = 4] = "Sidetoside";
        EdgeKind[EdgeKind["Toptobottom"] = 5] = "Toptobottom";
        EdgeKind[EdgeKind["TopToSide"] = 6] = "TopToSide";
        EdgeKind[EdgeKind["Orthogonal"] = 7] = "Orthogonal";
        EdgeKind[EdgeKind["Segment"] = 8] = "Segment";
    })(EdgeKind = Five.EdgeKind || (Five.EdgeKind = {}));
    var VerticalAlign;
    (function (VerticalAlign) {
        VerticalAlign[VerticalAlign["Top"] = 1] = "Top";
        VerticalAlign[VerticalAlign["Middle"] = 2] = "Middle";
        VerticalAlign[VerticalAlign["Bottom"] = 3] = "Bottom";
    })(VerticalAlign = Five.VerticalAlign || (Five.VerticalAlign = {}));
    var HorizontalAlign;
    (function (HorizontalAlign) {
        HorizontalAlign[HorizontalAlign["Center"] = 1] = "Center";
        HorizontalAlign[HorizontalAlign["Right"] = 2] = "Right";
        HorizontalAlign[HorizontalAlign["Left"] = 3] = "Left";
    })(HorizontalAlign = Five.HorizontalAlign || (Five.HorizontalAlign = {}));
    var Overflow;
    (function (Overflow) {
        Overflow[Overflow["visible"] = 0] = "visible";
        Overflow[Overflow["hidden"] = 1] = "hidden";
        Overflow[Overflow["scroll"] = 2] = "scroll";
        Overflow[Overflow["auto"] = 3] = "auto";
        Overflow[Overflow["inherit"] = 4] = "inherit";
        Overflow[Overflow["width"] = 5] = "width";
        Overflow[Overflow["fill"] = 6] = "fill";
    })(Overflow = Five.Overflow || (Five.Overflow = {}));
    var Whitespace;
    (function (Whitespace) {
        Whitespace[Whitespace["normal"] = 0] = "normal";
        Whitespace[Whitespace["nowrap"] = 1] = "nowrap";
        Whitespace[Whitespace["pre"] = 2] = "pre";
        Whitespace[Whitespace["preWrap"] = 3] = "preWrap";
        Whitespace[Whitespace["preLine"] = 4] = "preLine";
        Whitespace[Whitespace["inherit"] = 5] = "inherit";
        Whitespace[Whitespace["wrap"] = 6] = "wrap";
    })(Whitespace = Five.Whitespace || (Five.Whitespace = {}));
    var Style = (function () {
        function Style() {
            this.fontSize = 12;
            this.startSize = Five.Constants.defaultMarkersize;
            this.endSize = Five.Constants.defaultMarkersize;
            this.spacingTop = 0;
            this.spacingRight = 0;
            this.spacingBottom = 0;
            this.spacingLeft = 0;
            this.spacing = 0;
            this.rotation = 0;
            this.preserveImageAspect = true;
            this.movable = true;
            this.arcSize = 20;
            this.startFill = true;
            this.endFill = true;
            this.margin = null;
            this.segment = Five.Constants.entitySegment;
            this.portConstraintRotation = false;
            this.loop = EdgeKind.Loop;
            this.noEdge = false;
            this.gradientDirection = Five.Direction.South;
            this.elbow = ElbowStyle.Horizontal;
            this.swimlaneFillColor = "none";
            this.swimlaneLine = true;
            this.separatorColor = "none";
            this.exitPerimeter = true;
            this.entryPerimeter = true;
        }
        return Style;
    }());
    var AppliedStyle = (function () {
        function AppliedStyle(name) {
            this.name = name;
        }
        return AppliedStyle;
    }());
    Five.AppliedStyle = AppliedStyle;
    function defaultStyle() {
        return new Style();
    }
    Five.defaultStyle = defaultStyle;
    var Stylesheet = (function () {
        function Stylesheet() {
            this.styles = {};
            this.putDefaultVertexStyle(this.createDefaultVertexStyle());
            this.putDefaultEdgeStyle(this.createDefaultEdgeStyle());
        }
        Stylesheet.prototype.getDefaultEdgeStyle = function () {
            return this.styles["defaultEdge"];
        };
        Stylesheet.prototype.getDefaultVertexStyle = function () {
            return this.styles["defaultVertex"];
        };
        Stylesheet.prototype.createDefaultVertexStyle = function () {
            var style = defaultStyle();
            style.shape = ShapeStyle.Rectangle;
            style.perimeter = PerimeterStyle.Rectangle;
            style.vAlign = VerticalAlign.Middle;
            style.hAlign = HorizontalAlign.Center;
            style.fillColor = "#C3D9FF";
            style.strokeColor = "#6482B9";
            style.fontColor = "#774400";
            return style;
        };
        Stylesheet.prototype.createDefaultEdgeStyle = function () {
            var style = defaultStyle();
            style.shape = ShapeStyle.Connector;
            style.endArrow = ArrowStyle.Classic;
            style.vAlign = VerticalAlign.Middle;
            style.hAlign = HorizontalAlign.Center;
            style.strokeColor = "#6482B9";
            style.fontColor = "#446299";
            return style;
        };
        Stylesheet.prototype.putDefaultVertexStyle = function (style) {
            this.putCellStyle("defaultVertex", style);
        };
        Stylesheet.prototype.putDefaultEdgeStyle = function (style) {
            this.putCellStyle("defaultEdge", style);
        };
        Stylesheet.prototype.putCellStyle = function (name, style) {
            this.styles[name] = style;
        };
        Stylesheet.prototype.getCellStyle = function (styleApp, isEdge) {
            var style = this.styles[styleApp.name] || (isEdge ? this.getDefaultEdgeStyle() : this.getDefaultVertexStyle());
            if (styleApp.exitPerimeter != null)
                style.exitPerimeter = styleApp.exitPerimeter;
            if (styleApp.entryPerimeter != null)
                style.entryPerimeter = styleApp.entryPerimeter;
            if (styleApp.startSize != null)
                style.startSize = styleApp.startSize;
            if (styleApp.exitX != null)
                style.exitX = styleApp.exitX;
            if (styleApp.entryX != null)
                style.entryX = styleApp.entryX;
            if (styleApp.exitY != null)
                style.exitY = styleApp.exitY;
            if (styleApp.entryY != null)
                style.entryY = styleApp.entryY;
            if (styleApp.noEdgeStyle != null)
                style.noEdge = styleApp.noEdgeStyle;
            if (styleApp.noEdgeStyle != null)
                style.noEdge = styleApp.noEdgeStyle;
            if (styleApp.orthogonal != null)
                style.orthogonal = styleApp.orthogonal;
            if (styleApp.rotation != null)
                style.rotation = styleApp.rotation;
            return style;
        };
        return Stylesheet;
    }());
    Five.Stylesheet = Stylesheet;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellRenderer = (function () {
        function CellRenderer() {
            this.defaultEdgeShape = Five.ConnectorShape.factory;
            this.defaultVertexShape = Five.RectangleShape.factory;
            this.legacyControlPosition = true;
        }
        CellRenderer.registerShape = function (key, shape) {
            CellRenderer.defaultShapes[key] = shape;
        };
        CellRenderer.registerDefaultShapes = function () {
            CellRenderer.registerShape(Five.ShapeStyle.Rectangle, Five.RectangleShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Ellipse, Five.EllipseShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Rhombus, Five.RhombusShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Cylinder, Five.CylinderShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Connector, Five.ConnectorShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Actor, Five.ActorShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Triangle, Five.TriangleShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Hexagon, Five.HexagonShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Cloud, Five.CloudShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Line, Five.LineShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Arrow, Five.ArrowShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.DoubleEllipse, Five.DoubleEllipseShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Swimlane, Five.SwimlaneShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Image, Five.ImageShape.factory);
            CellRenderer.registerShape(Five.ShapeStyle.Label, Five.LabelShape.factory);
        };
        CellRenderer.prototype.initializeShape = function (state) {
            state.shape.dialect = state.view.graph.dialect;
            this.configureShape(state);
            state.shape.init(Five.ElementInitializer(state.view.getDrawPane()));
        };
        CellRenderer.prototype.createShape = function (state) {
            if (state.style != null) {
                var stencil = Five.StencilRegistry.getStencil(state.style.shape);
                if (stencil != null) {
                    state.shape = new Five.Shape(stencil);
                }
                else {
                    var ctor = this.getShapeConstructor(state);
                    state.shape = ctor();
                }
            }
        };
        CellRenderer.prototype.createIndicatorShape = function (state) {
            state.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));
        };
        CellRenderer.prototype.getShape = function (style) {
            return (style != null) ? CellRenderer.defaultShapes[style] : null;
        };
        CellRenderer.prototype.getShapeConstructor = function (state) {
            var ctor = this.getShape(state.style.shape);
            if (ctor == null) {
                ctor = (Five.Cells.isEdge(state.cell)) ?
                    this.defaultEdgeShape : this.defaultVertexShape;
            }
            return ctor;
        };
        CellRenderer.prototype.configureShape = function (state) {
            state.shape.apply(state);
            state.shape.image = state.view.graph.getImage(state);
            state.shape.indicatorColor = state.view.graph.getIndicatorColor(state);
            state.shape.indicatorStrokeColor = state.style.indicatorStrokeColor;
            state.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);
            state.shape.indicatorDirection = state.style.indicatorDirection;
            state.shape.indicatorImage = state.view.graph.getIndicatorImage(state);
            this.postConfigureShape(state);
        };
        CellRenderer.prototype.postConfigureShape = function (state) {
        };
        CellRenderer.prototype.getLabelValue = function (state) {
            return state.view.graph.getLabel(state.cell);
        };
        CellRenderer.prototype.createLabel = function (state, value) {
            var _this = this;
            var graph = state.view.graph;
            if (state.style.fontSize > 0 || state.style.fontSize == null) {
                var isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && Five.Utils.isNode(value)));
                state.text = new Five.TextShape(value, new Five.Rectangle(0, 0), (state.style.hAlign || Five.HorizontalAlign.Center), graph.getVerticalAlign(state), state.style.fontColor, state.style.fontFamily, state.style.fontSize, state.style.fontStyle, state.style.spacing, state.style.spacingTop, state.style.spacingRight, state.style.spacingBottom, state.style.spacingLeft, !state.style.portrait, state.style.labelBackgroundColor, state.style.LabelBorderColor, graph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell), graph.isLabelClipped(state.cell), state.style.overflow, state.style.labelPadding);
                state.text.opacity = state.style.textOpacity || 100;
                state.text.dialect = (isForceHtml) ? Five.Dialect.StrictHtml : state.view.graph.dialect;
                state.text.style = state.style;
                state.text.state = state;
                this.initializeLabel(state);
                var forceGetCell = false;
                var getState = function (evt) {
                    var result = state;
                    if (Five.Client.isTouch || forceGetCell) {
                        var x = Five.Events.getClientX(evt);
                        var y = Five.Events.getClientY(evt);
                        var pt = graph.container.convertPoint(x, y);
                        result = graph.view.getState(graph.getCellAt(pt.x, pt.y));
                    }
                    return result;
                };
                Five.Events.addGestureListeners(state.text.node, function (evt) {
                    if (_this.isLabelEvent(state, evt)) {
                        graph.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt, state));
                        forceGetCell = graph.dialect !== Five.Dialect.Svg &&
                            Five.Events.getSource(evt).nodeName === "IMG";
                    }
                }, function (evt) {
                    if (_this.isLabelEvent(state, evt)) {
                        graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt, getState(evt)));
                    }
                }, function (evt) {
                    if (_this.isLabelEvent(state, evt)) {
                        graph.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(evt, getState(evt)));
                        forceGetCell = false;
                    }
                });
                if (graph.nativeDblClickEnabled) {
                    Five.Events.addListener(state.text.node, "dblclick", function (evt) {
                        if (_this.isLabelEvent(state, evt)) {
                            graph.dblClick(evt, state.cell);
                            Five.Events.consume(evt);
                        }
                    });
                }
            }
        };
        CellRenderer.prototype.initializeLabel = function (state) {
            if (Five.Client.isSvg && Five.Client.noFo && state.text.dialect != Five.Dialect.Svg) {
                state.text.init(state.view.graph.container);
            }
            else {
                state.text.init(Five.ElementInitializer(state.view.getDrawPane()));
            }
        };
        CellRenderer.prototype.createCellOverlays = function (state) {
            var graph = state.view.graph;
            var overlays = graph.getCellOverlays(state.cell);
            var dict = null;
            if (overlays != null) {
                dict = new Five.Dictionary();
                for (var i = 0; i < overlays.length; i++) {
                    var cellOverlay = overlays[i];
                    var shape = (state.overlays != null) ? state.overlays.remove(cellOverlay) : null;
                    if (shape == null) {
                        var tmp = new Five.ImageShape(new Five.Rectangle(0, 0, 0, 0), cellOverlay.image.src);
                        tmp.dialect = state.view.graph.dialect;
                        tmp.preserveImageAspect = false;
                        tmp.overlay = cellOverlay;
                        this.initializeOverlay(state, tmp);
                        this.installCellOverlayListeners(state, cellOverlay, tmp);
                        if (cellOverlay.cursor != null) {
                            var style = tmp.node.style;
                            style.cursor = cellOverlay.cursor;
                        }
                        dict.put(cellOverlay, tmp);
                    }
                    else {
                        dict.put(cellOverlay, shape);
                    }
                }
            }
            if (state.overlays != null) {
                state.overlays.visit(function (sh) {
                    sh.destroy();
                });
            }
            state.overlays = dict;
        };
        CellRenderer.prototype.initializeOverlay = function (state, overlay) {
            overlay.init(Five.ElementInitializer(state.view.getOverlayPane()));
        };
        CellRenderer.prototype.installCellOverlayListeners = function (state, overlay, shape) {
            var graph = state.view.graph;
            Five.Events.addListener(shape.node, "click", function (evt) {
                if (graph.isEditing()) {
                    graph.stopEditing(!graph.isInvokesStopCellEditing());
                }
                overlay.onClick.fire(new Five.ClickEvent(evt, state.cell));
            });
            Five.Events.addGestureListeners(shape.node, function (evt) { Five.Events.consume(evt); }, function (evt) { graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt, state)); });
            if (Five.Client.isTouch) {
                Five.Events.addListener(shape.node, "touchend", function (evt) {
                    overlay.onClick.fire(new Five.ClickEvent(evt, state.cell));
                });
            }
        };
        CellRenderer.prototype.createControl = function (state) {
            var graph = state.view.graph;
            var image = graph.getFoldingImage(state);
            if (graph.foldingEnabled && image != null) {
                if (state.control == null) {
                    var b = new Five.Rectangle(0, 0, image.width, image.height);
                    state.control = new Five.ImageShape(b, image.src);
                    state.control.preserveImageAspect = false;
                    state.control.dialect = graph.dialect;
                    this.initControl(state, state.control, true, function (evt) {
                        if (graph.isEnabled()) {
                            var collapse = !graph.isCellCollapsed(state.cell);
                            graph.foldCells(collapse, false, [state.cell]);
                            Five.Events.consume(evt);
                        }
                    });
                }
            }
            else if (state.control != null) {
                state.control.destroy();
                state.control = null;
            }
        };
        CellRenderer.prototype.initControl = function (state, control, handleEvents, clickHandler) {
            var graph = state.view.graph;
            var isForceHtml = graph.isHtmlLabel(state.cell) && Five.Client.noFo && graph.dialect == Five.Dialect.Svg;
            if (isForceHtml) {
                control.dialect = Five.Dialect.PreferHtml;
                control.init(graph.container);
                Five.Utils.nodeStyle(control.node).zIndex = "1";
            }
            else {
                control.init(Five.ElementInitializer(state.view.getOverlayPane()));
            }
            var node = control.node;
            if (clickHandler) {
                if (graph.isEnabled()) {
                    Five.Utils.nodeStyle(control.node).cursor = "pointer";
                }
                Five.Events.addListener(node, "click", clickHandler);
            }
            if (handleEvents) {
                Five.Events.addGestureListeners(node, function (evt) {
                    graph.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt, state));
                    Five.Events.consume(evt);
                }, function (evt) {
                    graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt, state));
                });
            }
            return node;
        };
        CellRenderer.prototype.private = function (state, evt) {
            return true;
        };
        CellRenderer.prototype.isLabelEvent = function (state, evt) {
            return true;
        };
        CellRenderer.prototype.isShapeEvent = function (state, evt) {
            return true;
        };
        CellRenderer.prototype.installListeners = function (state) {
            var _this = this;
            var graph = state.view.graph;
            var getState = function (evt) {
                var result = state;
                if ((graph.dialect !== Five.Dialect.Svg && Five.Events.getSource(evt).nodeName === "IMG") || Five.Client.isTouch) {
                    var x = Five.Events.getClientX(evt);
                    var y = Five.Events.getClientY(evt);
                    var pt = graph.container.convertPoint(x, y);
                    result = graph.view.getState(graph.getCellAt(pt.x, pt.y));
                }
                return result;
            };
            Five.Events.addGestureListeners(state.shape.node, Five.Utils.bind(this, function (evt) {
                if (_this.isShapeEvent(state, evt)) {
                    graph.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt, (state.shape != null && Five.Events.getSource(evt) == state.shape.node) ? null : state));
                }
            }), Five.Utils.bind(this, function (evt) {
                if (_this.isShapeEvent(state, evt)) {
                    graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt, (state.shape != null && Five.Events.getSource(evt) == state.shape.node) ? null : getState(evt)));
                }
            }), Five.Utils.bind(this, function (evt) {
                if (_this.isShapeEvent(state, evt)) {
                    graph.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(evt, (state.shape != null && Five.Events.getSource(evt) == state.shape.node) ? null : getState(evt)));
                }
            }));
            if (graph.nativeDblClickEnabled) {
                Five.Events.addListener(state.shape.node, "dblclick", Five.Utils.bind(this, function (evt) {
                    if (_this.isShapeEvent(state, evt)) {
                        graph.dblClick(evt, state.cell);
                        Five.Events.consume(evt);
                    }
                }));
            }
        };
        CellRenderer.prototype.redrawLabel = function (state, forced) {
            var value = this.getLabelValue(state);
            if (state.text == null && value != null && (value.length > 0)) {
                this.createLabel(state, value);
            }
            else if (state.text != null && (value == null || value.length == 0)) {
                state.text.destroy();
                state.text = null;
            }
            if (state.text != null) {
                var graph = state.view.graph;
                var wrapping = graph.isWrapping(state.cell);
                var clipping = graph.isLabelClipped(state.cell);
                var bounds = this.getLabelBounds(state);
                var isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && Five.Utils.isNode(value)));
                var dialect = (isForceHtml) ? Five.Dialect.StrictHtml : state.view.graph.dialect;
                if (forced || state.text.value != value || state.text.isWrapping != wrapping ||
                    state.text.isClipping != clipping || state.text.scale != state.view.scale ||
                    state.text.dialect != dialect || !state.text.bounds.equals(bounds)) {
                    state.text.dialect = dialect;
                    state.text.value = value;
                    state.text.bounds = bounds;
                    state.text.scale = this.getTextScale(state);
                    state.text.isWrapping = wrapping;
                    state.text.isClipping = clipping;
                    state.text.redraw();
                }
            }
        };
        CellRenderer.prototype.getTextScale = function (state) {
            return state.view.scale;
        };
        CellRenderer.prototype.getLabelBounds = function (state) {
            var graph = state.view.graph;
            var scale = state.view.scale;
            var isEdge = Five.Cells.isEdge(state.cell);
            var bounds = new Five.Rectangle(state.absoluteOffset.x, state.absoluteOffset.y);
            var tmp;
            if (isEdge) {
                var spacing = state.text.getSpacing();
                bounds.x += spacing.x * scale;
                bounds.y += spacing.y * scale;
                var geo = graph.getCellGeometry(state.cell);
                if (geo != null) {
                    bounds.width = Math.max(0, geo.width * scale);
                    bounds.height = Math.max(0, geo.height * scale);
                }
            }
            else {
                if (state.text.isPaintBoundsInverted()) {
                    tmp = bounds.x;
                    bounds.x = bounds.y;
                    bounds.y = tmp;
                }
                bounds.x += state.x;
                bounds.y += state.y;
                bounds.width = Math.max(1, state.width);
                bounds.height = Math.max(1, state.height);
            }
            if (state.text.isPaintBoundsInverted()) {
                var t = (state.width - state.height) / 2;
                bounds.x += t;
                bounds.y -= t;
                tmp = bounds.width;
                bounds.width = bounds.height;
                bounds.height = tmp;
            }
            if (state.shape != null) {
                bounds = state.shape.getLabelBounds(bounds);
            }
            var lw = state.style.labelWidth;
            if (lw != null) {
                bounds.width = lw * scale;
            }
            if (!isEdge) {
                this.rotateLabelBounds(state, bounds);
            }
            return bounds;
        };
        CellRenderer.prototype.rotateLabelBounds = function (state, bounds) {
            bounds.x -= state.text.margin.x * bounds.width;
            if (state.text.margin.y == -0.5) {
                bounds.y -= state.text.margin.y * bounds.height;
                bounds.height += state.text.margin.y * bounds.height;
            }
            else
                bounds.y -= state.text.margin.y * bounds.height;
            if (state.style.overflow != Five.Overflow.fill && state.style.overflow != Five.Overflow.width) {
                var s = state.view.scale;
                var spacing = state.text.getSpacing();
                bounds.x += spacing.x * s;
                bounds.y += spacing.y * s;
                var hpos = state.style.labelPosition || Five.HorizontalAlign.Center;
                var vpos = state.style.verticalLabelPosition || Five.VerticalAlign.Middle;
                var lw = state.style.labelWidth;
                bounds.width = Math.max(0, bounds.width - ((hpos == Five.HorizontalAlign.Center && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));
                bounds.height = Math.max(0, bounds.height - ((vpos == Five.VerticalAlign.Middle) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));
            }
            var theta = state.text.getTextRotation();
            if (theta != 0 && Five.Cells.isVertex(state.cell)) {
                var cx = state.getCenterX();
                var cy = state.getCenterY();
                if (bounds.x != cx || bounds.y != cy) {
                    var rad = theta * (Math.PI / 180);
                    var pt = Five.Utils.getRotatedPoint(new Five.Point(bounds.x, bounds.y), Math.cos(rad), Math.sin(rad), new Five.Point(cx, cy));
                    bounds.x = pt.x;
                    bounds.y = pt.y;
                }
            }
        };
        CellRenderer.prototype.redrawCellOverlays = function (state, forced) {
            this.createCellOverlays(state);
            if (state.overlays != null) {
                var rot = Five.Utils.mod(state.style.rotation || 0, 90);
                var rad = Five.Utils.toRadians(rot);
                var cos = Math.cos(rad);
                var sin = Math.sin(rad);
                state.overlays.visit(function (shape) {
                    var bounds = shape.overlay.getBounds(state);
                    if (!Five.Cells.isEdge(state.cell)) {
                        if (state.shape != null && rot != 0) {
                            var cx = bounds.getCenterX();
                            var cy = bounds.getCenterY();
                            var point = Five.Utils.getRotatedPoint(new Five.Point(cx, cy), cos, sin, new Five.Point(state.getCenterX(), state.getCenterY()));
                            cx = point.x;
                            cy = point.y;
                            bounds.x = Math.round(cx - bounds.width / 2);
                            bounds.y = Math.round(cy - bounds.height / 2);
                        }
                    }
                    if (forced || shape.bounds == null || shape.scale != state.view.scale ||
                        !shape.bounds.equals(bounds)) {
                        shape.bounds = bounds;
                        shape.scale = state.view.scale;
                        shape.redraw();
                    }
                });
            }
        };
        CellRenderer.prototype.redrawControl = function (state, forced) {
            var image = state.view.graph.getFoldingImage(state);
            if (state.control != null && image != null) {
                var bounds = this.getControlBounds(state, image.width, image.height);
                var r = (this.legacyControlPosition) ?
                    state.style.rotation || 0 :
                    state.shape.getTextRotation();
                var s = state.view.scale;
                if (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||
                    state.control.rotation != r) {
                    state.control.rotation = r;
                    state.control.bounds = bounds;
                    state.control.scale = s;
                    state.control.redraw();
                }
            }
        };
        CellRenderer.prototype.getControlBounds = function (state, w, h) {
            if (state.control != null) {
                var s = state.view.scale;
                var cx = state.getCenterX();
                var cy = state.getCenterY();
                if (!Five.Cells.isEdge(state.cell)) {
                    cx = state.x + w * s;
                    cy = state.y + h * s;
                    if (state.shape != null) {
                        var rot = state.shape.getShapeRotation();
                        if (this.legacyControlPosition) {
                            rot = state.style.rotation || 0;
                        }
                        else {
                            if (state.shape.isPaintBoundsInverted()) {
                                var t = (state.width - state.height) / 2;
                                cx += t;
                                cy -= t;
                            }
                        }
                        if (rot != 0) {
                            var rad = Five.Utils.toRadians(rot);
                            var cos = Math.cos(rad);
                            var sin = Math.sin(rad);
                            var point = Five.Utils.getRotatedPoint(new Five.Point(cx, cy), cos, sin, new Five.Point(state.getCenterX(), state.getCenterY()));
                            cx = point.x;
                            cy = point.y;
                        }
                    }
                }
                return (Five.Cells.isEdge(state.cell)) ?
                    new Five.Rectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))
                    : new Five.Rectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));
            }
            return null;
        };
        CellRenderer.prototype.insertStateAfter = function (state, node, htmlNode) {
            var shapes = this.getShapesForState(state);
            for (var i = 0; i < shapes.length; i++) {
                if (shapes[i] != null) {
                    var html = shapes[i].node.parentNode != state.view.getDrawPane();
                    var temp = (html) ? htmlNode : node;
                    if (temp != null && temp.nextSibling != shapes[i].node) {
                        if (temp.nextSibling == null) {
                            temp.parentNode.appendChild(shapes[i].node);
                        }
                        else {
                            temp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);
                        }
                    }
                    else if (temp == null) {
                        if (state.view.graph.container.is(shapes[i].node.parentNode)) {
                            var canvas = state.view.canvas;
                            while (canvas.parentNode != null && state.view.graph.container.is(canvas.parentNode)) {
                                canvas = (canvas.parentNode);
                            }
                            if (canvas.nextSibling != null && canvas.nextSibling != shapes[i].node) {
                                shapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);
                            }
                        }
                        else if (shapes[i].node.parentNode.firstChild != null && shapes[i].node.parentNode.firstChild != shapes[i].node) {
                            shapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);
                        }
                    }
                    if (html) {
                        htmlNode = shapes[i].node;
                    }
                    else {
                        node = shapes[i].node;
                    }
                }
            }
            return [node, htmlNode];
        };
        CellRenderer.prototype.getShapesForState = function (state) {
            return [state.shape, state.text];
        };
        CellRenderer.prototype.redrawShape = function (state, force, rendering) {
            var shapeChanged = false;
            if (state.shape != null) {
                if (state.shape.node == null) {
                    this.createIndicatorShape(state);
                    this.initializeShape(state);
                    this.createCellOverlays(state);
                    this.installListeners(state);
                }
                this.createControl(state);
                if (!Five.Utils.equalEntries(state.shape.style, state.style)) {
                    this.configureShape(state);
                    force = true;
                }
                if (force || state.shape.bounds == null || state.shape.scale != state.view.scale ||
                    (state.absolutePoints == null && !state.shape.bounds.equals(state)) ||
                    (state.absolutePoints != null && !Five.Utils.equalPoints(state.shape.points, state.absolutePoints))) {
                    if (state.absolutePoints != null) {
                        state.shape.points = state.absolutePoints.slice();
                        state.shape.bounds = null;
                    }
                    else {
                        state.shape.points = null;
                        state.shape.bounds = new Five.Rectangle(state.x, state.y, state.width, state.height);
                    }
                    state.shape.scale = state.view.scale;
                    if (rendering == null || rendering) {
                        state.shape.redraw();
                    }
                    else {
                        state.shape.updateBoundingBox();
                    }
                    shapeChanged = true;
                }
            }
            return shapeChanged;
        };
        CellRenderer.prototype.destroy = function (state) {
            if (state.shape != null) {
                if (state.text != null) {
                    state.text.destroy();
                    state.text = null;
                }
                if (state.overlays != null) {
                    state.overlays.visit(function (shape) {
                        shape.destroy();
                    });
                    state.overlays = null;
                }
                if (state.control != null) {
                    state.control.destroy();
                    state.control = null;
                }
                state.shape.destroy();
                state.shape = null;
            }
        };
        CellRenderer.prototype.redraw = function (state, force, rendering) {
            var shapeChanged = this.redrawShape(state, force, rendering);
            if (state.shape != null && (rendering == null || rendering)) {
                this.redrawLabel(state, shapeChanged);
                this.redrawCellOverlays(state, shapeChanged);
                this.redrawControl(state, shapeChanged);
            }
        };
        CellRenderer.defaultShapes = {};
        return CellRenderer;
    }());
    Five.CellRenderer = CellRenderer;
    CellRenderer.registerDefaultShapes();
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellState = (function (_super) {
        __extends(CellState, _super);
        function CellState(view, cell, style) {
            var _this = _super.call(this, 0, 0, 0, 0) || this;
            _this.view = null;
            _this.cell = null;
            _this.style = null;
            _this.invalid = true;
            _this.origin = null;
            _this._absoluteOffset = null;
            _this.visibleSourceState = null;
            _this.visibleTargetState = null;
            _this.terminalDistance = 0;
            _this.length = 0;
            _this.segments = null;
            _this.shape = null;
            _this.text = null;
            _this.view = view;
            _this.cell = cell;
            _this.style = style;
            _this.origin = new Five.Point();
            _this.absoluteOffset = new Five.Point();
            return _this;
        }
        Object.defineProperty(CellState.prototype, "absolutePoints", {
            get: function () { return this._absolutePoints; },
            set: function (value) {
                if (value)
                    for (var i = 0; i < value.length; i++)
                        if (value[i])
                            value[i].check();
                this._absolutePoints = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CellState.prototype, "absoluteOffset", {
            get: function () {
                return this._absoluteOffset;
            },
            set: function (value) {
                this._absoluteOffset = value;
            },
            enumerable: true,
            configurable: true
        });
        CellState.prototype.getPerimeterBounds = function (border, bounds) {
            if (border === void 0) { border = 0; }
            bounds = (bounds != null) ? bounds : new Five.Rectangle(this.x, this.y, this.width, this.height);
            if (this.shape != null && this.shape.stencil != null) {
                var aspect = this.shape.stencil.computeAspect(bounds.x, bounds.y, bounds.width, bounds.height);
                bounds.x = aspect.x;
                bounds.y = aspect.y;
                bounds.width = this.shape.stencil.w0 * aspect.width;
                bounds.height = this.shape.stencil.h0 * aspect.height;
            }
            if (border !== 0) {
                bounds.grow(border);
            }
            return bounds;
        };
        CellState.prototype.setAbsoluteTerminalPoint = function (point, isSource) {
            if (isSource) {
                if (this.absolutePoints == null) {
                    this.absolutePoints = [];
                }
                if (this.absolutePoints.length == 0) {
                    this.absolutePoints.push(point);
                }
                else {
                    this.absolutePoints[0] = point;
                }
            }
            else {
                if (this.absolutePoints == null) {
                    this.absolutePoints = [];
                    this.absolutePoints.push(null);
                    this.absolutePoints.push(point);
                }
                else if (this.absolutePoints.length == 1) {
                    this.absolutePoints.push(point);
                }
                else {
                    this.absolutePoints[this.absolutePoints.length - 1] = point;
                }
            }
        };
        CellState.prototype.setCursor = function (cursor) {
            if (this.shape != null) {
                this.shape.setCursor(cursor);
            }
            if (this.text != null) {
                this.text.setCursor(cursor);
            }
        };
        CellState.prototype.getVisibleTerminal = function (source) {
            var tmp = this.getVisibleTerminalState(source);
            return (tmp != null) ? tmp.cell : null;
        };
        CellState.prototype.getVisibleTerminalState = function (source) {
            return (source) ? this.visibleSourceState : this.visibleTargetState;
        };
        CellState.prototype.setVisibleTerminalState = function (terminalState, source) {
            if (source) {
                this.visibleSourceState = terminalState;
            }
            else {
                this.visibleTargetState = terminalState;
            }
        };
        CellState.prototype.getCellBounds = function () {
            return this.cellBounds;
        };
        CellState.prototype.getPaintBounds = function () {
            return this.paintBounds;
        };
        CellState.prototype.updateCachedBounds = function () {
            var tr = this.view.translate;
            var s = this.view.scale;
            this.cellBounds = new Five.Rectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);
            this.paintBounds = Five.Utils.clone(this.cellBounds);
            if (this.shape != null && this.shape.isPaintBoundsInverted()) {
                this.paintBounds.rotate90();
            }
        };
        CellState.prototype.destroy = function () {
            this.view.graph.cellRenderer.destroy(this);
        };
        CellState.prototype.clone = function () {
            var clone = new CellState(this.view, this.cell, this.style);
            if (this.absolutePoints != null) {
                clone.absolutePoints = [];
                for (var i = 0; i < this.absolutePoints.length; i++) {
                    clone.absolutePoints[i] = this.absolutePoints[i].clone();
                }
            }
            if (this.origin != null) {
                clone.origin = this.origin.clone();
            }
            if (this.absoluteOffset != null) {
                clone.absoluteOffset = this.absoluteOffset.clone();
            }
            clone.terminalDistance = this.terminalDistance;
            clone.segments = this.segments;
            clone.length = this.length;
            clone.x = this.x;
            clone.y = this.y;
            clone.width = this.width;
            clone.height = this.height;
            return clone;
        };
        return CellState;
    }(Five.Rectangle));
    Five.CellState = CellState;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ChildChange = (function () {
        function ChildChange(model, parent, child, index) {
            this.model = model;
            this.parent = parent;
            this.index = index;
            this.child = child;
            this.previous = parent;
            this.previousIndex = index;
            this.cell = child;
        }
        ChildChange.prototype.execute = function () {
            var tmp = Five.Cells.getParent(this.child);
            var tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;
            if (this.previous == null) {
                this.connect(this.child, false);
            }
            tmp = this.model.parentForCellChanged(this.child, this.previous, this.previousIndex);
            if (this.previous != null) {
                this.connect(this.child, true);
            }
            this.parent = this.previous;
            this.previous = tmp;
            this.index = this.previousIndex;
            this.previousIndex = tmp2;
        };
        ChildChange.prototype.connect = function (cell, isConnect) {
            isConnect = (isConnect != null) ? isConnect : true;
            var source = cell.getTerminal(true);
            var target = cell.getTerminal(false);
            if (source != null) {
                if (isConnect) {
                    this.model.terminalForCellChanged(cell, source, true);
                }
                else {
                    this.model.terminalForCellChanged(cell, null, true);
                }
            }
            if (target != null) {
                if (isConnect) {
                    this.model.terminalForCellChanged(cell, target, false);
                }
                else {
                    this.model.terminalForCellChanged(cell, null, false);
                }
            }
            cell.setTerminal(source, true);
            cell.setTerminal(target, false);
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                this.connect(Five.Cells.getChildAt(cell, i), isConnect);
            }
        };
        return ChildChange;
    }());
    Five.ChildChange = ChildChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var BasicLayout = (function () {
        function BasicLayout(graph) {
            this.graph = null;
            this.useBoundingBox = true;
            this.parent = null;
            this.graph = graph;
        }
        BasicLayout.prototype.moveCell = function (cell, x, y) { };
        BasicLayout.prototype.execute = function (parent) { };
        BasicLayout.prototype.getGraph = function () {
            return this.graph;
        };
        BasicLayout.prototype.getConstraint = function (key, cell, edge, source) {
            var state = this.graph.view.getState(cell);
            var style = (state != null) ? state.style : this.graph.getCellStyle(cell);
            return (style != null) ? style[key] : null;
        };
        BasicLayout.prototype.traverse = function (vertex, directed, func, edge, visited) {
            if (func != null && vertex != null) {
                visited = visited || [];
                var id = Five.CellPath.create(vertex);
                if (visited[id] == null) {
                    visited[id] = vertex;
                    var result = func(vertex, edge);
                    if (result == null || result) {
                        var edgeCount = Five.Cells.getEdgeCount(vertex);
                        if (edgeCount > 0) {
                            for (var i = 0; i < edgeCount; i++) {
                                var e = Five.Cells.getEdgeAt(vertex, i);
                                var isSource = Five.Cells.getTerminal(e, true) === vertex;
                                if (!directed || isSource) {
                                    var next = this.graph.view.getVisibleTerminal(e, !isSource);
                                    this.traverse(next, directed, func, e, visited);
                                }
                            }
                        }
                    }
                }
            }
        };
        BasicLayout.prototype.isVertexMovable = function (cell) {
            return this.graph.isCellMovable(cell);
        };
        BasicLayout.prototype.isVertexIgnored = function (vertex) {
            return !Five.Cells.isVertex(vertex) || !this.graph.isCellVisible(vertex);
        };
        BasicLayout.prototype.isEdgeIgnored = function (edge) {
            var model = this.graph.getModel();
            return !Five.Cells.isEdge(edge) ||
                !this.graph.isCellVisible(edge) ||
                Five.Cells.getTerminal(edge, true) == null ||
                Five.Cells.getTerminal(edge, false) == null;
        };
        BasicLayout.prototype.setEdgeStyleEnabled = function (edge, value) {
            this.graph.setCellStyles(function (s) { return s.noEdgeStyle = !value; }, [edge]);
        };
        BasicLayout.prototype.setOrthogonalEdge = function (edge, value) {
            this.graph.setCellStyles(function (s) { return s.orthogonal = value; }, [edge]);
        };
        BasicLayout.prototype.getParentOffset = function (parent) {
            var result = new Five.Point();
            if (parent != null && parent != this.parent) {
                if (Five.Cells.isAncestor(this.parent, parent)) {
                    var parentGeo = Five.Cells.getGeometry(parent);
                    while (parent != this.parent) {
                        result.x = result.x + parentGeo.x;
                        result.y = result.y + parentGeo.y;
                        parent = Five.Cells.getParent(parent);
                        ;
                        parentGeo = Five.Cells.getGeometry(parent);
                    }
                }
            }
            return result;
        };
        BasicLayout.prototype.setEdgePoints = function (edge, points) {
            if (edge != null) {
                var model = this.graph.model;
                var geometry = Five.Cells.getGeometry(edge);
                if (geometry == null) {
                    geometry = new Five.Geometry();
                    geometry.setRelative(true);
                }
                else {
                    geometry = geometry.clone();
                }
                if (this.parent != null && points != null) {
                    var parent = Five.Cells.getParent(edge);
                    var parentOffset = this.getParentOffset(parent);
                    for (var i = 0; i < points.length; i++) {
                        points[i].x = points[i].x - parentOffset.x;
                        points[i].y = points[i].y - parentOffset.y;
                    }
                }
                geometry.points = points;
                model.setGeometry(edge, geometry);
            }
        };
        BasicLayout.prototype.setVertexLocation = function (cell, x, y) {
            var model = this.graph.getModel();
            var geometry = Five.Cells.getGeometry(cell);
            var result = null;
            if (geometry != null) {
                result = new Five.Rectangle(x, y, geometry.width, geometry.height);
                if (this.useBoundingBox) {
                    var state = this.graph.getView().getState(cell);
                    if (state != null && state.text != null && state.text.boundingBox != null) {
                        var scale = this.graph.getView().scale;
                        var box = state.text.boundingBox;
                        if (state.text.boundingBox.x < state.x) {
                            x += (state.x - box.x) / scale;
                            result.width = box.width;
                        }
                        if (state.text.boundingBox.y < state.y) {
                            y += (state.y - box.y) / scale;
                            result.height = box.height;
                        }
                    }
                }
                if (this.parent != null) {
                    var parent = Five.Cells.getParent(cell);
                    if (parent != null && parent != this.parent) {
                        var parentOffset = this.getParentOffset(parent);
                        x = x - parentOffset.x;
                        y = y - parentOffset.y;
                    }
                }
                if (geometry.x != x || geometry.y != y) {
                    geometry = geometry.clone();
                    geometry.x = x;
                    geometry.y = y;
                    model.setGeometry(cell, geometry);
                }
            }
            return result;
        };
        BasicLayout.prototype.getVertexBounds = function (cell) {
            var geo = Five.Cells.getGeometry(cell);
            if (this.useBoundingBox) {
                var state = this.graph.getView().getState(cell);
                if (state != null && state.text != null && state.text.boundingBox != null) {
                    var scale = this.graph.getView().scale;
                    var tmp = state.text.boundingBox;
                    var dx0 = Math.max(state.x - tmp.x, 0) / scale;
                    var dy0 = Math.max(state.y - tmp.y, 0) / scale;
                    var dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;
                    var dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;
                    geo = new Five.Rectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);
                }
            }
            if (this.parent != null) {
                var parent = Five.Cells.getParent(cell);
                geo = geo.clone();
                if (parent != null && parent != this.parent) {
                    var parentOffset = this.getParentOffset(parent);
                    geo.x = geo.x + parentOffset.x;
                    geo.y = geo.y + parentOffset.y;
                }
            }
            return new Five.Rectangle(geo.x, geo.y, geo.width, geo.height);
        };
        BasicLayout.prototype.arrangeGroups = function (groups, border) {
            this.graph.getModel().beginUpdate();
            try {
                for (var i = groups.length - 1; i >= 0; i--) {
                    var group = groups[i];
                    var children = this.graph.getChildVertices(group);
                    var bounds = this.graph.getBoundingBoxFromGeometry(children);
                    var geometry = this.graph.getCellGeometry(group);
                    var left = 0;
                    var top = 0;
                    if (this.graph.isSwimlane(group)) {
                        var size = this.graph.getStartSize(group);
                        left = size.width;
                        top = size.height;
                    }
                    if (bounds != null && geometry != null) {
                        geometry = geometry.clone();
                        geometry.x = geometry.x + bounds.x - border - left;
                        geometry.y = geometry.y + bounds.y - border - top;
                        geometry.width = bounds.width + 2 * border + left;
                        geometry.height = bounds.height + 2 * border + top;
                        this.graph.getModel().setGeometry(group, geometry);
                        this.graph.moveCells(children, border + left - bounds.x, border + top - bounds.y);
                    }
                }
            }
            finally {
                this.graph.getModel().endUpdate();
            }
        };
        return BasicLayout;
    }());
    Five.BasicLayout = BasicLayout;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CircleLayout = (function (_super) {
        __extends(CircleLayout, _super);
        function CircleLayout(graph, radius) {
            if (radius === void 0) { radius = 100; }
            var _this = _super.call(this, graph) || this;
            _this.radius = radius;
            _this.moveCircle = false;
            _this.x0 = 0;
            _this.y0 = 0;
            _this.resetEdges = true;
            _this.disableEdgeStyle = true;
            return _this;
        }
        CircleLayout.prototype.execute = function (parent) {
            var model = this.graph.getModel();
            model.beginUpdate();
            try {
                var max = 0;
                var top = null;
                var left = null;
                var vertices = [];
                var childCount = Five.Cells.getChildCount(parent);
                for (var i = 0; i < childCount; i++) {
                    var cell = Five.Cells.getChildAt(parent, i);
                    if (!this.isVertexIgnored(cell)) {
                        vertices.push(cell);
                        var bounds = this.getVertexBounds(cell);
                        if (top == null) {
                            top = bounds.y;
                        }
                        else {
                            top = Math.min(top, bounds.y);
                        }
                        if (left == null) {
                            left = bounds.x;
                        }
                        else {
                            left = Math.min(left, bounds.x);
                        }
                        max = Math.max(max, Math.max(bounds.width, bounds.height));
                    }
                    else if (!this.isEdgeIgnored(cell)) {
                        if (this.resetEdges) {
                            this.graph.resetEdge(cell);
                        }
                        if (this.disableEdgeStyle) {
                            this.setEdgeStyleEnabled(cell, false);
                        }
                    }
                }
                var r = this.getRadius(vertices.length, max);
                if (this.moveCircle) {
                    left = this.x0;
                    top = this.y0;
                }
                this.circle(vertices, r, left, top);
            }
            finally {
                model.endUpdate();
            }
        };
        CircleLayout.prototype.getRadius = function (count, max) {
            return Math.max(count * max / Math.PI, this.radius);
        };
        CircleLayout.prototype.circle = function (vertices, r, left, top) {
            var vertexCount = vertices.length;
            var phi = 2 * Math.PI / vertexCount;
            for (var i = 0; i < vertexCount; i++) {
                if (this.isVertexMovable(vertices[i])) {
                    this.setVertexLocation(vertices[i], left + r + r * Math.sin(i * phi), top + r + r * Math.cos(i * phi));
                }
            }
        };
        return CircleLayout;
    }(Five.BasicLayout));
    Five.CircleLayout = CircleLayout;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Clipboard = (function () {
        function Clipboard() {
        }
        Clipboard.setCells = function (cells) {
            Clipboard.cells = cells;
        };
        Clipboard.getCells = function () {
            return Clipboard.cells;
        };
        Clipboard.isEmpty = function () {
            return Clipboard.getCells() == null;
        };
        Clipboard.cut = function (graph, cells) {
            cells = Clipboard.copy(graph, cells);
            Clipboard.insertCount = 0;
            Clipboard.removeCells(graph, cells);
            return cells;
        };
        Clipboard.removeCells = function (graph, cells) {
            graph.removeCells(cells);
        };
        Clipboard.copy = function (graph, cells) {
            cells = cells || graph.getSelectionCells();
            var result = graph.getExportableCells(cells);
            Clipboard.insertCount = 1;
            Clipboard.setCells(graph.cloneCells(result));
            return result;
        };
        Clipboard.paste = function (graph) {
            if (!Clipboard.isEmpty()) {
                var cells = graph.getImportableCells(Clipboard.getCells());
                var delta = Clipboard.insertCount * Clipboard.stepSize;
                var parent = graph.getDefaultParent();
                cells = graph.importCells(cells, delta, delta, parent);
                Clipboard.insertCount++;
                graph.setSelectionCells(cells);
            }
        };
        Clipboard.stepSize = 10;
        Clipboard.insertCount = 1;
        Clipboard.cells = null;
        return Clipboard;
    }());
    Five.Clipboard = Clipboard;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var UndoableEdit = (function () {
        function UndoableEdit(source, significant) {
            if (significant === void 0) { significant = true; }
            this.changes = null;
            this.undone = false;
            this.redone = false;
            this.notify = function () { };
            this.source = source;
            this.changes = [];
            this.significant = significant;
        }
        UndoableEdit.prototype.isEmpty = function () {
            return this.changes.length === 0;
        };
        UndoableEdit.prototype.isSignificant = function () {
            return this.significant;
        };
        UndoableEdit.prototype.add = function (change) {
            this.changes.push(change);
        };
        UndoableEdit.prototype.die = function () { };
        UndoableEdit.prototype.undo = function () {
            if (!this.undone) {
                this.source.onStartEdit.fire();
                var count = this.changes.length;
                for (var i = count - 1; i >= 0; i--) {
                    var change = this.changes[i];
                    if (change.execute != null) {
                        change.execute();
                    }
                    else if (change.undo != null) {
                        change.undo();
                    }
                    this.source.onAfterExecute.fire(new Five.AfterExecuteEvent(change));
                }
                this.undone = true;
                this.redone = false;
                this.source.onEndEdit.fire();
            }
            this.notify();
        };
        UndoableEdit.prototype.redo = function () {
            if (!this.redone) {
                this.source.onStartEdit.fire();
                var count = this.changes.length;
                for (var i = 0; i < count; i++) {
                    var change = this.changes[i];
                    if (change.execute != null) {
                        change.execute();
                    }
                    else if (change.redo != null) {
                        change.redo();
                    }
                    this.source.onAfterExecute.fire(new Five.AfterExecuteEvent(change));
                }
                this.undone = false;
                this.redone = true;
                this.source.onEndEdit.fire();
            }
            this.notify();
        };
        return UndoableEdit;
    }());
    Five.UndoableEdit = UndoableEdit;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var RootChange = (function () {
        function RootChange(model, root) {
            this.model = model;
            this.root = root;
            this.previous = root;
        }
        RootChange.prototype.execute = function () {
            this.root = this.previous;
            this.previous = this.model.rootChanged(this.previous);
        };
        return RootChange;
    }());
    Five.RootChange = RootChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var GraphModel = (function () {
        function GraphModel(root) {
            this.root = null;
            this.maintainEdgeParent = true;
            this.createIds = true;
            this.nextId = 0;
            this.currentEdit = null;
            this.updateLevel = 0;
            this.endingUpdate = false;
            this.prefix = '';
            this.onAfterExecute = new Five.EventListeners();
            this.onStartEdit = new Five.EventListeners();
            this.onEndEdit = new Five.EventListeners();
            this.onBeforeUndo = new Five.EventListeners();
            this.onUndo = new Five.EventListeners();
            this.onChange = new Five.EventListeners();
            this.onNotify = new Five.EventListeners();
            this.currentEdit = this.createUndoableEdit();
            if (root != null) {
                this.setRoot(root);
            }
            else {
                this.clear();
            }
        }
        GraphModel.prototype.getRoot = function (cell) {
            var root = cell || this.root;
            if (cell != null) {
                while (cell != null) {
                    root = cell;
                    cell = Five.Cells.getParent(cell);
                }
            }
            return root;
        };
        GraphModel.prototype.getCell = function (id) {
            return (this.cells != null) ? this.cells[id] : null;
        };
        GraphModel.prototype.setGeometry = function (cell, geometry) {
            if (geometry != Five.Cells.getGeometry(cell)) {
                this.execute(new Five.GeometryChange(this, cell, geometry));
            }
            return geometry;
        };
        GraphModel.prototype.geometryForCellChanged = function (cell, geometry) {
            var previous = Five.Cells.getGeometry(cell);
            cell.setGeometry(geometry);
            return previous;
        };
        GraphModel.prototype.execute = function (change) {
            change.execute();
            this.beginUpdate();
            this.currentEdit.add(change);
            this.onAfterExecute.fire(new Five.AfterExecuteEvent(change));
            this.endUpdate();
        };
        GraphModel.prototype.beginUpdate = function () {
            this.updateLevel++;
            if (this.updateLevel == 1) {
                this.onStartEdit.fire();
            }
        };
        GraphModel.prototype.endUpdate = function () {
            this.updateLevel--;
            if (this.updateLevel == 0) {
                this.onEndEdit.fire();
            }
            if (!this.endingUpdate) {
                this.endingUpdate = this.updateLevel === 0;
                try {
                    if (this.endingUpdate && !this.currentEdit.isEmpty()) {
                        this.onBeforeUndo.fire(new Five.UndoEvent(this.currentEdit));
                        var tmp = this.currentEdit;
                        this.currentEdit = this.createUndoableEdit();
                        tmp.notify();
                        this.onUndo.fire(new Five.UndoEvent(tmp));
                    }
                }
                finally {
                    this.endingUpdate = false;
                }
            }
        };
        GraphModel.prototype.createUndoableEdit = function () {
            var edit = new Five.UndoableEdit(this, true);
            edit.notify = function () {
                edit.source.onChange.fire(new Five.ModelChangeEvent(edit, edit.changes));
                edit.source.onNotify.fire(new Five.NotifyEvent(edit, edit.changes));
            };
            return edit;
        };
        GraphModel.prototype.add = function (parent, child, index) {
            if (child != parent && parent != null && child != null) {
                if (index == null) {
                    index = Five.Cells.getChildCount(parent);
                }
                var parentChanged = parent != Five.Cells.getParent(child);
                this.execute(new Five.ChildChange(this, parent, child, index));
                if (this.maintainEdgeParent && parentChanged) {
                    this.updateEdgeParents(child);
                }
            }
            return child;
        };
        GraphModel.prototype.parentForCellChanged = function (cell, parent, index) {
            var previous = Five.Cells.getParent(cell);
            if (parent != null) {
                if (parent != previous || previous.getIndex(cell) != index) {
                    parent.insert(cell, index);
                }
            }
            else if (previous != null) {
                var oldIndex = previous.getIndex(cell);
                previous.remove(oldIndex);
            }
            if (!this.contains(previous) && parent != null) {
                this.cellAdded(cell);
            }
            else if (parent == null) {
                this.cellRemoved(cell);
            }
            return previous;
        };
        GraphModel.prototype.terminalForCellChanged = function (edge, terminal, isSource) {
            var previous = Five.Cells.getTerminal(edge, isSource);
            if (terminal != null) {
                terminal.insertEdge(edge, isSource);
            }
            else if (previous != null) {
                previous.removeEdge(edge, isSource);
            }
            return previous;
        };
        GraphModel.prototype.getNearestCommonAncestor = function (cell1, cell2) {
            if (cell1 != null && cell2 != null) {
                var path = Five.CellPath.create(cell2);
                if (path != null && path.length > 0) {
                    var cell = cell1;
                    var current = Five.CellPath.create(cell);
                    if (path.length < current.length) {
                        cell = cell2;
                        var tmp = current;
                        current = path;
                        path = tmp;
                    }
                    while (cell != null) {
                        var parent = Five.Cells.getParent(cell);
                        if (path.indexOf(current + Five.CellPath.pathSeparator) == 0 && parent != null) {
                            return cell;
                        }
                        current = Five.CellPath.getParentPath(current);
                        cell = parent;
                    }
                }
            }
            return null;
        };
        GraphModel.prototype.updateEdgeParent = function (edge, root) {
            var source = Five.Cells.getTerminal(edge, true);
            var target = Five.Cells.getTerminal(edge, false);
            var cell;
            while (source != null && !Five.Cells.isEdge(source) &&
                source.geometry != null && source.geometry.relative) {
                source = Five.Cells.getParent(source);
            }
            while (target != null && !Five.Cells.isEdge(target) &&
                target.geometry != null && target.geometry.relative) {
                target = Five.Cells.getParent(target);
            }
            if (Five.Cells.isAncestor(root, source) && Five.Cells.isAncestor(root, target)) {
                if (source == target) {
                    cell = Five.Cells.getParent(source);
                }
                else {
                    cell = this.getNearestCommonAncestor(source, target);
                }
                if (cell != null && (Five.Cells.getParent(cell) !== this.root ||
                    Five.Cells.isAncestor(cell, edge)) && Five.Cells.getParent(edge) !== cell) {
                    var geo = Five.Cells.getGeometry(edge);
                    if (geo != null) {
                        var origin1 = this.getOrigin(Five.Cells.getParent(edge));
                        var origin2 = this.getOrigin(cell);
                        var dx = origin2.x - origin1.x;
                        var dy = origin2.y - origin1.y;
                        geo = geo.clone();
                        geo.translate(-dx, -dy);
                        this.setGeometry(edge, geo);
                    }
                    this.add(cell, edge, Five.Cells.getChildCount(cell));
                }
            }
        };
        GraphModel.prototype.updateEdgeParents = function (cell, root) {
            root = root || this.getRoot(cell);
            var childCount = Five.Cells.getChildCount(cell);
            var i;
            for (i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(cell, i);
                this.updateEdgeParents(child, root);
            }
            var edgeCount = Five.Cells.getEdgeCount(cell);
            var edges = [];
            for (i = 0; i < edgeCount; i++) {
                edges.push(Five.Cells.getEdgeAt(cell, i));
            }
            for (i = 0; i < edges.length; i++) {
                var edge = edges[i];
                if (Five.Cells.isAncestor(root, edge)) {
                    this.updateEdgeParent(edge, root);
                }
            }
        };
        GraphModel.prototype.contains = function (cell) {
            return Five.Cells.isAncestor(this.root, cell);
        };
        GraphModel.prototype.cellAdded = function (cell) {
            if (cell != null) {
                if (cell.getId() == null && this.createIds) {
                    cell.setId(this.createId(cell));
                }
                if (cell.getId() != null) {
                    var collision = this.getCell(cell.getId());
                    if (collision != cell) {
                        while (collision != null) {
                            cell.setId(this.createId(cell));
                            collision = this.getCell(cell.getId());
                        }
                        if (this.cells == null) {
                            this.cells = {};
                        }
                        this.cells[cell.getId()] = cell;
                    }
                }
                this.nextId = Math.max(this.nextId, cell.getId());
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = 0; i < childCount; i++) {
                    this.cellAdded(Five.Cells.getChildAt(cell, i));
                }
            }
        };
        GraphModel.prototype.cellRemoved = function (cell) {
            if (cell != null && this.cells != null) {
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = childCount - 1; i >= 0; i--) {
                    this.cellRemoved(Five.Cells.getChildAt(cell, i));
                }
                if (this.cells != null && cell.getId() != null) {
                    delete this.cells[cell.getId()];
                }
            }
        };
        GraphModel.prototype.getOrigin = function (cell) {
            var result;
            if (cell != null) {
                result = this.getOrigin(Five.Cells.getParent(cell));
                if (!Five.Cells.isEdge(cell)) {
                    var geo = Five.Cells.getGeometry(cell);
                    if (geo != null) {
                        result.x += geo.x;
                        result.y += geo.y;
                    }
                }
            }
            else {
                result = new Five.Point();
            }
            return result;
        };
        GraphModel.prototype.createId = function (cell) {
            var id = this.nextId;
            this.nextId++;
            return id;
        };
        GraphModel.prototype.setTerminal = function (edge, terminal, isSource) {
            var terminalChanged = terminal != Five.Cells.getTerminal(edge, isSource);
            this.execute(new Five.TerminalChange(this, edge, terminal, isSource));
            if (this.maintainEdgeParent && terminalChanged) {
                this.updateEdgeParent(edge, this.getRoot());
            }
        };
        GraphModel.prototype.filterDescendants = function (filter, parent) {
            var result = [];
            parent = parent || this.getRoot();
            if (filter == null || filter(parent)) {
                result.push(parent);
            }
            var childCount = Five.Cells.getChildCount(parent);
            for (var i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(parent, i);
                result = result.concat(this.filterDescendants(filter, child));
            }
            return result;
        };
        GraphModel.prototype.setCollapsed = function (cell, collapsed) {
            if (collapsed !== Five.Cells.isCollapsed(cell)) {
                this.execute(new Five.CollapseChange(this, cell, collapsed));
            }
            return collapsed;
        };
        GraphModel.prototype.collapsedStateForCellChanged = function (cell, collapsed) {
            var previous = Five.Cells.isCollapsed(cell);
            cell.setCollapsed(collapsed);
            return previous;
        };
        GraphModel.prototype.getEdgesBetween = function (source, target, directed) {
            directed = (directed != null) ? directed : false;
            var tmp1 = Five.Cells.getEdgeCount(source);
            var tmp2 = Five.Cells.getEdgeCount(target);
            var terminal = source;
            var edgeCount = tmp1;
            if (tmp2 < tmp1) {
                edgeCount = tmp2;
                terminal = target;
            }
            var result = [];
            for (var i = 0; i < edgeCount; i++) {
                var edge = Five.Cells.getEdgeAt(terminal, i);
                var src = Five.Cells.getTerminal(edge, true);
                var trg = Five.Cells.getTerminal(edge, false);
                var directedMatch = (src == source) && (trg == target);
                var oppositeMatch = (trg == source) && (src == target);
                if (directedMatch || (!directed && oppositeMatch)) {
                    result.push(edge);
                }
            }
            return result;
        };
        GraphModel.prototype.getDirectedEdgeCount = function (cell, outgoing, ignoredEdge) {
            var count = 0;
            var edgeCount = Five.Cells.getEdgeCount(cell);
            for (var i = 0; i < edgeCount; i++) {
                var edge = Five.Cells.getEdgeAt(cell, i);
                if (edge != ignoredEdge && Five.Cells.getTerminal(edge, outgoing) == cell) {
                    count++;
                }
            }
            return count;
        };
        GraphModel.prototype.isConnectable = function (cell) {
            return (cell != null) ? cell.isConnectable() : false;
        };
        GraphModel.prototype.cloneCells = function (cells, includeChildren) {
            var mapping = new Five.Dictionary();
            var clones = [];
            var i;
            for (i = 0; i < cells.length; i++) {
                if (cells[i] != null) {
                    clones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));
                }
                else {
                    clones.push(null);
                }
            }
            for (i = 0; i < clones.length; i++) {
                if (clones[i] != null) {
                    this.restoreClone(clones[i], cells[i], mapping);
                }
            }
            return clones;
        };
        GraphModel.prototype.cloneCellImpl = function (cell, mapping, includeChildren) {
            var clone = this.cellCloned(cell);
            mapping.put(cell, clone);
            if (includeChildren) {
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = 0; i < childCount; i++) {
                    var cloneChild = this.cloneCellImpl(Five.Cells.getChildAt(cell, i), mapping, true);
                    clone.insert(cloneChild);
                }
            }
            return clone;
        };
        GraphModel.prototype.cellCloned = function (cell) {
            return cell.clone();
        };
        GraphModel.prototype.restoreClone = function (clone, cell, mapping) {
            var source = Five.Cells.getTerminal(cell, true);
            var tmp;
            if (source != null) {
                tmp = mapping.get(source);
                if (tmp != null) {
                    tmp.insertEdge(clone, true);
                }
            }
            var target = Five.Cells.getTerminal(cell, false);
            if (target != null) {
                tmp = mapping.get(target);
                if (tmp != null) {
                    tmp.insertEdge(clone, false);
                }
            }
            var childCount = Five.Cells.getChildCount(clone);
            for (var i = 0; i < childCount; i++) {
                this.restoreClone(Five.Cells.getChildAt(clone, i), Five.Cells.getChildAt(cell, i), mapping);
            }
        };
        GraphModel.prototype.setStyle = function (cell, style) {
            if (style != Five.Cells.getStyle(cell)) {
                this.execute(new Five.StyleChange(this, cell, style));
            }
        };
        GraphModel.prototype.styleForCellChanged = function (cell, style) {
            var previous = Five.Cells.getStyle(cell);
            cell.setStyle(style);
            return previous;
        };
        GraphModel.prototype.isLayer = function (cell) {
            return this.isRoot(Five.Cells.getParent(cell));
        };
        GraphModel.prototype.isRoot = function (cell) {
            return cell != null && this.root == cell;
        };
        GraphModel.prototype.getChildren = function (cell) {
            return (cell != null) ? cell.children : null;
        };
        GraphModel.prototype.setValue = function (cell, value) {
            this.execute(new Five.ValueChange(this, cell, value));
            return value;
        };
        GraphModel.prototype.valueForCellChanged = function (cell, value) {
            return cell.valueChanged(value);
        };
        GraphModel.prototype.getChildCells = function (parent, vertices, edges) {
            vertices = (vertices != null) ? vertices : false;
            edges = (edges != null) ? edges : false;
            var childCount = Five.Cells.getChildCount(parent);
            var result = [];
            for (var i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(parent, i);
                if ((!edges && !vertices) || (edges && Five.Cells.isEdge(child)) ||
                    (vertices && Five.Cells.isVertex(child))) {
                    result.push(child);
                }
            }
            return result;
        };
        GraphModel.prototype.getEdges = function (cell, incoming, outgoing, includeLoops) {
            if (incoming === void 0) { incoming = true; }
            if (outgoing === void 0) { outgoing = true; }
            if (includeLoops === void 0) { includeLoops = true; }
            var edgeCount = Five.Cells.getEdgeCount(cell);
            var result = [];
            for (var i = 0; i < edgeCount; i++) {
                var edge = Five.Cells.getEdgeAt(cell, i);
                var source = Five.Cells.getTerminal(edge, true);
                var target = Five.Cells.getTerminal(edge, false);
                if ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||
                    (outgoing && source == cell)))) {
                    result.push(edge);
                }
            }
            return result;
        };
        GraphModel.prototype.getTopmostCells = function (cells) {
            var tmp = [];
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                var topmost = true;
                var parent = Five.Cells.getParent(cell);
                while (parent != null) {
                    if (Five.Utils.indexOf(cells, parent) >= 0) {
                        topmost = false;
                        break;
                    }
                    parent = Five.Cells.getParent(parent);
                }
                if (topmost) {
                    tmp.push(cell);
                }
            }
            return tmp;
        };
        GraphModel.prototype.rootChanged = function (root) {
            var oldRoot = this.root;
            this.root = root;
            this.nextId = 0;
            this.cells = null;
            this.cellAdded(root);
            return oldRoot;
        };
        GraphModel.prototype.getDescendants = function (parent) {
            return this.filterDescendants(null, parent);
        };
        GraphModel.prototype.visibleStateForCellChanged = function (cell, visible) {
            var previous = Five.Cells.isVisible(cell);
            cell.setVisible(visible);
            return previous;
        };
        GraphModel.prototype.setRoot = function (root) {
            this.execute(new Five.RootChange(this, root));
            return root;
        };
        GraphModel.prototype.clear = function () {
            this.setRoot(this.createRoot());
        };
        GraphModel.prototype.createRoot = function () {
            var cell = new Five.Cell();
            cell.insert(new Five.Cell());
            return cell;
        };
        GraphModel.prototype.remove = function (cell) {
            if (cell == this.root) {
                this.setRoot(null);
            }
            else if (Five.Cells.getParent(cell) != null) {
                this.execute(new Five.ChildChange(this, null, cell));
            }
            return cell;
        };
        GraphModel.prototype.getParents = function (cells) {
            var parents = [];
            if (cells != null) {
                var hash = new Object();
                for (var i = 0; i < cells.length; i++) {
                    var parent = Five.Cells.getParent(cells[i]);
                    if (parent != null) {
                        var id = Five.CellPath.create(parent);
                        if (hash[id] == null) {
                            hash[id] = parent;
                            parents.push(parent);
                        }
                    }
                }
            }
            return parents;
        };
        GraphModel.prototype.cloneCell = function (cell) {
            if (cell != null) {
                return this.cloneCells([cell], true)[0];
            }
            return null;
        };
        GraphModel.prototype.setCellStyles = function (cells, setter) {
            if (cells != null && cells.length > 0) {
                this.beginUpdate();
                try {
                    for (var i = 0; i < cells.length; i++) {
                        if (cells[i] != null) {
                            var appliedStyle = Five.Cells.getStyle(cells[i]);
                            setter(appliedStyle);
                            this.setStyle(cells[i], appliedStyle);
                        }
                    }
                }
                finally {
                    this.endUpdate();
                }
            }
        };
        return GraphModel;
    }());
    Five.GraphModel = GraphModel;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Codec = (function () {
        function Codec(document) {
            this.encodeDefaults = false;
            this.document = document || Five.Utils.createXmlDocument();
            this.objects = {};
        }
        Codec.prototype.putObject = function (id, obj) {
            this.objects[id] = obj;
            return obj;
        };
        Codec.prototype.getObject = function (id) {
            var obj = null;
            if (id != null) {
                obj = this.objects[id];
                if (obj == null) {
                    obj = this.lookup(id);
                    if (obj == null) {
                        var node = this.getElementById(id);
                        if (node != null) {
                            obj = this.decode(node);
                        }
                    }
                }
            }
            return obj;
        };
        Codec.prototype.lookup = function (id) {
            return null;
        };
        Codec.prototype.getElementById = function (id, attr) {
            if (attr === void 0) { attr = "id"; }
            return Five.Utils.findNodeByAttribute(this.document.documentElement, attr, id);
        };
        Codec.prototype.getId = function (obj) {
            var id = null;
            if (obj != null) {
                id = this.reference(obj);
                if (id == null && obj instanceof Five.Cell) {
                    var cell = obj;
                    id = cell.getId();
                    if (id == null) {
                        id = Five.CellPath.create(cell);
                        if (id.length == 0) {
                            id = 'root';
                        }
                    }
                }
            }
            return id;
        };
        Codec.prototype.reference = function (obj) {
            return null;
        };
        Codec.prototype.encode = function (obj) {
            var node = null;
            if (obj != null && obj.constructor != null) {
                var enc = CodecRegistry.getCodec(obj.constructor);
                if (enc != null) {
                    node = enc.encode(this, obj);
                }
                else {
                    if (Five.Utils.isNode(obj)) {
                        node = Five.Utils.importNode(this.document, obj, true);
                    }
                    else {
                        console.warn('mxCodec.encode: No codec for ' + Five.Utils.getFunctionName(obj.constructor));
                    }
                }
            }
            return node;
        };
        Codec.prototype.decode = function (node, into) {
            var obj = null;
            if (node != null && node.nodeType == Five.NodeType.Element) {
                var ctor = null;
                try {
                    switch (node.nodeName) {
                        case "GraphModel":
                            ctor = Five.GraphModel.constructor;
                            break;
                        default:
                            throw new Error("Unexpected node " + node.nodeName);
                    }
                }
                catch (err) {
                }
                var dec = CodecRegistry.getCodec(ctor);
                if (dec != null) {
                    obj = dec.decode(this, node, into);
                }
                else {
                    obj = node.cloneNode(true);
                    obj.removeAttribute('as');
                }
            }
            return obj;
        };
        Codec.prototype.encodeCell = function (cell, node, includeChildren) {
            if (includeChildren === void 0) { includeChildren = false; }
            node.appendChild(this.encode(cell));
            if (includeChildren) {
                var childCount = cell.getChildCount();
                for (var i = 0; i < childCount; i++) {
                    this.encodeCell(cell.getChildAt(i), node);
                }
            }
        };
        Codec.prototype.isCellCodec = function (codec) {
            if (codec != null && typeof (codec.isCellCodec) == 'function') {
                return codec.isCellCodec();
            }
            return false;
        };
        Codec.prototype.decodeCell = function (node, restoreStructures) {
            if (restoreStructures === void 0) { restoreStructures = true; }
            var cell = null;
            if (node != null && node.nodeType == Five.NodeType.Element) {
                var decoder = CodecRegistry.getCodec(node.nodeName);
                if (!this.isCellCodec(decoder)) {
                    var child = node.firstChild;
                    while (child != null && !this.isCellCodec(decoder)) {
                        decoder = CodecRegistry.getCodec(child.nodeName);
                        child = child.nextSibling;
                    }
                }
                if (!this.isCellCodec(decoder)) {
                    decoder = CodecRegistry.getCodec(Five.Cell.constructor);
                }
                cell = decoder.decode(this, node);
                if (restoreStructures) {
                    this.insertIntoGraph(cell);
                }
            }
            return cell;
        };
        Codec.prototype.insertIntoGraph = function (cell) {
            var parent = cell.parent;
            var source = cell.getTerminal(true);
            var target = cell.getTerminal(false);
            cell.setTerminal(null, false);
            cell.setTerminal(null, true);
            cell.parent = null;
            if (parent != null) {
                parent.insert(cell);
            }
            if (source != null) {
                source.insertEdge(cell, true);
            }
            if (target != null) {
                target.insertEdge(cell, false);
            }
        };
        Codec.prototype.setAttribute = function (node, attribute, value) {
            if (attribute != null && value != null) {
                node.setAttribute(attribute, value);
            }
        };
        return Codec;
    }());
    Five.Codec = Codec;
    var CodecRegistry = (function () {
        function CodecRegistry() {
        }
        CodecRegistry.register = function (codec) {
            if (codec != null) {
                var name = codec.getName();
                CodecRegistry.codecs[name] = codec;
                var classname = Five.Utils.getFunctionName(codec.template.constructor);
                if (classname != name) {
                    CodecRegistry.addAlias(classname, name);
                }
            }
            return codec;
        };
        CodecRegistry.addAlias = function (classname, codecname) {
            CodecRegistry.aliases[classname] = codecname;
        };
        CodecRegistry.getCodec = function (ctor) {
            var codec = null;
            if (ctor != null) {
                var name = Five.Utils.getFunctionName(ctor);
                var tmp = CodecRegistry.aliases[name];
                if (tmp != null) {
                    name = tmp;
                }
                codec = CodecRegistry.codecs[name];
                if (codec == null) {
                    try {
                        codec = new ObjectCodec(new ctor());
                        CodecRegistry.register(codec);
                    }
                    catch (e) {
                    }
                }
            }
            return codec;
        };
        CodecRegistry.codecs = {};
        CodecRegistry.aliases = {};
        return CodecRegistry;
    }());
    var ObjectCodec = (function () {
        function ObjectCodec(template, exclude, idrefs, mapping) {
            if (exclude === void 0) { exclude = []; }
            if (idrefs === void 0) { idrefs = []; }
            if (mapping === void 0) { mapping = {}; }
            this.template = template;
            this.exclude = exclude;
            this.idrefs = idrefs;
            this.mapping = mapping;
            this.reverse = {};
            for (var i in this.mapping) {
                this.reverse[this.mapping[i]] = i;
            }
        }
        ObjectCodec.prototype.getName = function () {
            return Five.Utils.getFunctionName(this.template.constructor);
        };
        ObjectCodec.prototype.cloneTemplate = function () {
            return new this.template.constructor();
        };
        ObjectCodec.prototype.getFieldName = function (attributename) {
            if (attributename != null) {
                var mapped = this.reverse[attributename];
                if (mapped != null) {
                    attributename = mapped;
                }
            }
            return attributename;
        };
        ObjectCodec.prototype.getAttributeName = function (fieldname) {
            if (fieldname != null) {
                var mapped = this.mapping[fieldname];
                if (mapped != null) {
                    fieldname = mapped;
                }
            }
            return fieldname;
        };
        ObjectCodec.prototype.isExcluded = function (obj, attr, value, write) {
            return attr == Five.ObjectIdentity.fieldName || Five.Utils.indexOf(this.exclude, attr) >= 0;
        };
        ObjectCodec.prototype.isReference = function (obj, attr, value, write) {
            return Five.Utils.indexOf(this.idrefs, attr) >= 0;
        };
        ObjectCodec.prototype.encode = function (enc, obj) {
            var node = enc.document.createElement(this.getName());
            obj = this.beforeEncode(enc, obj, node);
            this.encodeObject(enc, obj, node);
            return this.afterEncode(enc, obj, node);
        };
        ObjectCodec.prototype.encodeObject = function (enc, obj, node) {
            enc.setAttribute(node, 'id', enc.getId(obj));
            for (var i in obj) {
                var name = i;
                var value = obj[name];
                if (value != null && !this.isExcluded(obj, name, value, true)) {
                    if (Five.Utils.isNumeric(name)) {
                        name = null;
                    }
                    this.encodeValue(enc, obj, name, value, node);
                }
            }
        };
        ObjectCodec.prototype.encodeValue = function (enc, obj, name, value, node) {
            if (value != null) {
                if (this.isReference(obj, name, value, true)) {
                    var tmp = enc.getId(value);
                    if (tmp == null) {
                        console.warn('ObjectCodec.encode: No ID for ' + this.getName() + '.' + name + '=' + value);
                        return;
                    }
                    value = tmp;
                }
                var defaultValue = this.template[name];
                if (name == null || enc.encodeDefaults || defaultValue != value) {
                    name = this.getAttributeName(name);
                    this.writeAttribute(enc, obj, name, value, node);
                }
            }
        };
        ObjectCodec.prototype.writeAttribute = function (enc, obj, name, value, node) {
            if (typeof (value) != 'object') {
                this.writePrimitiveAttribute(enc, obj, name, value, node);
            }
            else {
                this.writeComplexAttribute(enc, obj, name, value, node);
            }
        };
        ObjectCodec.prototype.writePrimitiveAttribute = function (enc, obj, name, value, node) {
            value = this.convertAttributeToXml(enc, obj, name, value);
            if (name == null) {
                var child = enc.document.createElement('add');
                if (typeof (value) == 'function') {
                    child.appendChild(enc.document.createTextNode(value));
                }
                else {
                    enc.setAttribute(child, 'value', value);
                }
                node.appendChild(child);
            }
            else if (typeof (value) != 'function') {
                enc.setAttribute(node, name, value);
            }
        };
        ObjectCodec.prototype.writeComplexAttribute = function (enc, obj, name, value, node) {
            var child = enc.encode(value);
            if (child != null) {
                if (name != null) {
                    child.setAttribute('as', name);
                }
                node.appendChild(child);
            }
            else {
                console.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);
            }
        };
        ObjectCodec.prototype.convertAttributeToXml = function (enc, obj, name, value) {
            if (this.isBooleanAttribute(enc, obj, name, value)) {
                if (value)
                    value = "1";
                else
                    value = "0";
            }
            return value;
        };
        ObjectCodec.prototype.isBooleanAttribute = function (enc, obj, name, value) {
            return (typeof (value.length) == 'undefined' && (value == true || value == false));
        };
        ObjectCodec.prototype.convertAttributeFromXml = function (dec, attr, obj) {
            var value = attr.nodeValue;
            if (this.isNumericAttribute(dec, attr, obj)) {
                value = parseFloat(value);
            }
            return value;
        };
        ObjectCodec.prototype.isNumericAttribute = function (dec, attr, obj) {
            return Five.Utils.isNumeric(attr.nodeValue);
        };
        ObjectCodec.prototype.beforeEncode = function (enc, obj, node) {
            return obj;
        };
        ObjectCodec.prototype.afterEncode = function (enc, obj, node) {
            return node;
        };
        ObjectCodec.prototype.decode = function (dec, node, into) {
            var id = node.getAttribute('id');
            var obj = dec.objects[id];
            if (obj == null) {
                obj = into || this.cloneTemplate();
                if (id != null) {
                    dec.putObject(id, obj);
                }
            }
            node = this.beforeDecode(dec, node, obj);
            this.decodeNode(dec, node, obj);
            return this.afterDecode(dec, node, obj);
        };
        ObjectCodec.prototype.decodeNode = function (dec, node, obj) {
            if (node != null) {
                this.decodeAttributes(dec, node, obj);
                this.decodeChildren(dec, node, obj);
            }
        };
        ObjectCodec.prototype.decodeAttributes = function (dec, node, obj) {
            var attrs = node.attributes;
            if (attrs != null) {
                for (var i = 0; i < attrs.length; i++) {
                    this.decodeAttribute(dec, attrs[i], obj);
                }
            }
        };
        ObjectCodec.prototype.decodeAttribute = function (dec, attr, obj) {
            var name = attr.nodeName;
            if (name != 'as' && name != 'id') {
                var value = this.convertAttributeFromXml(dec, attr, obj);
                var fieldname = this.getFieldName(name);
                if (this.isReference(obj, fieldname, value, false)) {
                    var tmp = dec.getObject(value);
                    if (tmp == null) {
                        console.warn('ObjectCodec.decode: No object for ' + this.getName() + '.' + name + '=' + value);
                        return;
                    }
                    value = tmp;
                }
                if (!this.isExcluded(obj, name, value, false)) {
                    obj[name] = value;
                }
            }
        };
        ObjectCodec.prototype.decodeChildren = function (dec, node, obj) {
            var child = node.firstChild;
            while (child != null) {
                var tmp = child.nextSibling;
                if (child.nodeType == Five.NodeType.Element &&
                    !this.processInclude(dec, child, obj)) {
                    this.decodeChild(dec, child, obj);
                }
                child = tmp;
            }
        };
        ObjectCodec.prototype.decodeChild = function (dec, child, obj) {
            var fieldname = this.getFieldName(child.getAttribute('as'));
            if (fieldname == null || !this.isExcluded(obj, fieldname, child, false)) {
                var template = this.getFieldTemplate(obj, fieldname, child);
                var value;
                if (child.nodeName == 'add') {
                    value = child.getAttribute('value');
                    if (value == null && ObjectCodec.allowEval) {
                        value = Five.Utils.eval(Five.Utils.getTextContent(child));
                    }
                }
                else {
                    value = dec.decode(child, template);
                }
                this.addObjectValue(obj, fieldname, value, template);
            }
        };
        ObjectCodec.prototype.getFieldTemplate = function (obj, fieldname, child) {
            var template = obj[fieldname];
            if (template instanceof Array && template.length > 0) {
                template = null;
            }
            return template;
        };
        ObjectCodec.prototype.addObjectValue = function (obj, fieldname, value, template) {
            if (value != null && value != template) {
                if (fieldname != null && fieldname.length > 0) {
                    obj[fieldname] = value;
                }
                else {
                    obj.push(value);
                }
            }
        };
        ObjectCodec.prototype.processInclude = function (dec, node, into) {
            if (node.nodeName == 'include') {
                var name = node.getAttribute('name');
                if (name != null) {
                    try {
                        var xml = Five.Utils.load(name).getDocumentElement();
                        if (xml != null) {
                            dec.decode(xml, into);
                        }
                    }
                    catch (e) {
                    }
                }
                return true;
            }
            return false;
        };
        ObjectCodec.prototype.beforeDecode = function (dec, node, obj) {
            return node;
        };
        ObjectCodec.prototype.afterDecode = function (dec, node, obj) {
            return obj;
        };
        ObjectCodec.allowEval = false;
        return ObjectCodec;
    }());
    Five.ObjectCodec = ObjectCodec;
    CodecRegistry.register((function () {
        var codec = new ObjectCodec(new Five.GraphModel());
        codec.encodeObject = function (enc, obj, node) {
            var rootNode = enc.document.createElement('root');
            enc.encodeCell(obj.getRoot(), rootNode);
            node.appendChild(rootNode);
        };
        codec.decodeChild = function (dec, child, obj) {
            if (child.nodeName == 'root') {
                this.decodeRoot(dec, child, obj);
            }
            else {
                ObjectCodec.prototype.decodeChild.apply(this, arguments);
            }
        };
        codec.decodeRoot = function (dec, root, model) {
            var rootCell = null;
            var tmp = root.firstChild;
            while (tmp != null) {
                var cell = dec.decodeCell(tmp);
                if (cell != null && cell.getParent() == null) {
                    rootCell = cell;
                }
                tmp = tmp.nextSibling;
            }
            if (rootCell != null) {
                model.setRoot(rootCell);
            }
        };
        return codec;
    })());
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CollapseChange = (function () {
        function CollapseChange(model, cell, collapsed) {
            this.model = model;
            this.cell = cell;
            this.collapsed = collapsed;
            this.previous = collapsed;
        }
        CollapseChange.prototype.execute = function () {
            this.collapsed = this.previous;
            this.previous = this.model.collapsedStateForCellChanged(this.cell, this.previous);
        };
        return CollapseChange;
    }());
    Five.CollapseChange = CollapseChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CompactTreeLayout = (function (_super) {
        __extends(CompactTreeLayout, _super);
        function CompactTreeLayout(graph, horizontal, invert) {
            if (horizontal === void 0) { horizontal = true; }
            if (invert === void 0) { invert = false; }
            var _this = _super.call(this, graph) || this;
            _this.resizeParent = true;
            _this.groupPadding = 10;
            _this.parentsChanged = null;
            _this.moveTree = false;
            _this.levelDistance = 10;
            _this.nodeDistance = 20;
            _this.resetEdges = true;
            _this.prefHozEdgeSep = 5;
            _this.prefVertEdgeOff = 4;
            _this.minEdgeJetty = 8;
            _this.channelBuffer = 4;
            _this.edgeRouting = true;
            _this.sortEdges = false;
            _this.alignRanks = false;
            _this.maxRankHeight = null;
            _this.root = null;
            _this.node = null;
            _this.horizontal = horizontal;
            _this.invert = invert;
            return _this;
        }
        CompactTreeLayout.prototype.isVertexIgnored = function (vertex) {
            return _super.prototype.isVertexIgnored.call(this, vertex) || this.graph.getConnections(vertex).length === 0;
        };
        CompactTreeLayout.prototype.isHorizontal = function () {
            return this.horizontal;
        };
        CompactTreeLayout.prototype.execute = function (parent, root) {
            this.parent = parent;
            var model = this.graph.getModel();
            if (root == null) {
                if (this.graph.getEdges(parent, Five.Cells.getParent(parent), this.invert, !this.invert, false).length > 0) {
                    this.root = parent;
                }
                else {
                    var roots = this.graph.findTreeRoots(parent, true, this.invert);
                    if (roots.length > 0) {
                        for (var i = 0; i < roots.length; i++) {
                            if (!this.isVertexIgnored(roots[i]) &&
                                this.graph.getEdges(roots[i], null, this.invert, !this.invert, false).length > 0) {
                                this.root = roots[i];
                                break;
                            }
                        }
                    }
                }
            }
            else {
                this.root = root;
            }
            if (this.root != null) {
                if (this.resizeParent) {
                    this.parentsChanged = new Five.StringDictionary();
                }
                else {
                    this.parentsChanged = null;
                }
                model.beginUpdate();
                try {
                    var visited = new Five.StringDictionary();
                    this.node = this.dfs(this.root, parent, visited);
                    if (this.alignRanks) {
                        this.maxRankHeight = [];
                        this.findRankHeights(this.node, 0);
                        this.setCellHeights(this.node, 0);
                    }
                    if (this.node != null) {
                        this.layout(this.node);
                        var x0 = this.graph.gridSize;
                        var y0 = x0;
                        if (!this.moveTree) {
                            var g = this.getVertexBounds(this.root);
                            if (g != null) {
                                x0 = g.x;
                                y0 = g.y;
                            }
                        }
                        var bounds = null;
                        if (this.isHorizontal()) {
                            bounds = this.horizontalLayout(this.node, x0, y0, null);
                        }
                        else {
                            bounds = this.verticalLayout(this.node, null, x0, y0, null);
                        }
                        if (bounds != null) {
                            var dx = 0;
                            var dy = 0;
                            if (bounds.x < 0) {
                                dx = Math.abs(x0 - bounds.x);
                            }
                            if (bounds.y < 0) {
                                dy = Math.abs(y0 - bounds.y);
                            }
                            if (dx !== 0 || dy !== 0) {
                                this.moveNode(this.node, dx, dy);
                            }
                            if (this.resizeParent) {
                                this.adjustParents();
                            }
                            if (this.edgeRouting) {
                                this.localEdgeProcessing(this.node);
                            }
                        }
                    }
                }
                finally {
                    model.endUpdate();
                }
            }
        };
        CompactTreeLayout.prototype.moveNode = function (node, dx, dy) {
            node.x += dx;
            node.y += dy;
            this.apply(node);
            var child = node.child;
            while (child != null) {
                this.moveNode(child, dx, dy);
                child = child.next;
            }
        };
        CompactTreeLayout.prototype.sortOutgoingEdges = function (source, edges) {
            var lookup = new Five.Dictionary();
            edges.sort(function (e1, e2) {
                var end1 = e1.getTerminal(e1.getTerminal(false) === source);
                var p1 = lookup.get(end1);
                if (p1 == null) {
                    p1 = Five.CellPath.create(end1);
                    lookup.put(end1, p1);
                }
                var end2 = e2.getTerminal(e2.getTerminal(false) === source);
                var p2 = lookup.get(end2);
                if (p2 == null) {
                    p2 = Five.CellPath.create(end2);
                    lookup.put(end2, p2);
                }
                return Five.CellPath.compare(p1, p2);
            });
        };
        CompactTreeLayout.prototype.findRankHeights = function (node, rank) {
            if (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height) {
                this.maxRankHeight[rank] = node.height;
            }
            var child = node.child;
            while (child != null) {
                this.findRankHeights(child, rank + 1);
                child = child.next;
            }
        };
        CompactTreeLayout.prototype.setCellHeights = function (node, rank) {
            if (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height) {
                node.height = this.maxRankHeight[rank];
            }
            var child = node.child;
            while (child != null) {
                this.setCellHeights(child, rank + 1);
                child = child.next;
            }
        };
        CompactTreeLayout.prototype.dfs = function (cell, parent, visited) {
            var id = Five.CellPath.create(cell);
            var node = null;
            if (cell != null && visited[id] == null && !this.isVertexIgnored(cell)) {
                visited[id] = cell;
                node = this.createNode(cell);
                var prev = null;
                var out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);
                var view = this.graph.getView();
                if (this.sortEdges) {
                    this.sortOutgoingEdges(cell, out);
                }
                for (var i = 0; i < out.length; i++) {
                    var edge = out[i];
                    if (!this.isEdgeIgnored(edge)) {
                        if (this.resetEdges) {
                            this.setEdgePoints(edge, null);
                        }
                        if (this.edgeRouting) {
                            this.setEdgeStyleEnabled(edge, false);
                            this.setEdgePoints(edge, null);
                        }
                        var state = view.getState(edge);
                        var target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);
                        var tmp = this.dfs(target, parent, visited);
                        if (tmp != null && Five.Cells.getGeometry(target) != null) {
                            if (prev == null) {
                                node.child = tmp;
                            }
                            else {
                                prev.next = tmp;
                            }
                            prev = tmp;
                        }
                    }
                }
            }
            return node;
        };
        CompactTreeLayout.prototype.layout = function (node) {
            if (node != null) {
                var child = node.child;
                while (child != null) {
                    this.layout(child);
                    child = child.next;
                }
                if (node.child != null) {
                    this.attachParent(node, this.join(node));
                }
                else {
                    this.layoutLeaf(node);
                }
            }
        };
        CompactTreeLayout.prototype.horizontalLayout = function (node, x0, y0, bounds) {
            node.x += x0 + node.offsetX;
            node.y += y0 + node.offsetY;
            bounds = this.apply(node, bounds);
            var child = node.child;
            if (child != null) {
                bounds = this.horizontalLayout(child, node.x, node.y, bounds);
                var siblingOffset = node.y + child.offsetY;
                var s = child.next;
                while (s != null) {
                    bounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);
                    siblingOffset += s.offsetY;
                    s = s.next;
                }
            }
            return bounds;
        };
        CompactTreeLayout.prototype.verticalLayout = function (node, parent, x0, y0, bounds) {
            node.x += x0 + node.offsetY;
            node.y += y0 + node.offsetX;
            bounds = this.apply(node, bounds);
            var child = node.child;
            if (child != null) {
                bounds = this.verticalLayout(child, node, node.x, node.y, bounds);
                var siblingOffset = node.x + child.offsetY;
                var s = child.next;
                while (s != null) {
                    bounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);
                    siblingOffset += s.offsetY;
                    s = s.next;
                }
            }
            return bounds;
        };
        CompactTreeLayout.prototype.attachParent = function (node, height) {
            var x = this.nodeDistance + this.levelDistance;
            var y2 = (height - node.width) / 2 - this.nodeDistance;
            var y1 = y2 + node.width + 2 * this.nodeDistance - height;
            node.child.offsetX = x + node.height;
            node.child.offsetY = y1;
            node.contour.upperHead = this.createLine(node.height, 0, this.createLine(x, y1, node.contour.upperHead));
            node.contour.lowerHead = this.createLine(node.height, 0, this.createLine(x, y2, node.contour.lowerHead));
        };
        CompactTreeLayout.prototype.layoutLeaf = function (node) {
            var dist = 2 * this.nodeDistance;
            node.contour.upperTail = this.createLine(node.height + dist, 0);
            node.contour.upperHead = node.contour.upperTail;
            node.contour.lowerTail = this.createLine(0, -node.width - dist);
            node.contour.lowerHead = this.createLine(node.height + dist, 0, node.contour.lowerTail);
        };
        CompactTreeLayout.prototype.join = function (node) {
            var dist = 2 * this.nodeDistance;
            var child = node.child;
            node.contour = child.contour;
            var h = child.width + dist;
            var sum = h;
            child = child.next;
            while (child != null) {
                var d = this.merge(node.contour, child.contour);
                child.offsetY = d + h;
                child.offsetX = 0;
                h = child.width + dist;
                sum += d + h;
                child = child.next;
            }
            return sum;
        };
        CompactTreeLayout.prototype.merge = function (p1, p2) {
            var x = 0;
            var y = 0;
            var total = 0;
            var upper = p1.lowerHead;
            var lower = p2.upperHead;
            while (lower != null && upper != null) {
                var d = this.offset(x, y, lower.dx, lower.dy, upper.dx, upper.dy);
                y += d;
                total += d;
                if (x + lower.dx <= upper.dx) {
                    x += lower.dx;
                    y += lower.dy;
                    lower = lower.next;
                }
                else {
                    x -= upper.dx;
                    y -= upper.dy;
                    upper = upper.next;
                }
            }
            var b;
            if (lower != null) {
                b = this.bridge(p1.upperTail, 0, 0, lower, x, y);
                p1.upperTail = (b.next != null) ? p2.upperTail : b;
                p1.lowerTail = p2.lowerTail;
            }
            else {
                b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);
                if (b.next == null) {
                    p1.lowerTail = b;
                }
            }
            p1.lowerHead = p2.lowerHead;
            return total;
        };
        CompactTreeLayout.prototype.offset = function (x, y, lowerDx, lowerDy, upperDx, upperDy) {
            var d;
            if (upperDx <= x || x + lowerDx <= 0) {
                return 0;
            }
            var t = upperDx * lowerDy - lowerDx * upperDy;
            var s;
            if (t > 0) {
                if (x < 0) {
                    s = x * lowerDy;
                    d = s / lowerDx - y;
                }
                else if (x > 0) {
                    s = x * upperDy;
                    d = s / upperDx - y;
                }
                else {
                    d = -y;
                }
            }
            else if (upperDx < x + lowerDx) {
                s = (upperDx - x) * lowerDy;
                d = upperDy - (y + s / lowerDx);
            }
            else if (upperDx > x + lowerDx) {
                s = (lowerDx + x) * upperDy;
                d = s / upperDx - (y + lowerDy);
            }
            else {
                d = upperDy - (y + lowerDy);
            }
            if (d > 0) {
                return d;
            }
            else {
                return 0;
            }
        };
        CompactTreeLayout.prototype.bridge = function (line1, x1, y1, line2, x2, y2) {
            var dx = x2 + line2.dx - x1;
            var dy;
            var s;
            if (line2.dx === 0) {
                dy = line2.dy;
            }
            else {
                s = dx * line2.dy;
                dy = s / line2.dx;
            }
            var r = this.createLine(dx, dy, line2.next);
            line1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);
            return r;
        };
        CompactTreeLayout.prototype.createNode = function (cell) {
            var node = new TreeNode();
            node.cell = cell;
            node.x = 0;
            node.y = 0;
            node.width = 0;
            node.height = 0;
            var geo = this.getVertexBounds(cell);
            if (geo != null) {
                if (this.isHorizontal()) {
                    node.width = geo.height;
                    node.height = geo.width;
                }
                else {
                    node.width = geo.width;
                    node.height = geo.height;
                }
            }
            node.offsetX = 0;
            node.offsetY = 0;
            node.contour = new Contour();
            return node;
        };
        CompactTreeLayout.prototype.apply = function (node, bounds) {
            var model = this.graph.getModel();
            var cell = node.cell;
            var g = Five.Cells.getGeometry(cell);
            if (cell != null && g != null) {
                if (this.isVertexMovable(cell)) {
                    g = this.setVertexLocation(cell, node.x, node.y);
                    if (this.resizeParent) {
                        var parent = Five.Cells.getParent(cell);
                        var id = Five.CellPath.create(parent);
                        if (this.parentsChanged[id] == null) {
                            this.parentsChanged[id] = parent;
                        }
                    }
                }
                if (bounds == null) {
                    bounds = new Five.Rectangle(g.x, g.y, g.width, g.height);
                }
                else {
                    bounds = new Five.Rectangle(Math.min(bounds.x, g.x), Math.min(bounds.y, g.y), Math.max(bounds.x + bounds.width, g.x + g.width), Math.max(bounds.y + bounds.height, g.y + g.height));
                }
            }
            return bounds;
        };
        CompactTreeLayout.prototype.createLine = function (dx, dy, next) {
            var line = new Line();
            line.dx = dx;
            line.dy = dy;
            line.next = next;
            return line;
        };
        CompactTreeLayout.prototype.adjustParents = function () {
            var tmp = this.parentsChanged.getValues();
            this.arrangeGroups(Five.Utils.sortCells(tmp, true), this.groupPadding);
        };
        CompactTreeLayout.prototype.localEdgeProcessing = function (node) {
            this.processNodeOutgoing(node);
            var child = node.child;
            while (child != null) {
                this.localEdgeProcessing(child);
                child = child.next;
            }
        };
        CompactTreeLayout.prototype.processNodeOutgoing = function (node) {
            var child = node.child;
            var parentCell = node.cell;
            var childCount = 0;
            var sortedCells = [];
            while (child != null) {
                childCount++;
                var sortingCriterion = child.x;
                if (this.horizontal) {
                    sortingCriterion = child.y;
                }
                sortedCells.push(new WeightedCellSorter(child, sortingCriterion));
                child = child.next;
            }
            sortedCells.sort(WeightedCellSorter.compare);
            var availableWidth = node.width;
            var requiredWidth = (childCount + 1) * this.prefHozEdgeSep;
            if (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep)) {
                availableWidth -= 2 * this.prefHozEdgeSep;
            }
            var edgeSpacing = availableWidth / childCount;
            var currentXOffset = edgeSpacing / 2.0;
            if (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep)) {
                currentXOffset += this.prefHozEdgeSep;
            }
            var currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;
            var maxYOffset = 0;
            var parentBounds = this.getVertexBounds(parentCell);
            child = node.child;
            for (var j = 0; j < sortedCells.length; j++) {
                var childCell = sortedCells[j].cell.cell;
                var childBounds = this.getVertexBounds(childCell);
                var edges = this.graph.getEdgesBetween(parentCell, childCell, false);
                var newPoints = [];
                var x = 0;
                var y = 0;
                for (var i = 0; i < edges.length; i++) {
                    if (this.horizontal) {
                        x = parentBounds.x + parentBounds.width;
                        y = parentBounds.y + currentXOffset;
                        newPoints.push(new Five.Point(x, y));
                        x = parentBounds.x + parentBounds.width + currentYOffset;
                        newPoints.push(new Five.Point(x, y));
                        y = childBounds.y + childBounds.height / 2.0;
                        newPoints.push(new Five.Point(x, y));
                        this.setEdgePoints(edges[i], newPoints);
                    }
                    else {
                        x = parentBounds.x + currentXOffset;
                        y = parentBounds.y + parentBounds.height;
                        newPoints.push(new Five.Point(x, y));
                        y = parentBounds.y + parentBounds.height + currentYOffset;
                        newPoints.push(new Five.Point(x, y));
                        x = childBounds.x + childBounds.width / 2.0;
                        newPoints.push(new Five.Point(x, y));
                        this.setEdgePoints(edges[i], newPoints);
                    }
                }
                if (j < childCount / 2) {
                    currentYOffset += this.prefVertEdgeOff;
                }
                else if (j > childCount / 2) {
                    currentYOffset -= this.prefVertEdgeOff;
                }
                currentXOffset += edgeSpacing;
                maxYOffset = Math.max(maxYOffset, currentYOffset);
            }
        };
        return CompactTreeLayout;
    }(Five.BasicLayout));
    Five.CompactTreeLayout = CompactTreeLayout;
    var WeightedCellSorter = (function () {
        function WeightedCellSorter(cell, weightedValue) {
            this.weightedValue = 0;
            this.nudge = false;
            this.visited = false;
            this.rankIndex = null;
            this.cell = cell;
            this.weightedValue = weightedValue;
        }
        WeightedCellSorter.compare = function (a, b) {
            if (a != null && b != null) {
                if (b.weightedValue > a.weightedValue) {
                    return -1;
                }
                else if (b.weightedValue < a.weightedValue) {
                    return 1;
                }
                else {
                    if (b.nudge) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
            else {
                return 0;
            }
        };
        return WeightedCellSorter;
    }());
    var Line = (function () {
        function Line() {
        }
        return Line;
    }());
    var Contour = (function () {
        function Contour() {
        }
        return Contour;
    }());
    var TreeNode = (function () {
        function TreeNode() {
        }
        return TreeNode;
    }());
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ConnectionConstraint = (function () {
        function ConnectionConstraint(point, perimeter) {
            if (perimeter === void 0) { perimeter = true; }
            this.point = null;
            this.perimeter = null;
            this.point = point;
            this.perimeter = perimeter;
        }
        return ConnectionConstraint;
    }());
    Five.ConnectionConstraint = ConnectionConstraint;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var StartConnectEvent = (function (_super) {
        __extends(StartConnectEvent, _super);
        function StartConnectEvent(state) {
            var _this = _super.call(this) || this;
            _this.state = state;
            return _this;
        }
        return StartConnectEvent;
    }(Five.BasicEvent));
    Five.StartConnectEvent = StartConnectEvent;
    var ConnectEvent = (function (_super) {
        __extends(ConnectEvent, _super);
        function ConnectEvent(cell, terminal, event, target, terminalInserted) {
            var _this = _super.call(this) || this;
            _this.cell = cell;
            _this.terminal = terminal;
            _this.event = event;
            _this.target = target;
            _this.terminalInserted = terminalInserted;
            return _this;
        }
        return ConnectEvent;
    }(Five.BasicEvent));
    Five.ConnectEvent = ConnectEvent;
    var ConnectionHandler = (function () {
        function ConnectionHandler(graph, factoryMethod) {
            var _this = this;
            this.moveIconFront = false;
            this.moveIconBack = false;
            this.connectImage = null;
            this.targetConnectImage = false;
            this.enabled = true;
            this.select = true;
            this.createTarget = false;
            this.marker = null;
            this.constraintHandler = null;
            this.error = null;
            this.waypointsEnabled = false;
            this.ignoreMouseDown = false;
            this.first = null;
            this.connectIconOffset = new Five.Point(0, Five.Constants.tooltipVerticalOffset);
            this.edgeState = null;
            this.mouseDownCounter = 0;
            this.movePreviewAway = Five.Client.isVml;
            this.outlineConnect = false;
            this.onStartConnect = new Five.EventListeners();
            this.onConnect = new Five.EventListeners();
            this.onReset = new Five.EventListeners();
            if (graph != null) {
                this.graph = graph;
                this.factoryMethod = factoryMethod;
                this.init();
                this.escapeHandler = function () { _this.reset(); };
                this.graph.onEscape.add(this.escapeHandler);
            }
        }
        ConnectionHandler.prototype.isEnabled = function () {
            return this.enabled;
        };
        ConnectionHandler.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        ConnectionHandler.prototype.init = function () {
            var _this = this;
            this.graph.addMouseListener(this);
            this.marker = this.createMarker();
            this.constraintHandler = new Five.ConstraintHandler(this.graph);
            this.changeHandler = function () {
                if (_this.iconState != null) {
                    _this.iconState = _this.graph.getView().getState(_this.iconState.cell);
                }
                if (_this.iconState != null) {
                    _this.redrawIcons(_this.icons, _this.iconState);
                    _this.constraintHandler.reset();
                }
                else {
                    _this.reset();
                }
            };
            this.graph.getModel().onChange.add(this.changeHandler);
            this.graph.getView().onScale.add(this.changeHandler);
            this.graph.getView().onTranslate.add(this.changeHandler);
            this.graph.getView().onScaleAndTranslate.add(this.changeHandler);
            this.drillHandler = function () { return _this.reset(); };
            this.graph.onStartEditing.add(this.drillHandler);
            this.graph.getView().onRootChange.add(this.drillHandler);
        };
        ConnectionHandler.prototype.createMarker = function () {
            var _this = this;
            var marker = new Five.CellMarker(this.graph);
            marker.hotspotEnabled = true;
            marker.getCell = function (me) {
                var cell = Five.CellMarker.prototype.getCell.apply(marker, [me]);
                var scale = _this.graph.view.scale;
                var point = new Five.Point(_this.graph.snap(me.getGraphX() / scale) * scale, _this.graph.snap(me.getGraphY() / scale) * scale);
                _this.error = null;
                if (cell == null) {
                    cell = _this.getCellAt(point.x, point.y);
                }
                if ((_this.graph.isSwimlane(cell) && _this.graph.hitsSwimlaneContent(cell, point.x, point.y)) ||
                    !_this.isConnectableCell(cell)) {
                    cell = null;
                }
                if (cell != null) {
                    if (_this.isConnecting()) {
                        if (_this.previous != null) {
                            _this.error = _this.validateConnection(_this.previous.cell, cell);
                            if (_this.error != null && _this.error.length == 0) {
                                cell = null;
                                if (_this.isCreateTarget()) {
                                    _this.error = null;
                                }
                            }
                        }
                    }
                    else if (!_this.isValidSource(cell, me)) {
                        cell = null;
                    }
                }
                else if (_this.isConnecting() && !_this.isCreateTarget() &&
                    !_this.graph.allowDanglingEdges) {
                    _this.error = "";
                }
                return cell;
            };
            marker.isValidState = function (state) {
                return _this.isConnecting() ? _this.error == null : Five.CellMarker.prototype.isValidState.apply(marker, state);
            };
            marker.getMarkerColor = function (evt, state, isValid) {
                return (_this.connectImage == null || _this.isConnecting()) ?
                    Five.CellMarker.prototype.getMarkerColor.apply(marker, [evt, state, isValid]) : null;
            };
            marker.intersects = function (state, me) {
                if (_this.connectImage != null || _this.isConnecting()) {
                    return true;
                }
                return Five.CellMarker.prototype.intersects.apply(marker, [state, me]);
            };
            return marker;
        };
        ConnectionHandler.prototype.isCreateTarget = function () {
            return this.createTarget;
        };
        ConnectionHandler.prototype.setCreateTarget = function (value) {
            this.createTarget = value;
        };
        ConnectionHandler.prototype.createShape = function () {
            var shape = new Five.PolylineShape([], Five.Constants.invalidColor);
            shape.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.Vml : Five.Dialect.Svg;
            shape.pointerEvents = false;
            shape.isDashed = true;
            shape.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
            Five.Events.redirectMouseEvents(shape.node, this.graph, null);
            return shape;
        };
        ConnectionHandler.prototype.isConnectableCell = function (cell) {
            return true;
        };
        ConnectionHandler.prototype.start = function (state, x, y, edgeState) {
            this.previous = state;
            this.first = new Five.Point(x, y);
            this.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);
            this.marker.currentColor = this.marker.validColor;
            this.marker.markedState = state;
            this.marker.mark();
            this.onStartConnect.fire(new StartConnectEvent(this.previous));
        };
        ConnectionHandler.prototype.getCellAt = function (x, y) {
            return (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;
        };
        ConnectionHandler.prototype.isConnecting = function () {
            return this.first != null && this.shape != null;
        };
        ConnectionHandler.prototype.isValidSource = function (cell, me) {
            return this.graph.isValidSource(cell);
        };
        ConnectionHandler.prototype.isValidTarget = function (cell) {
            return true;
        };
        ConnectionHandler.prototype.validateConnection = function (source, target) {
            if (!this.isValidTarget(target)) {
                return "";
            }
            return this.graph.getEdgeValidationError(null, source, target);
        };
        ConnectionHandler.prototype.getConnectImage = function (state) {
            return this.connectImage;
        };
        ConnectionHandler.prototype.isMoveIconToFrontForState = function (state) {
            if (state.text != null && this.graph.container.is(state.text.node.parentNode)) {
                return true;
            }
            return this.moveIconFront;
        };
        ConnectionHandler.prototype.createIcons = function (state) {
            var _this = this;
            var image = this.getConnectImage(state);
            if (image != null && state != null) {
                this.iconState = state;
                var icons = [];
                var bounds = new Five.Rectangle(0, 0, image.width, image.height);
                var icon = new Five.ImageShape(bounds, image.src, null, null, 0);
                icon.preserveImageAspect = false;
                if (this.isMoveIconToFrontForState(state)) {
                    icon.dialect = Five.Dialect.StrictHtml;
                    icon.init(this.graph.container);
                }
                else {
                    icon.dialect = (this.graph.dialect == Five.Dialect.Svg) ? Five.Dialect.Svg : Five.Dialect.Vml;
                    icon.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
                    if (this.moveIconBack && icon.node.previousSibling != null) {
                        icon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);
                    }
                }
                Five.Utils.nodeStyle(icon.node).cursor = Five.Constants.cursorConnect;
                var getState = Five.Utils.bind(this, function () {
                    return (_this.currentState != null) ? _this.currentState : state;
                });
                var mouseDown = Five.Utils.bind(this, function (evt) {
                    if (!Five.Events.isConsumed(evt)) {
                        _this.icon = icon;
                        _this.graph.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt, getState()));
                    }
                });
                Five.Events.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);
                icons.push(icon);
                this.redrawIcons(icons, this.iconState);
                return icons;
            }
            return null;
        };
        ConnectionHandler.prototype.redrawIcons = function (icons, state) {
            if (icons != null && icons[0] != null && state != null) {
                var pos = this.getIconPosition(icons[0], state);
                icons[0].bounds.x = pos.x;
                icons[0].bounds.y = pos.y;
                icons[0].redraw();
            }
        };
        ConnectionHandler.prototype.getIconPosition = function (icon, state) {
            var scale = this.graph.getView().scale;
            var cx = state.getCenterX();
            var cy = state.getCenterY();
            if (this.graph.isSwimlane(state.cell)) {
                var size = this.graph.getStartSize(state.cell);
                cx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;
                cy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;
                var alpha = Five.Utils.toRadians(state.style.rotation);
                if (alpha != 0) {
                    var cos = Math.cos(alpha);
                    var sin = Math.sin(alpha);
                    var ct = new Five.Point(state.getCenterX(), state.getCenterY());
                    var pt = Five.Utils.getRotatedPoint(new Five.Point(cx, cy), cos, sin, ct);
                    cx = pt.x;
                    cy = pt.y;
                }
            }
            return new Five.Point(cx - icon.bounds.width / 2, cy - icon.bounds.height / 2);
        };
        ConnectionHandler.prototype.destroyIcons = function () {
            if (this.icons != null) {
                for (var i = 0; i < this.icons.length; i++) {
                    this.icons[i].destroy();
                }
                this.icons = null;
                this.icon = null;
                this.selectedIcon = null;
                this.iconState = null;
            }
        };
        ConnectionHandler.prototype.isStartEvent = function (me) {
            return ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||
                (this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&
                    this.icon != null))));
        };
        ConnectionHandler.prototype.mouseDown = function (sender, me) {
            this.mouseDownCounter++;
            if (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&
                !this.isConnecting() && this.isStartEvent(me)) {
                if (this.constraintHandler.currentConstraint != null &&
                    this.constraintHandler.currentFocus != null &&
                    this.constraintHandler.currentPoint != null) {
                    this.sourceConstraint = this.constraintHandler.currentConstraint;
                    this.previous = this.constraintHandler.currentFocus;
                    this.first = this.constraintHandler.currentPoint.clone();
                }
                else {
                    this.first = new Five.Point(me.getGraphX(), me.getGraphY());
                }
                this.edgeState = this.createEdgeState(me);
                this.mouseDownCounter = 1;
                if (this.waypointsEnabled && this.shape == null) {
                    this.waypoints = null;
                    this.shape = this.createShape();
                    if (this.edgeState != null) {
                        this.shape.apply(this.edgeState);
                    }
                }
                if (this.previous == null && this.edgeState != null) {
                    var pt = this.graph.getPointForEvent(me.getEvent());
                    this.edgeState.cell.geometry.setTerminalPoint(pt, true);
                }
                this.onStartConnect.fire(new StartConnectEvent(this.previous));
                me.consume();
            }
            this.selectedIcon = this.icon;
            this.icon = null;
        };
        ConnectionHandler.prototype.isImmediateConnectSource = function (state) {
            return !this.graph.isCellMovable(state.cell);
        };
        ConnectionHandler.prototype.createEdgeState = function (me) {
            return null;
        };
        ConnectionHandler.prototype.isOutlineConnectEvent = function (me) {
            return this.outlineConnect && (me.isSource(this.marker.highlight.shape) || Five.Events.isMouseAltDown(me.getEvent()));
        };
        ConnectionHandler.prototype.updateCurrentState = function (me, point) {
            this.constraintHandler.update(me, this.first == null);
            if (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) {
                this.marker.reset();
                this.currentState = this.constraintHandler.currentFocus;
            }
            else {
                this.marker.process(me);
                this.currentState = this.marker.getValidState();
                if (this.currentState != null && this.isOutlineConnectEvent(me)) {
                    var constraint = this.graph.getOutlineConstraint(point, this.currentState, me);
                    this.constraintHandler.currentConstraint = constraint;
                    this.constraintHandler.currentFocus = this.currentState;
                    this.constraintHandler.currentPoint = point;
                }
            }
            if (this.outlineConnect) {
                if (this.marker.highlight != null && this.marker.highlight.shape != null) {
                    if (this.constraintHandler.currentConstraint != null &&
                        this.constraintHandler.currentFocus != null) {
                        this.marker.highlight.shape.stroke = Five.Constants.outlineHighlightColor;
                        this.marker.highlight.shape.strokewidth = Five.Constants.outlineHighlightStrokewidth / this.graph.view.scale / this.graph.view.scale;
                        this.marker.highlight.repaint();
                    }
                    else if (this.marker.hasValidState()) {
                        this.marker.highlight.shape.stroke = Five.Constants.defaultValidColor;
                        this.marker.highlight.shape.strokewidth = Five.Constants.highlightStrokewidth / this.graph.view.scale / this.graph.view.scale;
                        this.marker.highlight.repaint();
                    }
                }
            }
        };
        ConnectionHandler.prototype.convertWaypoint = function (point) {
            var scale = this.graph.getView().getScale();
            var tr = this.graph.getView().getTranslate();
            point.x = point.x / scale - tr.x;
            point.y = point.y / scale - tr.y;
        };
        ConnectionHandler.prototype.mouseMove = function (sender, me) {
            if (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown)) {
                if (!this.isEnabled() && this.currentState != null) {
                    this.destroyIcons();
                    this.currentState = null;
                }
                var view = this.graph.getView();
                var scale = view.scale;
                var tr = view.translate;
                var point = new Five.Point(me.getGraphX(), me.getGraphY());
                if (this.graph.isGridEnabledEvent(me.getEvent())) {
                    point = new Five.Point((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale, (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);
                }
                this.currentPoint = point;
                if (this.first != null || (this.isEnabled() && this.graph.isEnabled())) {
                    this.updateCurrentState(me, point);
                }
                var i;
                if (this.first != null) {
                    var constraint = null;
                    var current = point;
                    if (this.constraintHandler.currentConstraint != null &&
                        this.constraintHandler.currentFocus != null &&
                        this.constraintHandler.currentPoint != null) {
                        constraint = this.constraintHandler.currentConstraint;
                        current = this.constraintHandler.currentPoint.clone();
                    }
                    else if (this.previous != null && Five.Events.isMouseShiftDown(me.getEvent())) {
                        if (Math.abs(this.previous.getCenterX() - point.x) < Math.abs(this.previous.getCenterY() - point.y)) {
                            point.x = this.previous.getCenterX();
                        }
                        else {
                            point.y = this.previous.getCenterY();
                        }
                    }
                    var pt2 = this.first;
                    if (this.selectedIcon != null) {
                        var w = this.selectedIcon.bounds.width;
                        var h = this.selectedIcon.bounds.height;
                        if (this.currentState != null && this.targetConnectImage) {
                            var pos = this.getIconPosition(this.selectedIcon, this.currentState);
                            this.selectedIcon.bounds.x = pos.x;
                            this.selectedIcon.bounds.y = pos.y;
                        }
                        else {
                            var bounds = new Five.Rectangle(me.getGraphX() + this.connectIconOffset.x, me.getGraphY() + this.connectIconOffset.y, w, h);
                            this.selectedIcon.bounds = bounds;
                        }
                        this.selectedIcon.redraw();
                    }
                    if (this.edgeState != null) {
                        this.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];
                        this.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);
                        if (this.currentState != null) {
                            if (constraint == null) {
                                constraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);
                            }
                            this.edgeState.setAbsoluteTerminalPoint(null, false);
                            this.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);
                        }
                        var realPoints = null;
                        if (this.waypoints != null) {
                            realPoints = [];
                            for (i = 0; i < this.waypoints.length; i++) {
                                var pt = this.waypoints[i].clone();
                                this.convertWaypoint(pt);
                                realPoints[i] = pt;
                            }
                        }
                        this.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);
                        this.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);
                        current = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];
                        pt2 = this.edgeState.absolutePoints[0];
                    }
                    else {
                        var tmp;
                        if (this.currentState != null) {
                            if (this.constraintHandler.currentConstraint == null) {
                                tmp = this.getTargetPerimeterPoint(this.currentState, me);
                                if (tmp != null) {
                                    current = tmp;
                                }
                            }
                        }
                        if (this.sourceConstraint == null && this.previous != null) {
                            var next = (this.waypoints != null && this.waypoints.length > 0) ?
                                this.waypoints[0] : current;
                            tmp = this.getSourcePerimeterPoint(this.previous, next, me);
                            if (tmp != null) {
                                pt2 = tmp;
                            }
                        }
                    }
                    var dx;
                    var dy;
                    if (this.currentState == null && this.movePreviewAway) {
                        var tmpp = pt2;
                        if (this.edgeState != null && this.edgeState.absolutePoints.length > 2) {
                            var tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];
                            if (tmp2 != null) {
                                tmpp = tmp2;
                            }
                        }
                        dx = current.x - tmpp.x;
                        dy = current.y - tmpp.y;
                        var len = Math.sqrt(dx * dx + dy * dy);
                        if (len == 0) {
                            return;
                        }
                        current.x -= dx * 4 / len;
                        current.y -= dy * 4 / len;
                    }
                    if (this.shape == null) {
                        dx = Math.abs(point.x - this.first.x);
                        dy = Math.abs(point.y - this.first.y);
                        if (dx > this.graph.tolerance || dy > this.graph.tolerance) {
                            this.shape = this.createShape();
                            if (this.edgeState != null) {
                                this.shape.apply(this.edgeState);
                            }
                            this.updateCurrentState(me, point);
                        }
                    }
                    if (this.shape != null) {
                        if (this.edgeState != null) {
                            this.shape.points = this.edgeState.absolutePoints;
                        }
                        else {
                            var pts = [pt2];
                            if (this.waypoints != null) {
                                pts = pts.concat(this.waypoints);
                            }
                            pts.push(current);
                            this.shape.points = pts;
                        }
                        this.drawPreview();
                    }
                    Five.Events.consume(me.getEvent());
                    me.consume();
                }
                else if (!this.isEnabled() || !this.graph.isEnabled()) {
                    this.constraintHandler.reset();
                }
                else if (this.previous != this.currentState && this.edgeState == null) {
                    this.destroyIcons();
                    if (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null) {
                        this.icons = this.createIcons(this.currentState);
                        if (this.icons == null) {
                            this.currentState.setCursor(Five.Constants.cursorConnect);
                            me.consume();
                        }
                    }
                    this.previous = this.currentState;
                }
                else if (this.previous == this.currentState && this.currentState != null && this.icons == null &&
                    !this.graph.isMouseDown) {
                    me.consume();
                }
                if (!this.graph.isMouseDown && this.currentState != null && this.icons != null) {
                    var hitsIcon = false;
                    var target = me.getSource();
                    for (i = 0; i < this.icons.length && !hitsIcon; i++) {
                        hitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;
                    }
                    if (!hitsIcon) {
                        this.updateIcons(this.currentState, this.icons, me);
                    }
                }
            }
            else {
                this.constraintHandler.reset();
            }
        };
        ConnectionHandler.prototype.getTargetPerimeterPoint = function (state, me) {
            var result = null;
            var view = state.view;
            var targetPerimeter = view.getPerimeterFunction(state);
            if (targetPerimeter != null) {
                var next = (this.waypoints != null && this.waypoints.length > 0) ?
                    this.waypoints[this.waypoints.length - 1] :
                    new Five.Point(this.previous.getCenterX(), this.previous.getCenterY());
                var tmp = targetPerimeter(view.getPerimeterBounds(state), this.edgeState, next, false);
                if (tmp != null) {
                    result = tmp;
                }
            }
            else {
                result = new Five.Point(state.getCenterX(), state.getCenterY());
            }
            return result;
        };
        ConnectionHandler.prototype.getSourcePerimeterPoint = function (state, next, me) {
            var view = state.view;
            var sourcePerimeter = view.getPerimeterFunction(state);
            var c = new Five.Point(state.getCenterX(), state.getCenterY());
            var result = null;
            if (sourcePerimeter != null) {
                var theta = state.style.rotation;
                var rad = -theta * (Math.PI / 180);
                if (theta != 0) {
                    next = Five.Utils.getRotatedPoint(new Five.Point(next.x, next.y), Math.cos(rad), Math.sin(rad), c);
                }
                var tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);
                if (tmp != null) {
                    if (theta != 0) {
                        tmp = Five.Utils.getRotatedPoint(new Five.Point(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);
                    }
                    result = tmp;
                }
            }
            else {
                result = c;
            }
            return result;
        };
        ConnectionHandler.prototype.updateIcons = function (state, icons, me) {
        };
        ConnectionHandler.prototype.isStopEvent = function (me) {
            return me.getState() != null;
        };
        ConnectionHandler.prototype.addWaypointForEvent = function (me) {
            var point = this.graph.container.convertPoint(me.getX(), me.getY());
            var dx = Math.abs(point.x - this.first.x);
            var dy = Math.abs(point.y - this.first.y);
            var addPoint = this.waypoints != null || (this.mouseDownCounter > 1 && (dx > this.graph.tolerance || dy > this.graph.tolerance));
            if (addPoint) {
                if (this.waypoints == null) {
                    this.waypoints = [];
                }
                var scale = this.graph.view.scale;
                point = new Five.Point(this.graph.snap(me.getGraphX() / scale) * scale, this.graph.snap(me.getGraphY() / scale) * scale);
                this.waypoints.push(point);
            }
        };
        ConnectionHandler.prototype.mouseUp = function (sender, me) {
            if (!me.isConsumed() && this.isConnecting()) {
                if (this.waypointsEnabled && !this.isStopEvent(me)) {
                    this.addWaypointForEvent(me);
                    me.consume();
                    return;
                }
                if (this.error == null) {
                    var source = (this.previous != null) ? this.previous.cell : null;
                    var target = null;
                    if (this.constraintHandler.currentConstraint != null &&
                        this.constraintHandler.currentFocus != null) {
                        target = this.constraintHandler.currentFocus.cell;
                    }
                    if (target == null && this.marker.hasValidState()) {
                        target = this.marker.validState.cell;
                    }
                    this.connect(source, target, me.getEvent(), me.getCell());
                }
                else {
                    if (this.previous != null && this.marker.validState != null &&
                        this.previous.cell == this.marker.validState.cell) {
                        this.graph.selectCellForEvent(null, me.getEvent());
                    }
                    if (this.error.length > 0) {
                        this.graph.validationAlert(this.error);
                    }
                }
                this.destroyIcons();
                me.consume();
            }
            if (this.first != null) {
                this.reset();
            }
        };
        ConnectionHandler.prototype.reset = function () {
            if (this.shape != null) {
                this.shape.destroy();
                this.shape = null;
            }
            this.destroyIcons();
            this.marker.reset();
            this.constraintHandler.reset();
            this.edgeState = null;
            this.previous = null;
            this.error = null;
            this.sourceConstraint = null;
            this.mouseDownCounter = 0;
            this.first = null;
            this.onReset.fire();
        };
        ConnectionHandler.prototype.drawPreview = function () {
            var valid = this.error == null;
            this.shape.strokewidth = this.getEdgeWidth(valid);
            var color = this.getEdgeColor(valid);
            this.shape.stroke = color;
            this.shape.redraw();
        };
        ConnectionHandler.prototype.getEdgeColor = function (valid) {
            return (valid) ? Five.Constants.validColor : Five.Constants.invalidColor;
        };
        ConnectionHandler.prototype.getEdgeWidth = function (valid) {
            return (valid) ? 3 : 1;
        };
        ConnectionHandler.prototype.connect = function (source, target, evt, dropTarget) {
            if (target != null || this.isCreateTarget() || this.graph.allowDanglingEdges) {
                var model = this.graph.getModel();
                var terminalInserted = false;
                var edge = null;
                model.beginUpdate();
                try {
                    if (source != null && target == null && this.isCreateTarget()) {
                        target = this.createTargetVertex(evt, source);
                        if (target != null) {
                            dropTarget = this.graph.getDropTarget([target], evt, dropTarget);
                            terminalInserted = true;
                            if (dropTarget == null || !Five.Cells.isEdge(dropTarget)) {
                                var pstate = this.graph.getView().getState(dropTarget);
                                if (pstate != null) {
                                    var tmp = Five.Cells.getGeometry(target);
                                    tmp.x -= pstate.origin.x;
                                    tmp.y -= pstate.origin.y;
                                }
                            }
                            else {
                                dropTarget = this.graph.getDefaultParent();
                            }
                            this.graph.addCell(target, dropTarget);
                        }
                    }
                    var parent = this.graph.getDefaultParent();
                    if (source != null && target != null &&
                        Five.Cells.getParent(source) == Five.Cells.getParent(target) &&
                        Five.Cells.getParent(Five.Cells.getParent(source)) != model.getRoot()) {
                        parent = Five.Cells.getParent(source);
                        if ((source.geometry != null && source.geometry.relative) &&
                            (target.geometry != null && target.geometry.relative)) {
                            parent = Five.Cells.getParent(parent);
                        }
                    }
                    var value = null;
                    var style = null;
                    if (this.edgeState != null) {
                        value = this.edgeState.cell.value;
                        style = this.edgeState.cell.style;
                    }
                    edge = this.insertEdge(parent, null, value, source, target, style);
                    if (edge != null) {
                        this.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);
                        this.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);
                        if (this.edgeState != null) {
                            model.setGeometry(edge, this.edgeState.cell.geometry);
                        }
                        var geo = Five.Cells.getGeometry(edge);
                        if (geo == null) {
                            geo = new Five.Geometry();
                            geo.relative = true;
                            model.setGeometry(edge, geo);
                        }
                        var s;
                        var pt;
                        if (this.waypoints != null && this.waypoints.length > 0) {
                            s = this.graph.view.scale;
                            var tr = this.graph.view.translate;
                            geo.points = [];
                            for (var i = 0; i < this.waypoints.length; i++) {
                                pt = this.waypoints[i];
                                geo.points.push(new Five.Point(pt.x / s - tr.x, pt.y / s - tr.y));
                            }
                        }
                        if (target == null) {
                            var t = this.graph.view.translate;
                            s = this.graph.view.scale;
                            pt = new Five.Point(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);
                            pt.x -= this.graph.panDx / this.graph.view.scale;
                            pt.y -= this.graph.panDy / this.graph.view.scale;
                            geo.setTerminalPoint(pt, false);
                        }
                        this.onConnect.fire(new ConnectEvent(edge, target, evt, dropTarget, terminalInserted));
                    }
                }
                catch (e) {
                    console.warn(e.message);
                }
                finally {
                    model.endUpdate();
                }
                if (this.select) {
                    this.selectCells(edge, (terminalInserted) ? target : null);
                }
            }
        };
        ConnectionHandler.prototype.selectCells = function (edge, target) {
            this.graph.setSelectionCell(edge);
        };
        ConnectionHandler.prototype.insertEdge = function (parent, id, value, source, target, style) {
            if (this.factoryMethod == null) {
                return this.graph.insertEdge(parent, id, value, source, target, style);
            }
            else {
                var edge = this.createEdge(value, source, target, style);
                edge = this.graph.addEdge(edge, parent, source, target);
                return edge;
            }
        };
        ConnectionHandler.prototype.createTargetVertex = function (evt, source) {
            var geo = this.graph.getCellGeometry(source);
            while (geo != null && geo.relative) {
                source = Five.Cells.getParent(source);
                geo = this.graph.getCellGeometry(source);
            }
            var clone = this.graph.cloneCells([source])[0];
            geo = Five.Cells.getGeometry(clone);
            if (geo != null) {
                var t = this.graph.view.translate;
                var s = this.graph.view.scale;
                var point = new Five.Point(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);
                geo.x = point.x - geo.width / 2 - this.graph.panDx / s;
                geo.y = point.y - geo.height / 2 - this.graph.panDy / s;
                var tol = this.getAlignmentTolerance();
                if (tol > 0) {
                    var sourceState = this.graph.view.getState(source);
                    if (sourceState != null) {
                        var x = sourceState.x / s - t.x;
                        var y = sourceState.y / s - t.y;
                        if (Math.abs(x - geo.x) <= tol) {
                            geo.x = x;
                        }
                        if (Math.abs(y - geo.y) <= tol) {
                            geo.y = y;
                        }
                    }
                }
            }
            return clone;
        };
        ConnectionHandler.prototype.getAlignmentTolerance = function () {
            return (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;
        };
        ConnectionHandler.prototype.createEdge = function (value, source, target, style) {
            var edge = null;
            if (this.factoryMethod != null) {
                edge = this.factoryMethod(source, target, style);
            }
            if (edge == null) {
                edge = new Five.Cell(value);
                edge.setEdge(true);
                edge.setStyle(style);
                var geo = new Five.Geometry();
                geo.relative = true;
                edge.setGeometry(geo);
            }
            return edge;
        };
        ConnectionHandler.prototype.destroy = function () {
            this.graph.removeMouseListener(this);
            if (this.shape != null) {
                this.shape.destroy();
                this.shape = null;
            }
            if (this.marker != null) {
                this.marker.destroy();
                this.marker = null;
            }
            if (this.constraintHandler != null) {
                this.constraintHandler.destroy();
                this.constraintHandler = null;
            }
            if (this.changeHandler != null) {
                this.graph.getModel().onChange.remove(this.changeHandler);
                this.graph.getView().onScale.remove(this.changeHandler);
                this.graph.getView().onTranslate.remove(this.changeHandler);
                this.graph.getView().onScaleAndTranslate.remove(this.changeHandler);
                this.changeHandler = null;
            }
            if (this.drillHandler != null) {
                this.graph.onStartEditing.remove(this.drillHandler);
                this.graph.getView().onRootChange.remove(this.drillHandler);
                this.drillHandler = null;
            }
            if (this.escapeHandler != null) {
                this.graph.onEscape.remove(this.escapeHandler);
                this.escapeHandler = null;
            }
        };
        return ConnectionHandler;
    }());
    Five.ConnectionHandler = ConnectionHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ConstraintHandler = (function () {
        function ConstraintHandler(graph) {
            this.pointImage = new Five.Image(Five.FileStructure.imageBasePath + "/point.gif", 5, 5);
            this.graph = null;
            this.enabled = true;
            this.highlightColor = Five.Constants.defaultValidColor;
            this.graph = graph;
        }
        ConstraintHandler.prototype.isEnabled = function () {
            return this.enabled;
        };
        ConstraintHandler.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        ConstraintHandler.prototype.reset = function () {
            if (this.focusIcons != null) {
                for (var i = 0; i < this.focusIcons.length; i++) {
                    this.focusIcons[i].destroy();
                }
                this.focusIcons = null;
            }
            if (this.focusHighlight != null) {
                this.focusHighlight.destroy();
                this.focusHighlight = null;
            }
            this.currentConstraint = null;
            this.currentFocusArea = null;
            this.currentPoint = null;
            this.currentFocus = null;
            this.focusPoints = null;
        };
        ConstraintHandler.prototype.getTolerance = function () {
            return this.graph.getTolerance();
        };
        ConstraintHandler.prototype.getImageForConstraint = function (state, constraint, point) {
            return this.pointImage;
        };
        ConstraintHandler.prototype.isEventIgnored = function (me, source) {
            return false;
        };
        ConstraintHandler.prototype.isStateIgnored = function (state, source) {
            return false;
        };
        ConstraintHandler.prototype.destroyIcons = function () {
            if (this.focusIcons != null) {
                for (var i = 0; i < this.focusIcons.length; i++) {
                    this.focusIcons[i].destroy();
                }
                this.focusIcons = null;
                this.focusPoints = null;
            }
        };
        ConstraintHandler.prototype.destroyFocusHighlight = function () {
            if (this.focusHighlight != null) {
                this.focusHighlight.destroy();
                this.focusHighlight = null;
            }
        };
        ConstraintHandler.prototype.update = function (me, source) {
            var _this = this;
            if (this.isEnabled() && !this.isEventIgnored(me, source)) {
                var tol = this.getTolerance();
                var mouse = new Five.Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);
                var connectable = (me.getCell() != null) ? this.graph.isCellConnectable(me.getCell()) : false;
                var i;
                if ((this.currentFocusArea == null || (!Five.Utils.intersects(this.currentFocusArea, mouse) ||
                    (me.getState() != null && this.currentFocus != null && connectable)))) {
                    this.currentFocusArea = null;
                    if (me.getState() != this.currentFocus) {
                        this.currentFocus = null;
                        this.constraints = (me.getState() != null && connectable && !this.isStateIgnored(me.getState(), source)) ?
                            this.graph.getAllConnectionConstraints(me.getState(), source) : null;
                        if (this.constraints != null) {
                            this.currentFocus = me.getState();
                            this.currentFocusArea = new Five.Rectangle(me.getState().x, me.getState().y, me.getState().width, me.getState().height);
                            if (this.focusIcons != null) {
                                for (i = 0; i < this.focusIcons.length; i++) {
                                    this.focusIcons[i].destroy();
                                }
                                this.focusIcons = null;
                                this.focusPoints = null;
                            }
                            this.focusIcons = [];
                            this.focusPoints = [];
                            for (i = 0; i < this.constraints.length; i++) {
                                var cp = this.graph.getConnectionPoint(me.getState(), this.constraints[i]);
                                var img = this.getImageForConstraint(me.getState(), this.constraints[i], cp);
                                var src = img.src;
                                var bounds = new Five.Rectangle(cp.x - img.width / 2, cp.y - img.height / 2, img.width, img.height);
                                var icon = new Five.ImageShape(bounds, src);
                                icon.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.MixedHtml : Five.Dialect.Svg;
                                icon.preserveImageAspect = false;
                                icon.init(Five.ElementInitializer(this.graph.getView().getDecoratorPane()));
                                if (icon.node.previousSibling != null) {
                                    icon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);
                                }
                                var getState = Five.Utils.bind(this, function () {
                                    return (_this.currentFocus != null) ? _this.currentFocus : me.getState();
                                });
                                icon.redraw();
                                Five.Events.redirectMouseEvents(icon.node, this.graph, getState);
                                this.currentFocusArea.add(icon.bounds);
                                this.focusIcons.push(icon);
                                this.focusPoints.push(cp);
                            }
                            this.currentFocusArea.grow(tol);
                        }
                        else {
                            this.destroyIcons();
                            this.destroyFocusHighlight();
                        }
                    }
                }
                this.currentConstraint = null;
                this.currentPoint = null;
                if (this.focusIcons != null && this.constraints != null &&
                    (me.getState() == null || this.currentFocus == me.getState())) {
                    for (i = 0; i < this.focusIcons.length; i++) {
                        if (Five.Utils.intersects(this.focusIcons[i].bounds, mouse)) {
                            this.currentConstraint = this.constraints[i];
                            this.currentPoint = this.focusPoints[i];
                            var tmp = this.focusIcons[i].bounds.clone();
                            var delta = Five.Client.isIe ? 3 : 2;
                            tmp.grow(delta);
                            if (Five.Client.isIe) {
                                tmp.width -= 1;
                                tmp.height -= 1;
                            }
                            if (this.focusHighlight == null) {
                                var hl = new Five.RectangleShape(tmp, null, this.highlightColor, 3);
                                hl.pointerEvents = false;
                                hl.dialect = (this.graph.dialect == Five.Dialect.Svg) ? Five.Dialect.Svg : Five.Dialect.Vml;
                                hl.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
                                this.focusHighlight = hl;
                                var getState1 = Five.Utils.bind(this, function () {
                                    return (_this.currentFocus != null) ? _this.currentFocus : me.getState();
                                });
                                Five.Events.redirectMouseEvents(hl.node, this.graph, getState1);
                            }
                            else {
                                this.focusHighlight.bounds = tmp;
                                this.focusHighlight.redraw();
                            }
                            break;
                        }
                    }
                }
                if (this.currentConstraint == null) {
                    this.destroyFocusHighlight();
                }
            }
            else {
                this.currentConstraint = null;
                this.currentFocus = null;
                this.currentPoint = null;
            }
        };
        ConstraintHandler.prototype.destroy = function () {
            this.reset();
        };
        return ConstraintHandler;
    }());
    Five.ConstraintHandler = ConstraintHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CurrentRootChange = (function () {
        function CurrentRootChange(view, root) {
            this.view = view;
            this.root = root;
            this.previous = root;
            this.isUp = root == null;
            if (!this.isUp) {
                var tmp = this.view.currentRoot;
                var model = this.view.graph.getModel();
                while (tmp != null) {
                    if (tmp == root) {
                        this.isUp = true;
                        break;
                    }
                    tmp = Five.Cells.getParent(tmp);
                }
            }
        }
        CurrentRootChange.prototype.execute = function () {
            var tmp = this.view.currentRoot;
            this.view.currentRoot = this.previous;
            this.previous = tmp;
            var translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);
            if (translate != null) {
                this.view.translate = new Five.Point(-translate.x, -translate.y);
            }
            this.view.onRootChange.fire(new Five.ViewRootChangeEvent(this.view.currentRoot, this.previous, this.isUp));
            if (this.isUp) {
                this.view.clear(this.view.currentRoot, true);
                this.view.validate();
            }
            else {
                this.view.refresh();
            }
            this.isUp = !this.isUp;
        };
        return CurrentRootChange;
    }());
    Five.CurrentRootChange = CurrentRootChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var DefaultPopupMenu = (function () {
        function DefaultPopupMenu(config) {
            this.imageBasePath = null;
            this.config = config;
        }
        DefaultPopupMenu.prototype.createMenu = function (editor, menu, cell, evt) {
            if (this.config != null) {
                var conditions = this.createConditions(editor, cell, evt);
                var item = this.config.firstChild;
                this.addItems(editor, menu, cell, evt, conditions, item, null);
            }
        };
        DefaultPopupMenu.prototype.addItems = function (editor, menu, cell, evt, conditions, item, parent) {
            var addSeparator = false;
            while (item != null) {
                if (item.nodeName == 'add') {
                    var condition = item.getAttribute('if');
                    if (condition == null || conditions[condition]) {
                        var as = item.getAttribute('as');
                        as = Five.Resources.get(as);
                        var funct = Five.Utils.eval(Five.Utils.getTextContent(item));
                        var action = item.getAttribute('action');
                        var icon = item.getAttribute('icon');
                        var iconCls = item.getAttribute('iconCls');
                        if (addSeparator) {
                            menu.addSeparator(parent);
                            addSeparator = false;
                        }
                        if (icon != null && this.imageBasePath) {
                            icon = this.imageBasePath + icon;
                        }
                        var row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls);
                        this.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);
                    }
                }
                else if (item.nodeName == 'separator') {
                    addSeparator = true;
                }
                item = item.nextSibling;
            }
        };
        DefaultPopupMenu.prototype.addAction = function (menu, editor, lab, icon, funct, action, cell, parent, iconCls) {
            var clickHandler = function (evt) {
                funct.call(editor, editor, cell, evt);
                if (action != null) {
                    editor.execute(action, cell);
                }
            };
            return menu.addItem(lab, icon, clickHandler, parent, iconCls);
        };
        DefaultPopupMenu.prototype.createConditions = function (editor, cell, evt) {
            var childCount = Five.Cells.getChildCount(cell);
            var conditions = [];
            conditions['nocell'] = cell == null;
            conditions['ncells'] = editor.getSelectionCount() > 1;
            conditions['cell'] = cell != null;
            var isCell = cell != null && editor.getSelectionCount() == 1;
            conditions['nonEmpty'] = isCell && childCount > 0;
            conditions['expandable'] = isCell && editor.isCellFoldable(cell, false);
            conditions['collapsable'] = isCell && editor.isCellFoldable(cell, true);
            conditions['validRoot'] = isCell && editor.isValidRoot(cell);
            conditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;
            conditions['swimlane'] = isCell && editor.isSwimlane(cell);
            var condNodes = this.config.getElementsByTagName('condition');
            for (var i = 0; i < condNodes.length; i++) {
                var element = condNodes[i];
                var funct = Five.Utils.eval(Five.Utils.getTextContent(element));
                var name = element.getAttribute('name');
                if (name != null && typeof (funct) == 'function') {
                    conditions[name] = funct(editor, cell, evt);
                }
            }
            return conditions;
        };
        return DefaultPopupMenu;
    }());
    Five.DefaultPopupMenu = DefaultPopupMenu;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var DiagramContainer = (function () {
        function DiagramContainer(htmlElement) {
            this.htmlElement = htmlElement;
        }
        DiagramContainer.prototype.setSize = function (width, height) {
            this.htmlElement.style.width = Math.ceil(width) + "px";
            this.htmlElement.style.height = Math.ceil(height) + "px";
        };
        DiagramContainer.prototype.setScroll = function (dx, dy) {
            this.htmlElement.scrollLeft = dx;
            this.htmlElement.scrollTop = dy;
        };
        DiagramContainer.prototype.convertPoint = function (x, y) {
            return Five.Utils.convertPoint(this.htmlElement, x, y);
        };
        DiagramContainer.prototype.getClientSize = function () {
            return new Five.Point(this.htmlElement.clientWidth, this.htmlElement.clientHeight);
        };
        DiagramContainer.prototype.getOffsetSize = function () {
            return new Five.Point(this.htmlElement.offsetWidth, this.htmlElement.offsetHeight);
        };
        DiagramContainer.prototype.getScroll = function () {
            return new Five.Rectangle(this.htmlElement.scrollLeft, this.htmlElement.scrollTop, this.htmlElement.scrollWidth, this.htmlElement.scrollHeight);
        };
        DiagramContainer.prototype.hasScrollbars = function () {
            var style = Five.Utils.getCurrentStyle(this.htmlElement);
            return style != null && (style.overflow == "scroll" || style.overflow == "auto");
        };
        DiagramContainer.prototype.getBorderSizes = function () {
            function parseBorder(value) {
                var result;
                if (value == "thin") {
                    result = 2;
                }
                else if (value == "medium") {
                    result = 4;
                }
                else if (value == "thick") {
                    result = 6;
                }
                else {
                    result = parseInt(value);
                }
                if (isNaN(result)) {
                    result = 0;
                }
                return result;
            }
            var style = Five.Utils.getCurrentStyle(this.htmlElement);
            return new Five.Rectangle(parseBorder(style.borderLeftWidth) + parseInt(style.paddingLeft || 0), parseBorder(style.borderTopWidth) + parseInt(style.paddingTop || 0), parseBorder(style.borderRightWidth) + parseInt(style.paddingRight || 0), parseBorder(style.borderBottomWidth) + parseInt(style.paddingBottom || 0));
        };
        DiagramContainer.prototype.eventTarget = function () { return this.htmlElement; };
        DiagramContainer.prototype.leftPreview = function (canvasParent) {
            if (this.shiftPreview1 != null) {
                var child = this.shiftPreview1.firstChild;
                var next = void 0;
                while (child != null) {
                    next = child.nextSibling;
                    this.htmlElement.appendChild(child);
                    child = next;
                }
                if (this.shiftPreview1.parentNode != null) {
                    this.shiftPreview1.parentNode.removeChild(this.shiftPreview1);
                }
                this.shiftPreview1 = null;
                this.htmlElement.appendChild(canvasParent);
                child = this.shiftPreview2.firstChild;
                while (child != null) {
                    next = child.nextSibling;
                    this.htmlElement.appendChild(child);
                    child = next;
                }
                if (this.shiftPreview2.parentNode != null) {
                    this.shiftPreview2.parentNode.removeChild(this.shiftPreview2);
                }
                this.shiftPreview2 = null;
            }
        };
        DiagramContainer.prototype.rightPreview = function (canvasParent, dx, dy) {
            if (this.shiftPreview1 == null) {
                this.shiftPreview1 = document.createElement("div");
                this.shiftPreview1.style.position = "absolute";
                this.shiftPreview1.style.overflow = "visible";
                this.shiftPreview2 = document.createElement("div");
                this.shiftPreview2.style.position = "absolute";
                this.shiftPreview2.style.overflow = "visible";
                var current = this.shiftPreview1;
                var child = this.htmlElement.firstChild;
                while (child != null) {
                    var next = child.nextSibling;
                    if (child != canvasParent) {
                        current.appendChild(child);
                    }
                    else {
                        current = this.shiftPreview2;
                    }
                    child = next;
                }
                if (this.shiftPreview1.firstChild != null) {
                    this.htmlElement.insertBefore(this.shiftPreview1, canvasParent);
                }
                if (this.shiftPreview2.firstChild != null) {
                    this.htmlElement.appendChild(this.shiftPreview2);
                }
            }
            this.shiftPreview1.style.left = dx + "px";
            this.shiftPreview1.style.top = dy + "px";
            this.shiftPreview2.style.left = dx + "px";
            this.shiftPreview2.style.top = dy + "px";
        };
        DiagramContainer.prototype.is = function (node) {
            return this.htmlElement === node;
        };
        DiagramContainer.prototype.isVisible = function () {
            return this.htmlElement.style.display != "none" && this.htmlElement.style.visibility != "hidden";
        };
        DiagramContainer.prototype.updateContainerStyle = function () {
            var style = Five.Utils.getCurrentStyle(this.htmlElement);
            if (style.position == "static") {
                Five.Utils.nodeStyle(this.htmlElement).position = "relative";
            }
            if (Five.Client.isPointer) {
                Five.Utils.nodeStyle(this.htmlElement).msTouchAction = "none";
            }
        };
        DiagramContainer.prototype.setCanvas = function (canvas) {
            this.htmlElement.appendChild(canvas);
            this.updateContainerStyle();
        };
        DiagramContainer.prototype.getAbsoluteOffset = function (scrollOffset) {
            return Five.Utils.getOffset(this.htmlElement, scrollOffset);
        };
        DiagramContainer.prototype.setTextEditor = function (text) {
            this.htmlElement.appendChild(text);
        };
        DiagramContainer.prototype.getScrollOrigin = function () {
            return Five.Utils.getScrollOrigin(this.htmlElement);
        };
        DiagramContainer.prototype.setDragPreview = function (previewElement) {
            this.htmlElement.appendChild(previewElement);
        };
        DiagramContainer.prototype.afterDrop = function () {
            if (this.htmlElement.style.visibility != 'hidden') {
                this.htmlElement.focus();
            }
        };
        DiagramContainer.prototype.setRubberband = function (rubberband) {
            this.htmlElement.appendChild(rubberband);
        };
        DiagramContainer.prototype.hasChildNode = function (child) {
            return Five.Utils.isAncestorNode(this.htmlElement, child);
        };
        DiagramContainer.prototype.isSvg = function () {
            return this.htmlElement.ownerSVGElement != null;
        };
        DiagramContainer.prototype.addShape = function (shape) {
            this.htmlElement.appendChild(shape);
        };
        return DiagramContainer;
    }());
    function createDiagramContainer(htmlElement) {
        return new DiagramContainer(htmlElement);
    }
    Five.createDiagramContainer = createDiagramContainer;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var DivResizer = (function () {
        function DivResizer(div, container) {
            var _this = this;
            this.resizeWidth = true;
            this.resizeHeight = true;
            this.handlingResize = false;
            if (div.nodeName.toLowerCase() == 'div') {
                if (container == null) {
                    container = window;
                }
                this.div = div;
                var style = Five.Utils.getCurrentStyle(div);
                if (style != null) {
                    this.resizeWidth = style.width == 'auto';
                    this.resizeHeight = style.height == 'auto';
                }
                Five.Events.addListener(container, 'resize', function () {
                    if (!_this.handlingResize) {
                        _this.handlingResize = true;
                        _this.resize();
                        _this.handlingResize = false;
                    }
                });
                this.resize();
            }
        }
        DivResizer.prototype.resize = function () {
            var w = this.getDocumentWidth();
            var h = this.getDocumentHeight();
            var l = parseInt(this.div.style.left);
            var r = parseInt(this.div.style.right);
            var t = parseInt(this.div.style.top);
            var b = parseInt(this.div.style.bottom);
            if (this.resizeWidth &&
                !isNaN(l) &&
                !isNaN(r) &&
                l >= 0 &&
                r >= 0 &&
                w - r - l > 0) {
                this.div.style.width = (w - r - l) + 'px';
            }
            if (this.resizeHeight &&
                !isNaN(t) &&
                !isNaN(b) &&
                t >= 0 &&
                b >= 0 &&
                h - t - b > 0) {
                this.div.style.height = (h - t - b) + 'px';
            }
        };
        DivResizer.prototype.getDocumentWidth = function () {
            return document.body.clientWidth;
        };
        DivResizer.prototype.getDocumentHeight = function () {
            return document.body.clientHeight;
        };
        return DivResizer;
    }());
    Five.DivResizer = DivResizer;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var DragSource = (function () {
        function DragSource(element, dropHandler) {
            var _this = this;
            this.previewOffset = null;
            this.element = null;
            this.dragOffset = null;
            this.dragElement = null;
            this.previewElement = null;
            this.enabled = true;
            this.currentGraph = null;
            this.currentDropTarget = null;
            this.currentPoint = null;
            this.currentGuide = null;
            this.currentHighlight = null;
            this.autoscroll = true;
            this.guidesEnabled = true;
            this.gridEnabled = true;
            this.highlightDropTargets = true;
            this.dragElementZIndex = 100;
            this.dragElementOpacity = 70;
            this.element = element;
            this.dropHandler = dropHandler;
            Five.Events.addGestureListeners(element, function (evt) {
                _this.mouseDown(evt);
            });
            this.eventConsumer = function (e) {
                var evtName = e.eventName;
                var me = e.event;
                if (evtName != Five.Events.mouseDown) {
                    me.consume();
                }
            };
        }
        DragSource.prototype.isEnabled = function () {
            return this.enabled;
        };
        DragSource.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        DragSource.prototype.isGuidesEnabled = function () {
            return this.guidesEnabled;
        };
        DragSource.prototype.setGuidesEnabled = function (value) {
            this.guidesEnabled = value;
        };
        DragSource.prototype.isGridEnabled = function () {
            return this.gridEnabled;
        };
        DragSource.prototype.setGridEnabled = function (value) {
            this.gridEnabled = value;
        };
        DragSource.prototype.getGraphForEvent = function (evt) {
            return null;
        };
        DragSource.prototype.getDropTarget = function (graph, x, y, evt) {
            return graph.getCellAt(x, y);
        };
        DragSource.prototype.createDragElement = function (evt) {
            return this.element.cloneNode(true);
        };
        DragSource.prototype.createPreviewElement = function (graph) {
            return null;
        };
        DragSource.prototype.isActive = function () {
            return this.mouseMoveHandler != null;
        };
        DragSource.prototype.reset = function () {
            if (this.currentGraph != null) {
                this.dragExit(this.currentGraph);
                this.currentGraph = null;
            }
            this.removeDragElement();
            this.removeListeners();
            this.stopDrag();
        };
        DragSource.prototype.mouseDown = function (evt) {
            var _this = this;
            if (this.enabled && !Five.Events.isConsumed(evt) && this.mouseMoveHandler == null) {
                this.startDrag(evt);
                this.mouseMoveHandler = function () { return _this.mouseMove; };
                this.mouseUpHandler = function () { return _this.mouseUp; };
                Five.Events.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);
                if (Five.Client.isTouch && !Five.Events.isMouseEvent(evt)) {
                    this.eventSource = Five.Events.getSource(evt);
                    Five.Events.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);
                }
                Five.Events.consume(evt, true, false);
            }
        };
        DragSource.prototype.startDrag = function (evt) {
            this.dragElement = this.createDragElement(evt);
            this.dragElement.style.position = 'absolute';
            this.dragElement.style.zIndex = "" + this.dragElementZIndex;
            Five.Utils.setOpacity(this.dragElement, this.dragElementOpacity);
        };
        DragSource.prototype.stopDrag = function () {
            this.removeDragElement();
        };
        DragSource.prototype.removeDragElement = function () {
            if (this.dragElement != null) {
                if (this.dragElement.parentNode != null) {
                    this.dragElement.parentNode.removeChild(this.dragElement);
                }
                this.dragElement = null;
            }
        };
        DragSource.prototype.graphContainsEvent = function (graph, evt) {
            var x = Five.Events.getClientX(evt);
            var y = Five.Events.getClientY(evt);
            var absOffset = graph.container.getAbsoluteOffset();
            var origin = Five.Utils.getScrollOrigin();
            var offset = graph.container.getOffsetSize();
            return x >= absOffset.x - origin.x && y >= absOffset.y - origin.y &&
                x <= absOffset.x - origin.x + offset.x && y <= absOffset.y - origin.y + offset.y;
        };
        DragSource.prototype.mouseMove = function (evt) {
            var graph = this.getGraphForEvent(evt);
            if (graph != null && !this.graphContainsEvent(graph, evt)) {
                graph = null;
            }
            if (graph != this.currentGraph) {
                if (this.currentGraph != null) {
                    this.dragExit(this.currentGraph, evt);
                }
                this.currentGraph = graph;
                if (this.currentGraph != null) {
                    this.dragEnter(this.currentGraph, evt);
                }
            }
            if (this.currentGraph != null) {
                this.dragOver(this.currentGraph, evt);
            }
            if (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible')) {
                var x = Five.Events.getClientX(evt);
                var y = Five.Events.getClientY(evt);
                if (this.dragElement.parentNode == null) {
                    document.body.appendChild(this.dragElement);
                }
                this.dragElement.style.visibility = 'visible';
                if (this.dragOffset != null) {
                    x += this.dragOffset.x;
                    y += this.dragOffset.y;
                }
                var offset = Five.Utils.getDocumentScrollOrigin(document);
                this.dragElement.style.left = (x + offset.x) + 'px';
                this.dragElement.style.top = (y + offset.y) + 'px';
            }
            else if (this.dragElement != null) {
                this.dragElement.style.visibility = 'hidden';
            }
            Five.Events.consume(evt);
        };
        DragSource.prototype.mouseUp = function (evt) {
            if (this.currentGraph != null) {
                if (this.currentPoint != null && (this.previewElement == null ||
                    this.previewElement.style.visibility != 'hidden')) {
                    var scale = this.currentGraph.view.scale;
                    var tr = this.currentGraph.view.translate;
                    var x = this.currentPoint.x / scale - tr.x;
                    var y = this.currentPoint.y / scale - tr.y;
                    this.drop(this.currentGraph, evt, this.currentDropTarget, x, y);
                }
                this.dragExit(this.currentGraph);
                this.currentGraph = null;
            }
            this.stopDrag();
            this.removeListeners();
            Five.Events.consume(evt);
        };
        DragSource.prototype.removeListeners = function () {
            if (this.eventSource != null) {
                Five.Events.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);
                this.eventSource = null;
            }
            Five.Events.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);
            this.mouseMoveHandler = null;
            this.mouseUpHandler = null;
        };
        DragSource.prototype.dragEnter = function (graph, evt) {
            graph.isMouseDown = true;
            graph.isMouseTrigger = Five.Events.isMouseEvent(evt);
            this.previewElement = this.createPreviewElement(graph);
            if (this.isGuidesEnabled() && this.previewElement != null) {
                this.currentGuide = new Five.Guide(graph, graph.graphHandler.getGuideStates());
            }
            if (this.highlightDropTargets) {
                this.currentHighlight = new Five.CellHighlight(graph, Five.Constants.dropTargetColor);
            }
            graph.onFireMouse.add(this.eventConsumer);
        };
        DragSource.prototype.dragExit = function (graph, evt) {
            this.currentDropTarget = null;
            this.currentPoint = null;
            graph.isMouseDown = false;
            graph.onFireMouse.remove(this.eventConsumer);
            if (this.previewElement != null) {
                if (this.previewElement.parentNode != null) {
                    this.previewElement.parentNode.removeChild(this.previewElement);
                }
                this.previewElement = null;
            }
            if (this.currentGuide != null) {
                this.currentGuide.destroy();
                this.currentGuide = null;
            }
            if (this.currentHighlight != null) {
                this.currentHighlight.destroy();
                this.currentHighlight = null;
            }
        };
        DragSource.prototype.dragOver = function (graph, evt) {
            var absOffset = graph.container.getAbsoluteOffset();
            var origin = graph.container.getScrollOrigin();
            var x = Five.Events.getClientX(evt) - absOffset.x + origin.x;
            var y = Five.Events.getClientY(evt) - absOffset.y + origin.y;
            if (graph.autoScroll && (this.autoscroll == null || this.autoscroll)) {
                graph.scrollPointToVisible(x, y, graph.autoExtend);
            }
            if (this.currentHighlight != null && graph.isDropEnabled()) {
                this.currentDropTarget = this.getDropTarget(graph, x, y, evt);
                var state = graph.getView().getState(this.currentDropTarget);
                this.currentHighlight.highlight(state);
            }
            if (this.previewElement != null) {
                if (this.previewElement.parentNode == null) {
                    graph.container.setDragPreview(this.previewElement);
                    this.previewElement.style.zIndex = '3';
                    this.previewElement.style.position = 'absolute';
                }
                var gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);
                var hideGuide = true;
                if (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt)) {
                    var w = parseInt(this.previewElement.style.width);
                    var h = parseInt(this.previewElement.style.height);
                    var bounds = new Five.Rectangle(0, 0, w, h);
                    var delta = new Five.Point(x, y);
                    delta = this.currentGuide.move(bounds, delta, gridEnabled);
                    hideGuide = false;
                    x = delta.x;
                    y = delta.y;
                }
                else if (gridEnabled) {
                    var scale = graph.view.scale;
                    var tr = graph.view.translate;
                    var off = graph.gridSize / 2;
                    x = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;
                    y = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;
                }
                if (this.currentGuide != null && hideGuide) {
                    this.currentGuide.hide();
                }
                if (this.previewOffset != null) {
                    x += this.previewOffset.x;
                    y += this.previewOffset.y;
                }
                this.previewElement.style.left = Math.round(x) + 'px';
                this.previewElement.style.top = Math.round(y) + 'px';
                this.previewElement.style.visibility = 'visible';
            }
            this.currentPoint = new Five.Point(x, y);
        };
        DragSource.prototype.drop = function (graph, evt, dropTarget, x, y) {
            this.dropHandler(graph, evt, dropTarget, x, y);
            graph.container.afterDrop();
        };
        return DragSource;
    }());
    Five.DragSource = DragSource;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var EdgeHandler = (function () {
        function EdgeHandler(state, selHandleConfig) {
            var _this = this;
            this.selHandleConfig = selHandleConfig;
            this.graph = null;
            this.state = null;
            this.marker = null;
            this.constraintHandler = null;
            this.error = null;
            this.shape = null;
            this.bends = null;
            this.labelShape = null;
            this.cloneEnabled = true;
            this.addEnabled = false;
            this.removeEnabled = false;
            this.preferHtml = false;
            this.allowHandleBoundsCheck = true;
            this.snapToTerminals = false;
            this.handleImage = null;
            this.tolerance = 0;
            this.outlineConnect = false;
            this.manageLabelHandle = false;
            if (state != null) {
                this.state = state;
                this.init();
                this.escapeHandler = function () { return _this.reset(); };
                this.state.view.graph.onEscape.add(this.escapeHandler);
            }
        }
        EdgeHandler.prototype.init = function () {
            var _this = this;
            this.graph = this.state.view.graph;
            this.marker = this.createMarker();
            this.constraintHandler = new Five.ConstraintHandler(this.graph);
            this.points = [];
            this.abspoints = this.getSelectionPoints(this.state);
            this.shape = this.createSelectionShape(this.abspoints);
            this.shape.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.MixedHtml : Five.Dialect.Svg;
            this.shape.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
            this.shape.pointerEvents = false;
            Five.Utils.nodeStyle(this.shape.node).cursor = Five.Constants.cursorMovableEdge;
            Five.Events.redirectMouseEvents(this.shape.node, this.graph, function () { return _this.state; });
            this.preferHtml = this.state.text != null && this.graph.container.is(this.state.text.node.parentNode);
            if (!this.preferHtml) {
                var sourceState = this.state.getVisibleTerminalState(true);
                if (sourceState != null) {
                    this.preferHtml = sourceState.text != null && this.graph.container.is(sourceState.text.node.parentNode);
                }
                if (!this.preferHtml) {
                    var targetState = this.state.getVisibleTerminalState(false);
                    if (targetState != null) {
                        this.preferHtml = targetState.text != null && this.graph.container.is(targetState.text.node.parentNode);
                    }
                }
            }
            if (this.graph.getSelectionCount() < Five.GraphHandler.maxCells || Five.GraphHandler.maxCells <= 0) {
                this.bends = this.createBends();
            }
            this.label = new Five.Point(this.state.absoluteOffset.x, this.state.absoluteOffset.y);
            this.labelShape = this.createLabelHandleShape();
            this.initBend(this.labelShape);
            Five.Utils.nodeStyle(this.labelShape.node).cursor = Five.Constants.cursorLabelHandle;
            Five.Events.redirectMouseEvents(this.labelShape.node, this.graph, function () { return _this.state; });
            this.redraw();
        };
        EdgeHandler.prototype.isAddPointEvent = function (evt) {
            return Five.Events.isMouseShiftDown(evt);
        };
        EdgeHandler.prototype.isRemovePointEvent = function (evt) {
            return Five.Events.isMouseShiftDown(evt);
        };
        EdgeHandler.prototype.getSelectionPoints = function (state) {
            return state.absolutePoints;
        };
        EdgeHandler.prototype.createSelectionShape = function (points) {
            var constructor = this.state.shape.constructor;
            var shape = new constructor();
            shape.outline = true;
            shape.apply(this.state);
            shape.isDashed = this.isSelectionDashed();
            shape.stroke = this.getSelectionColor();
            shape.isShadow = false;
            return shape;
        };
        EdgeHandler.prototype.getSelectionColor = function () {
            return Five.Constants.edgeSelectionColor;
        };
        EdgeHandler.prototype.getSelectionStrokeWidth = function () {
            return Five.Constants.edgeSelectionStrokewidth;
        };
        EdgeHandler.prototype.isSelectionDashed = function () {
            return Five.Constants.edgeSelectionDashed;
        };
        EdgeHandler.prototype.isConnectableCell = function (cell) {
            return true;
        };
        EdgeHandler.prototype.getCellAt = function (x, y) {
            return (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;
        };
        EdgeHandler.prototype.createMarker = function () {
            var _this = this;
            var marker = new Five.CellMarker(this.graph);
            var self = this;
            marker.getCell = function (me) {
                var cell = Five.CellMarker.prototype.getCell.apply(_this, me);
                var point = self.getPointForEvent(me);
                if (cell == self.state.cell || cell == null) {
                    cell = self.getCellAt(point.x, point.y);
                    if (self.state.cell == cell) {
                        cell = null;
                    }
                }
                if ((_this.graph.isSwimlane(cell) && _this.graph.hitsSwimlaneContent(cell, point.x, point.y)) ||
                    (!self.isConnectableCell(cell)) ||
                    (cell == self.state.cell || (cell != null && !self.graph.connectableEdges && Five.Cells.isEdge(cell))) ||
                    Five.Cells.isAncestor(self.state.cell, cell)) {
                    cell = null;
                }
                return cell;
            };
            marker.isValidState = function (state) {
                var other = _this.graph.view.getTerminalPort(state, _this.graph.view.getState(Five.Cells.getTerminal(_this.state.cell, !_this.isSource)), !_this.isSource);
                var otherCell = (other != null) ? other.cell : null;
                var source = (_this.isSource) ? state.cell : otherCell;
                var target = (_this.isSource) ? otherCell : state.cell;
                _this.error = _this.validateConnection(source, target);
                return _this.error == null;
            };
            return marker;
        };
        EdgeHandler.prototype.validateConnection = function (source, target) {
            return this.graph.getEdgeValidationError(this.state.cell, source, target);
        };
        EdgeHandler.prototype.createBends = function () {
            var _this = this;
            var cell = this.state.cell;
            var bends = [];
            for (var i = 0; i < this.abspoints.length; i++) {
                if (this.isHandleVisible(i)) {
                    var source = i == 0;
                    var target = i == this.abspoints.length - 1;
                    var terminal = source || target;
                    if (terminal || this.graph.isCellBendable(cell)) {
                        var bend = this.createHandleShape(i);
                        this.initBend(bend);
                        if (this.isHandleEnabled(i)) {
                            Five.Utils.nodeStyle(bend.node).cursor = Five.Constants.cursorBendHandle;
                            Five.Events.redirectMouseEvents(bend.node, this.graph, function () { return _this.state; });
                        }
                        bends.push(bend);
                        if (!terminal) {
                            this.points.push(new Five.Point(0, 0));
                            Five.Utils.nodeStyle(bend.node).visibility = "hidden";
                        }
                    }
                }
            }
            return bends;
        };
        EdgeHandler.prototype.isHandleEnabled = function (index) {
            return true;
        };
        EdgeHandler.prototype.isHandleVisible = function (index) {
            var source = this.state.getVisibleTerminalState(true);
            var target = this.state.getVisibleTerminalState(false);
            var geo = this.graph.getCellGeometry(this.state.cell);
            var edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;
            return edgeStyle != Five.EdgeStyle.entityRelation || index == 0 || index == this.abspoints.length - 1;
        };
        EdgeHandler.prototype.createHandleShape = function (index) {
            if (this.handleImage != null) {
                var shape = new Five.ImageShape(new Five.Rectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);
                shape.preserveImageAspect = false;
                return shape;
            }
            else {
                var s = this.selHandleConfig.size;
                if (this.preferHtml) {
                    s -= 1;
                }
                return new Five.RectangleShape(new Five.Rectangle(0, 0, s, s), this.selHandleConfig.fillColor, this.selHandleConfig.strokeColor);
            }
        };
        EdgeHandler.prototype.createLabelHandleShape = function () {
            if (this.labelHandleImage != null) {
                var shape = new Five.ImageShape(new Five.Rectangle(0, 0, this.labelHandleImage.width, this.handleImage.height), this.labelHandleImage.src);
                shape.preserveImageAspect = false;
                return shape;
            }
            else {
                var s = Five.Constants.labelHandleSize;
                return new Five.RectangleShape(new Five.Rectangle(0, 0, s, s), Five.Constants.labelHandleFillcolor, this.selHandleConfig.strokeColor);
            }
        };
        EdgeHandler.prototype.initBend = function (bend) {
            if (this.preferHtml) {
                bend.dialect = Five.Dialect.StrictHtml;
                bend.init(this.graph.container);
            }
            else {
                bend.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.MixedHtml : Five.Dialect.Svg;
                bend.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
            }
        };
        EdgeHandler.prototype.getHandleForEvent = function (me) {
            var tol = (!Five.Events.isMouseEvent(me.getEvent())) ? this.tolerance : 1;
            var hit = (this.allowHandleBoundsCheck && (Five.Client.isIe || tol > 0)) ?
                new Five.Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;
            var minDistSq = null;
            function checkShape(shape) {
                if (shape != null && shape.node.style.display != "none" && shape.node.style.visibility != "hidden" &&
                    (me.isSource(shape) || (hit != null && Five.Utils.intersects(shape.bounds, hit)))) {
                    var dx = me.getGraphX() - shape.bounds.getCenterX();
                    var dy = me.getGraphY() - shape.bounds.getCenterY();
                    var tmp = dx * dx + dy * dy;
                    if (minDistSq == null || tmp <= minDistSq) {
                        minDistSq = tmp;
                        return true;
                    }
                }
                return false;
            }
            if (me.isSource(this.state.text) || checkShape(this.labelShape)) {
                return Five.EventHandle.Label;
            }
            if (this.bends != null) {
                for (var i = 0; i < this.bends.length; i++) {
                    if (checkShape(this.bends[i])) {
                        return i;
                    }
                }
            }
            return null;
        };
        EdgeHandler.prototype.mouseDown = function (sender, me) {
            var handle = this.getHandleForEvent(me);
            if (this.bends != null && this.bends[handle] != null) {
                var b = this.bends[handle].bounds;
                this.snapPoint = new Five.Point(b.getCenterX(), b.getCenterY());
            }
            if (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent())) {
                this.addPoint(this.state, me.getEvent());
            }
            else if (handle != null && !me.isConsumed() && this.graph.isEnabled()) {
                if (this.removeEnabled && this.isRemovePointEvent(me.getEvent())) {
                    this.removePoint(this.state, handle);
                }
                else if (handle != Five.EventHandle.Label || this.graph.isLabelMovable(me.getCell())) {
                    this.start(me.getX(), me.getY(), handle);
                }
                me.consume();
            }
        };
        EdgeHandler.prototype.start = function (x, y, index) {
            this.startX = x;
            this.startY = y;
            this.isSource = (this.bends == null) ? false : index == 0;
            this.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;
            this.isLabel = index == Five.EventHandle.Label;
            if (this.isSource || this.isTarget) {
                var cell = this.state.cell;
                var terminal = Five.Cells.getTerminal(cell, this.isSource);
                if ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||
                    (terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource))) {
                    this.index = index;
                }
            }
            else {
                this.index = index;
            }
        };
        EdgeHandler.prototype.clonePreviewState = function (point, terminal) {
            return this.state.clone();
        };
        EdgeHandler.prototype.getSnapToTerminalTolerance = function () {
            return this.graph.gridSize * this.graph.view.scale / 2;
        };
        EdgeHandler.prototype.updateHint = function (me, point) { };
        EdgeHandler.prototype.removeHint = function () { };
        EdgeHandler.prototype.roundLength = function (length) {
            return Math.round(length);
        };
        EdgeHandler.prototype.isSnapToTerminalsEvent = function (me) {
            return this.snapToTerminals && !Five.Events.isMouseAltDown(me.getEvent());
        };
        EdgeHandler.prototype.getPointForEvent = function (me) {
            var view = this.graph.getView();
            var scale = view.scale;
            var point = new Five.Point(this.roundLength(me.getGraphX() / scale) * scale, this.roundLength(me.getGraphY() / scale) * scale);
            var tt = this.getSnapToTerminalTolerance();
            var overrideX = false;
            var overrideY = false;
            if (tt > 0 && this.isSnapToTerminalsEvent(me)) {
                var snapToPoint = function (pt) {
                    if (pt != null) {
                        var x = pt.x;
                        if (Math.abs(point.x - x) < tt) {
                            point.x = x;
                            overrideX = true;
                        }
                        var y = pt.y;
                        if (Math.abs(point.y - y) < tt) {
                            point.y = y;
                            overrideY = true;
                        }
                    }
                };
                var snapToTerminal = function (terminal) {
                    if (terminal != null) {
                        snapToPoint(new Five.Point(view.getRoutingCenterX(terminal), view.getRoutingCenterY(terminal)));
                    }
                };
                snapToTerminal(this.state.getVisibleTerminalState(true));
                snapToTerminal(this.state.getVisibleTerminalState(false));
                if (this.state.absolutePoints != null) {
                    for (var i = 0; i < this.state.absolutePoints.length; i++) {
                        snapToPoint(this.state.absolutePoints[i]);
                    }
                }
            }
            if (this.graph.isGridEnabledEvent(me.getEvent())) {
                var tr = view.translate;
                if (!overrideX) {
                    point.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;
                }
                if (!overrideY) {
                    point.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;
                }
            }
            return point;
        };
        EdgeHandler.prototype.getPreviewTerminalState = function (me) {
            this.constraintHandler.update(me, this.isSource);
            if (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) {
                this.marker.reset();
                return this.constraintHandler.currentFocus;
            }
            else {
                this.marker.process(me);
                return this.marker.getValidState();
            }
        };
        EdgeHandler.prototype.getPreviewPoints = function (point) {
            var geometry = this.graph.getCellGeometry(this.state.cell);
            var points = (geometry.points != null) ? geometry.points.slice() : null;
            point = new Five.Point(point.x, point.y);
            if (!this.isSource && !this.isTarget) {
                this.convertPoint(point, false);
                if (points == null) {
                    points = [point];
                }
                else {
                    points[this.index - 1] = point;
                }
            }
            else if (this.graph.resetEdgesOnConnect) {
                points = null;
            }
            return points;
        };
        EdgeHandler.prototype.isOutlineConnectEvent = function (me) {
            return this.outlineConnect && (me.isSource(this.marker.highlight.shape) || Five.Events.isMouseAltDown(me.getEvent()));
        };
        EdgeHandler.prototype.updatePreviewState = function (edge, point, terminalState, me) {
            var sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);
            var targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);
            var sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);
            var targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);
            var constraint = this.constraintHandler.currentConstraint;
            if (constraint == null) {
                if (terminalState != null && this.isOutlineConnectEvent(me)) {
                    constraint = this.graph.getOutlineConstraint(point, terminalState, me);
                    this.constraintHandler.currentConstraint = constraint;
                    this.constraintHandler.currentFocus = terminalState;
                    this.constraintHandler.currentPoint = point;
                }
                else {
                    constraint = new Five.ConnectionConstraint();
                }
            }
            if (this.outlineConnect) {
                if (this.marker.highlight != null && this.marker.highlight.shape != null) {
                    if (this.constraintHandler.currentConstraint != null &&
                        this.constraintHandler.currentFocus != null) {
                        this.marker.highlight.shape.stroke = Five.Constants.outlineHighlightColor;
                        this.marker.highlight.shape.strokewidth = Five.Constants.outlineHighlightStrokewidth / this.state.view.scale / this.state.view.scale;
                        this.marker.highlight.repaint();
                    }
                    else if (this.marker.hasValidState()) {
                        this.marker.highlight.shape.stroke = Five.Constants.defaultValidColor;
                        this.marker.highlight.shape.strokewidth = Five.Constants.highlightStrokewidth / this.state.view.scale / this.state.view.scale;
                        this.marker.highlight.repaint();
                    }
                }
            }
            if (this.isSource) {
                sourceConstraint = constraint;
            }
            else if (this.isTarget) {
                targetConstraint = constraint;
            }
            if (!this.isSource || sourceState != null) {
                edge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);
            }
            if (!this.isTarget || targetState != null) {
                edge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);
            }
            if ((this.isSource || this.isTarget) && terminalState == null) {
                edge.setAbsoluteTerminalPoint(point, this.isSource);
                if (this.marker.getMarkedState() == null) {
                    this.error = (this.graph.allowDanglingEdges) ? null : "";
                }
            }
            edge.view.updatePoints(edge, this.points, sourceState, targetState);
            edge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);
        };
        EdgeHandler.prototype.mouseMove = function (sender, me) {
            if (this.index != null && this.marker != null) {
                var point = this.getPointForEvent(me);
                if (Five.Events.isMouseShiftDown(me.getEvent()) && this.snapPoint != null) {
                    if (Math.abs(this.snapPoint.x - point.x) < Math.abs(this.snapPoint.y - point.y)) {
                        point.x = this.snapPoint.x;
                    }
                    else {
                        point.y = this.snapPoint.y;
                    }
                }
                if (this.isLabel) {
                    this.label.x = point.x;
                    this.label.y = point.y;
                }
                else {
                    this.points = this.getPreviewPoints(point);
                    var terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;
                    var clone = this.clonePreviewState(point, (terminalState != null) ? terminalState.cell : null);
                    this.updatePreviewState(clone, point, terminalState, me);
                    var color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;
                    this.setPreviewColor(color);
                    this.abspoints = clone.absolutePoints;
                    this.active = true;
                }
                this.drawPreview();
                this.updateHint(me, point);
                Five.Events.consume(me.getEvent());
                me.consume();
            }
            else if (Five.Client.isIe && this.getHandleForEvent(me) != null) {
                me.consume(false);
            }
        };
        EdgeHandler.prototype.mouseUp = function (sender, me) {
            if (this.index != null && this.marker != null) {
                var edge = this.state.cell;
                if (me.getX() != this.startX || me.getY() != this.startY) {
                    var clone = this.graph.isCloneEvent(me.getEvent()) && this.cloneEnabled && this.graph.isCellsCloneable();
                    if (this.error != null) {
                        if (this.error.length > 0) {
                            this.graph.validationAlert(this.error);
                        }
                    }
                    else if (this.isLabel) {
                        this.moveLabel(this.state, this.label.x, this.label.y);
                    }
                    else if (this.isSource || this.isTarget) {
                        var terminal = null;
                        if (this.constraintHandler.currentConstraint != null &&
                            this.constraintHandler.currentFocus != null) {
                            terminal = this.constraintHandler.currentFocus.cell;
                        }
                        if (terminal == null && this.marker.hasValidState()) {
                            terminal = this.marker.validState.cell;
                        }
                        if (terminal != null) {
                            edge = this.connect(edge, terminal, this.isSource, clone, me);
                        }
                        else if (this.graph.isAllowDanglingEdges()) {
                            var pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];
                            pt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);
                            pt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);
                            var pstate = this.graph.getView().getState(Five.Cells.getParent(edge));
                            if (pstate != null) {
                                pt.x -= pstate.origin.x;
                                pt.y -= pstate.origin.y;
                            }
                            pt.x -= this.graph.panDx / this.graph.view.scale;
                            pt.y -= this.graph.panDy / this.graph.view.scale;
                            edge = this.changeTerminalPoint(edge, pt, this.isSource, clone);
                        }
                    }
                    else if (this.active) {
                        edge = this.changePoints(edge, this.points, clone);
                    }
                    else {
                        this.graph.getView().invalidate(this.state.cell);
                        this.graph.getView().revalidate();
                    }
                }
                if (this.marker != null) {
                    this.reset();
                    if (edge != this.state.cell) {
                        this.graph.setSelectionCell(edge);
                    }
                }
                me.consume();
            }
        };
        EdgeHandler.prototype.reset = function () {
            this.error = null;
            this.index = null;
            this.label = null;
            this.points = null;
            this.snapPoint = null;
            this.active = false;
            this.isLabel = false;
            this.isSource = false;
            this.isTarget = false;
            if (this.marker != null) {
                this.marker.reset();
            }
            this.constraintHandler.reset();
            this.setPreviewColor(Five.Constants.edgeSelectionColor);
            this.removeHint();
            this.redraw();
        };
        EdgeHandler.prototype.setPreviewColor = function (color) {
            if (this.shape != null) {
                this.shape.stroke = color;
            }
        };
        EdgeHandler.prototype.convertPoint = function (point, gridEnabled) {
            var scale = this.graph.getView().getScale();
            var tr = this.graph.getView().getTranslate();
            if (gridEnabled) {
                point.x = this.graph.snap(point.x);
                point.y = this.graph.snap(point.y);
            }
            point.x = Math.round(point.x / scale - tr.x);
            point.y = Math.round(point.y / scale - tr.y);
            var pstate = this.graph.getView().getState(Five.Cells.getParent(this.state.cell));
            if (pstate != null) {
                point.x -= pstate.origin.x;
                point.y -= pstate.origin.y;
            }
            return point;
        };
        EdgeHandler.prototype.moveLabel = function (edgeState, x, y) {
            var model = this.graph.getModel();
            var geometry = Five.Cells.getGeometry(edgeState.cell);
            if (geometry != null) {
                var scale = this.graph.getView().scale;
                geometry = geometry.clone();
                if (geometry.relative) {
                    var pt = this.graph.getView().getRelativePoint(edgeState, x, y);
                    geometry.x = Math.round(pt.x * 10000) / 10000;
                    geometry.y = Math.round(pt.y);
                    geometry.offset = new Five.Point(0, 0);
                    pt = this.graph.view.getPoint(edgeState, geometry);
                    geometry.offset = new Five.Point(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));
                }
                else {
                    var points = edgeState.absolutePoints;
                    var p0 = points[0];
                    var pe = points[points.length - 1];
                    if (p0 != null && pe != null) {
                        var cx = p0.x + (pe.x - p0.x) / 2;
                        var cy = p0.y + (pe.y - p0.y) / 2;
                        geometry.offset = new Five.Point(Math.round((x - cx) / scale), Math.round((y - cy) / scale));
                        geometry.x = 0;
                        geometry.y = 0;
                    }
                }
                model.setGeometry(edgeState.cell, geometry);
            }
        };
        EdgeHandler.prototype.connect = function (edge, terminal, isSource, isClone, me) {
            var model = this.graph.getModel();
            var parent = Five.Cells.getParent(edge);
            model.beginUpdate();
            try {
                if (isClone) {
                    var clone = this.graph.cloneCells([edge])[0];
                    model.add(parent, clone, Five.Cells.getChildCount(parent));
                    var other = Five.Cells.getTerminal(edge, !isSource);
                    this.graph.connectCell(clone, other, !isSource);
                    edge = clone;
                }
                var constraint = this.constraintHandler.currentConstraint;
                if (constraint == null) {
                    constraint = new Five.ConnectionConstraint();
                }
                this.graph.connectCell(edge, terminal, isSource, constraint);
            }
            finally {
                model.endUpdate();
            }
            return edge;
        };
        EdgeHandler.prototype.changeTerminalPoint = function (edge, point, isSource, clone) {
            var model = this.graph.getModel();
            model.beginUpdate();
            try {
                if (clone) {
                    var parent = Five.Cells.getParent(edge);
                    var terminal = Five.Cells.getTerminal(edge, !isSource);
                    edge = this.graph.cloneCells([edge])[0];
                    model.add(parent, edge, Five.Cells.getChildCount(parent));
                    model.setTerminal(edge, terminal, !isSource);
                }
                var geo = Five.Cells.getGeometry(edge);
                if (geo != null) {
                    geo = geo.clone();
                    geo.setTerminalPoint(point, isSource);
                    model.setGeometry(edge, geo);
                    this.graph.connectCell(edge, null, isSource, new Five.ConnectionConstraint());
                }
            }
            finally {
                model.endUpdate();
            }
            return edge;
        };
        EdgeHandler.prototype.changePoints = function (edge, points, clone) {
            var model = this.graph.getModel();
            model.beginUpdate();
            try {
                if (clone) {
                    var parent = Five.Cells.getParent(edge);
                    var source = Five.Cells.getTerminal(edge, true);
                    var target = Five.Cells.getTerminal(edge, false);
                    edge = this.graph.cloneCells([edge])[0];
                    model.add(parent, edge, Five.Cells.getChildCount(parent));
                    model.setTerminal(edge, source, true);
                    model.setTerminal(edge, target, false);
                }
                var geo = Five.Cells.getGeometry(edge);
                if (geo != null) {
                    geo = geo.clone();
                    geo.points = points;
                    model.setGeometry(edge, geo);
                }
            }
            finally {
                model.endUpdate();
            }
            return edge;
        };
        EdgeHandler.prototype.addPoint = function (state, evt) {
            var pt = this.graph.container.convertPoint(Five.Events.getClientX(evt), Five.Events.getClientY(evt));
            var gridEnabled = this.graph.isGridEnabledEvent(evt);
            this.convertPoint(pt, gridEnabled);
            this.addPointAt(state, pt.x, pt.y);
            Five.Events.consume(evt);
        };
        EdgeHandler.prototype.addPointAt = function (state, x, y) {
            var geo = this.graph.getCellGeometry(state.cell);
            var pt = new Five.Point(x, y);
            if (geo != null) {
                geo = geo.clone();
                var t = this.graph.view.translate;
                var s = this.graph.view.scale;
                var offset = new Five.Point(t.x * s, t.y * s);
                var parent = Five.Cells.getParent(this.state.cell);
                if (Five.Cells.isVertex(parent)) {
                    var pState = this.graph.view.getState(parent);
                    offset = new Five.Point(pState.x, pState.y);
                }
                var index = Five.Utils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);
                if (geo.points == null) {
                    geo.points = [pt];
                }
                else {
                    geo.points.splice(index, 0, pt);
                }
                this.graph.getModel().setGeometry(state.cell, geo);
                this.refresh();
                this.redraw();
            }
        };
        EdgeHandler.prototype.removePoint = function (state, index) {
            if (index > 0 && index < this.abspoints.length - 1) {
                var geo = this.graph.getCellGeometry(this.state.cell);
                if (geo != null && geo.points != null) {
                    geo = geo.clone();
                    geo.points.splice(index - 1, 1);
                    this.graph.getModel().setGeometry(state.cell, geo);
                    this.refresh();
                    this.redraw();
                }
            }
        };
        EdgeHandler.prototype.getHandleFillColor = function (index) {
            var isSource = index == 0;
            var cell = this.state.cell;
            var terminal = Five.Cells.getTerminal(cell, isSource);
            var color = this.selHandleConfig.fillColor;
            if ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||
                (terminal == null && !this.graph.isTerminalPointMovable(cell, isSource))) {
                color = Five.Constants.lockedHandleFillcolor;
            }
            else if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource)) {
                color = Five.Constants.connectHandleFillcolor;
            }
            return color;
        };
        EdgeHandler.prototype.redraw = function () {
            this.abspoints = this.state.absolutePoints.slice();
            this.redrawHandles();
            var g = Five.Cells.getGeometry(this.state.cell);
            var pts = g.points;
            if (this.bends != null && this.bends.length > 0) {
                if (pts != null) {
                    if (this.points == null) {
                        this.points = [];
                    }
                    for (var i = 1; i < this.bends.length - 1; i++) {
                        if (this.bends[i] != null && this.abspoints[i] != null) {
                            this.points[i - 1] = pts[i - 1];
                        }
                    }
                }
            }
            this.drawPreview();
        };
        EdgeHandler.prototype.redrawHandles = function () {
            var cell = this.state.cell;
            var b = this.labelShape.bounds;
            this.label = new Five.Point(this.state.absoluteOffset.x, this.state.absoluteOffset.y);
            this.labelShape.bounds = new Five.Rectangle(Math.round(this.label.x - b.width / 2), Math.round(this.label.y - b.height / 2), b.width, b.height);
            var lab = this.graph.getLabel(cell);
            this.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));
            if (this.bends != null && this.bends.length > 0) {
                var n = this.abspoints.length - 1;
                var p0 = this.abspoints[0];
                var x0 = p0.x;
                var y0 = p0.y;
                b = this.bends[0].bounds;
                this.bends[0].bounds = new Five.Rectangle(Math.round(x0 - b.width / 2), Math.round(y0 - b.height / 2), b.width, b.height);
                this.bends[0].fill = this.getHandleFillColor(0);
                this.bends[0].redraw();
                if (this.manageLabelHandle) {
                    this.checkLabelHandle(this.bends[0].bounds);
                }
                var pe = this.abspoints[n];
                var xn = pe.x;
                var yn = pe.y;
                var bn = this.bends.length - 1;
                b = this.bends[bn].bounds;
                this.bends[bn].bounds = new Five.Rectangle(Math.round(xn - b.width / 2), Math.round(yn - b.height / 2), b.width, b.height);
                this.bends[bn].fill = this.getHandleFillColor(bn);
                this.bends[bn].redraw();
                if (this.manageLabelHandle) {
                    this.checkLabelHandle(this.bends[bn].bounds);
                }
                this.redrawInnerBends(p0, pe);
                this.labelShape.redraw();
            }
        };
        EdgeHandler.prototype.redrawInnerBends = function (p0, pe) {
            for (var i = 1; i < this.bends.length - 1; i++) {
                if (this.bends[i] != null) {
                    if (this.abspoints[i] != null) {
                        var x = this.abspoints[i].x;
                        var y = this.abspoints[i].y;
                        var b = this.bends[i].bounds;
                        Five.Utils.nodeStyle(this.bends[i].node).visibility = "visible";
                        this.bends[i].bounds = new Five.Rectangle(Math.round(x - b.width / 2), Math.round(y - b.height / 2), b.width, b.height);
                        if (this.manageLabelHandle) {
                            this.checkLabelHandle(this.bends[i].bounds);
                        }
                        else if (this.handleImage == null && this.labelShape.visible && Five.Utils.intersects(this.bends[i].bounds, this.labelShape.bounds)) {
                            var w = this.selHandleConfig.size + 3;
                            var h = this.selHandleConfig.size + 3;
                            this.bends[i].bounds = new Five.Rectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);
                        }
                        this.bends[i].redraw();
                    }
                    else {
                        this.bends[i].destroy();
                        this.bends[i] = null;
                    }
                }
            }
        };
        EdgeHandler.prototype.checkLabelHandle = function (bounds) {
            if (this.labelShape != null) {
                var b2 = this.labelShape.bounds;
                if (Five.Utils.intersects(bounds, b2)) {
                    if (bounds.getCenterY() < b2.getCenterY()) {
                        b2.y = bounds.y + bounds.height;
                    }
                    else {
                        b2.y = bounds.y - b2.height;
                    }
                }
            }
        };
        EdgeHandler.prototype.drawPreview = function () {
            if (this.isLabel) {
                var b = this.labelShape.bounds;
                var bounds = new Five.Rectangle(Math.round(this.label.x - b.width / 2), Math.round(this.label.y - b.height / 2), b.width, b.height);
                this.labelShape.bounds = bounds;
                this.labelShape.redraw();
            }
            else {
                this.shape.points = this.abspoints;
                this.shape.scale = this.state.view.scale;
                this.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;
                this.shape.arrowStrokewidth = this.getSelectionStrokeWidth();
                this.shape.redraw();
            }
        };
        EdgeHandler.prototype.refresh = function () {
            this.abspoints = this.getSelectionPoints(this.state);
            this.shape.points = this.abspoints;
            this.points = [];
            if (this.bends != null) {
                this.destroyBends();
                this.bends = this.createBends();
            }
            if (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null) {
                this.labelShape.node.parentNode.appendChild(this.labelShape.node);
            }
        };
        EdgeHandler.prototype.destroyBends = function () {
            if (this.bends != null) {
                for (var i = 0; i < this.bends.length; i++) {
                    if (this.bends[i] != null) {
                        this.bends[i].destroy();
                    }
                }
                this.bends = null;
            }
        };
        EdgeHandler.prototype.destroy = function () {
            if (this.escapeHandler != null) {
                this.state.view.graph.onEscape.remove(this.escapeHandler);
                this.escapeHandler = null;
            }
            if (this.marker != null) {
                this.marker.destroy();
                this.marker = null;
            }
            if (this.shape != null) {
                this.shape.destroy();
                this.shape = null;
            }
            if (this.labelShape != null) {
                this.labelShape.destroy();
                this.labelShape = null;
            }
            if (this.constraintHandler != null) {
                this.constraintHandler.destroy();
                this.constraintHandler = null;
            }
            this.destroyBends();
            this.removeHint();
        };
        return EdgeHandler;
    }());
    Five.EdgeHandler = EdgeHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ElbowEdgeHandler = (function (_super) {
        __extends(ElbowEdgeHandler, _super);
        function ElbowEdgeHandler(state, selHandleConfig) {
            var _this = _super.call(this, state, selHandleConfig) || this;
            _this.flipEnabled = true;
            _this.doubleClickOrientationResource = (Five.Client.language != "none") ? "doubleClickOrientation" : "";
            return _this;
        }
        ElbowEdgeHandler.prototype.createBends = function () {
            var _this = this;
            var bends = [];
            var bend = this.createHandleShape(0);
            this.initBend(bend);
            Five.Utils.nodeStyle(bend.node).cursor = Five.Constants.cursorBendHandle;
            Five.Events.redirectMouseEvents(bend.node, this.graph, function () { return _this.state; });
            bends.push(bend);
            if (Five.Client.isTouch) {
                bend.node.setAttribute("pointer-events", "none");
            }
            bends.push(this.createVirtualBend());
            this.points.push(new Five.Point(0, 0));
            bend = this.createHandleShape(2);
            this.initBend(bend);
            Five.Utils.nodeStyle(bend.node).cursor = Five.Constants.cursorBendHandle;
            Five.Events.redirectMouseEvents(bend.node, this.graph, function () { return _this.state; });
            bends.push(bend);
            if (Five.Client.isTouch) {
                bend.node.setAttribute("pointer-events", "none");
            }
            return bends;
        };
        ElbowEdgeHandler.prototype.createVirtualBend = function () {
            var _this = this;
            var bend = this.createHandleShape();
            this.initBend(bend);
            var crs = this.getCursorForBend();
            Five.Utils.nodeStyle(bend.node).cursor = crs;
            var dblClick = Five.Utils.bind(this, function (evt) {
                if (!Five.Events.isConsumed(evt) && _this.flipEnabled) {
                    _this.graph.flipEdge(_this.state.cell);
                    Five.Events.consume(evt);
                }
            });
            Five.Events.redirectMouseEvents(bend.node, this.graph, function () { return _this.state; }, null, null, null, dblClick);
            if (!this.graph.isCellBendable(this.state.cell)) {
                Five.Utils.nodeStyle(bend.node).display = "none";
            }
            return bend;
        };
        ElbowEdgeHandler.prototype.getCursorForBend = function () {
            return (this.state.style.edge == Five.EdgeKind.Toptobottom ||
                (this.state.style.edge == Five.EdgeKind.Elbow) &&
                    this.state.style.elbow == Five.ElbowStyle.Vertical) ?
                "row-resize" : "col-resize";
        };
        ElbowEdgeHandler.prototype.getTooltipForNode = function (node) {
            var tip = null;
            if (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||
                node.parentNode == this.bends[1].node)) {
                tip = this.doubleClickOrientationResource;
                tip = Five.Resources.get(tip) || tip;
            }
            return tip;
        };
        ElbowEdgeHandler.prototype.convertPoint = function (point, snapToGrid) {
            var scale = this.graph.getView().getScale();
            var tr = this.graph.getView().getTranslate();
            var origin = this.state.origin;
            if (snapToGrid) {
                point.x = this.graph.snap(point.x);
                point.y = this.graph.snap(point.y);
            }
            point.x = Math.round(point.x / scale - tr.x - origin.x);
            point.y = Math.round(point.y / scale - tr.y - origin.y);
            return point;
        };
        ElbowEdgeHandler.prototype.redrawInnerBends = function (p0, pe) {
            var g = Five.Cells.getGeometry(this.state.cell);
            var pts = this.state.absolutePoints;
            var pt = null;
            if (pts.length > 1) {
                p0 = pts[1];
                pe = pts[pts.length - 2];
            }
            else if (g.points != null && g.points.length > 0) {
                pt = pts[0];
            }
            if (pt == null) {
                pt = new Five.Point(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);
            }
            else {
                pt = new Five.Point(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x), this.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));
            }
            var b = this.bends[1].bounds;
            var w = b.width;
            var h = b.height;
            var bounds = new Five.Rectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);
            if (this.manageLabelHandle) {
                this.checkLabelHandle(bounds);
            }
            else if (this.handleImage == null && this.labelShape.visible && Five.Utils.intersects(bounds, this.labelShape.bounds)) {
                w = this.selHandleConfig.size + 3;
                h = this.selHandleConfig.size + 3;
                bounds = new Five.Rectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);
            }
            this.bends[1].bounds = bounds;
            this.bends[1].redraw();
            if (this.manageLabelHandle) {
                this.checkLabelHandle(this.bends[1].bounds);
            }
        };
        return ElbowEdgeHandler;
    }(Five.EdgeHandler));
    Five.ElbowEdgeHandler = ElbowEdgeHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var EdgeSegmentHandler = (function (_super) {
        __extends(EdgeSegmentHandler, _super);
        function EdgeSegmentHandler(state, selHandleConfig) {
            return _super.call(this, state, selHandleConfig) || this;
        }
        EdgeSegmentHandler.prototype.getPreviewPoints = function (point) {
            if (this.isSource || this.isTarget) {
                return _super.prototype.getPreviewPoints.call(this, point);
            }
            else {
                this.convertPoint(point, false);
                var pts = this.state.absolutePoints;
                var last = pts[0].clone();
                this.convertPoint(last, false);
                var result = [];
                for (var i = 1; i < pts.length; i++) {
                    var pt = pts[i].clone();
                    this.convertPoint(pt, false);
                    if (i == this.index) {
                        if (last.x == pt.x) {
                            last.x = point.x;
                            pt.x = point.x;
                        }
                        else {
                            last.y = point.y;
                            pt.y = point.y;
                        }
                    }
                    if (i < pts.length - 1) {
                        result.push(pt);
                    }
                    last = pt;
                }
                if (result.length == 1) {
                    var view = this.state.view;
                    var source = this.state.getVisibleTerminalState(true);
                    var target = this.state.getVisibleTerminalState(false);
                    if (target != null && source != null) {
                        var dx = this.state.origin.x;
                        var dy = this.state.origin.y;
                        if (Five.Utils.contains(target, result[0].x + dx, result[0].y + dy)) {
                            if (pts[1].y == pts[2].y) {
                                result[0].y = view.getRoutingCenterY(source) - dy;
                            }
                            else {
                                result[0].x = view.getRoutingCenterX(source) - dx;
                            }
                        }
                        else if (Five.Utils.contains(source, result[0].x + dx, result[0].y + dy)) {
                            if (pts[1].y == pts[0].y) {
                                result[0].y = view.getRoutingCenterY(target) - dy;
                            }
                            else {
                                result[0].x = view.getRoutingCenterX(target) - dx;
                            }
                        }
                    }
                }
                else if (result.length == 0) {
                    result = [point];
                }
                return result;
            }
        };
        EdgeSegmentHandler.prototype.createBends = function () {
            var _this = this;
            var bends = [];
            var bend = this.createHandleShape(0);
            this.initBend(bend);
            Five.Utils.nodeStyle(bend.node).cursor = Five.Constants.cursorBendHandle;
            Five.Events.redirectMouseEvents(bend.node, this.graph, function () { return _this.state; });
            bends.push(bend);
            if (Five.Client.isTouch) {
                bend.node.setAttribute("pointer-events", "none");
            }
            var pts = this.state.absolutePoints;
            if (this.graph.isCellBendable(this.state.cell)) {
                if (this.points == null) {
                    this.points = [];
                }
                for (var i = 0; i < pts.length - 1; i++) {
                    bend = this.createVirtualBend();
                    bends.push(bend);
                    var horizontal = pts[i].x - pts[i + 1].x == 0;
                    Five.Utils.nodeStyle(bend.node).cursor = (horizontal) ? "col-resize" : "row-resize";
                    this.points.push(new Five.Point(0, 0));
                    if (Five.Client.isTouch) {
                        bend.node.setAttribute("pointer-events", "none");
                    }
                }
            }
            bend = this.createHandleShape(pts.length);
            this.initBend(bend);
            Five.Utils.nodeStyle(bend.node).cursor = Five.Constants.cursorBendHandle;
            Five.Events.redirectMouseEvents(bend.node, this.graph, function () { return _this.state; });
            bends.push(bend);
            if (Five.Client.isTouch) {
                bend.node.setAttribute("pointer-events", "none");
            }
            return bends;
        };
        EdgeSegmentHandler.prototype.redraw = function () {
            this.refresh();
            _super.prototype.redraw.call(this);
        };
        EdgeSegmentHandler.prototype.redrawInnerBends = function (p0, pe) {
            if (this.graph.isCellBendable(this.state.cell)) {
                var pts = this.state.absolutePoints;
                if (pts != null && pts.length > 1) {
                    for (var i = 0; i < this.state.absolutePoints.length - 1; i++) {
                        if (this.bends[i + 1] != null) {
                            p0 = pts[i];
                            pe = pts[i + 1];
                            var pt = new Five.Point(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);
                            var b = this.bends[i + 1].bounds;
                            this.bends[i + 1].bounds = new Five.Rectangle(Math.round(pt.x - b.width / 2), Math.round(pt.y - b.height / 2), b.width, b.height);
                            this.bends[i + 1].redraw();
                            if (this.manageLabelHandle) {
                                this.checkLabelHandle(this.bends[i + 1].bounds);
                            }
                        }
                    }
                }
            }
        };
        EdgeSegmentHandler.prototype.changePoints = function (edge, points, clone) {
            points = [];
            var pts = this.abspoints;
            if (pts.length > 1) {
                var pt0 = pts[0];
                var pt1 = pts[1];
                for (var i = 2; i < pts.length; i++) {
                    var pt2 = pts[i];
                    if ((Math.round(pt0.x) != Math.round(pt1.x) ||
                        Math.round(pt1.x) != Math.round(pt2.x)) &&
                        (Math.round(pt0.y) != Math.round(pt1.y) ||
                            Math.round(pt1.y) != Math.round(pt2.y))) {
                        pt0 = pt1;
                        pt1 = pt1.clone();
                        this.convertPoint(pt1, false);
                        points.push(pt1);
                    }
                    pt1 = pt2;
                }
            }
            return _super.prototype.changePoints.call(this, edge, points, clone);
        };
        return EdgeSegmentHandler;
    }(Five.ElbowEdgeHandler));
    Five.EdgeSegmentHandler = EdgeSegmentHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var EdgeStyle = (function () {
        function EdgeStyle() {
        }
        EdgeStyle.entityRelation = function (state, source, target, points, result) {
            var view = state.view;
            var graph = view.graph;
            var segment = state.style.segment * view.scale;
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            var isSourceLeft = false;
            var constraint;
            if (p0 != null) {
                source = new Five.CellState(null, null, null);
                source.x = p0.x;
                source.y = p0.y;
            }
            else if (source != null) {
                constraint = Five.Utils.getPortConstraints(source, state, true, Five.Constants.directionMaskNone);
                if (constraint != Five.Constants.directionMaskNone) {
                    isSourceLeft = constraint == Five.Constants.directionMaskWest;
                }
                else {
                    var sourceGeometry = graph.getCellGeometry(source.cell);
                    if (sourceGeometry.relative) {
                        isSourceLeft = sourceGeometry.x <= 0.5;
                    }
                    else if (target != null) {
                        isSourceLeft = target.x + target.width < source.x;
                    }
                }
            }
            else {
                return;
            }
            var isTargetLeft = true;
            if (pe != null) {
                target = new Five.CellState(null, null, null);
                target.x = pe.x;
                target.y = pe.y;
            }
            else if (target != null) {
                constraint = Five.Utils.getPortConstraints(target, state, false, Five.Constants.directionMaskNone);
                if (constraint != Five.Constants.directionMaskNone) {
                    isTargetLeft = constraint == Five.Constants.directionMaskWest;
                }
                else {
                    var targetGeometry = graph.getCellGeometry(target.cell);
                    if (targetGeometry.relative) {
                        isTargetLeft = targetGeometry.x <= 0.5;
                    }
                    else if (source != null) {
                        isTargetLeft = source.x + source.width < target.x;
                    }
                }
            }
            if (source != null && target != null) {
                var x0 = (isSourceLeft) ? source.x : source.x + source.width;
                var y0 = view.getRoutingCenterY(source);
                var xe = (isTargetLeft) ? target.x : target.x + target.width;
                var ye = view.getRoutingCenterY(target);
                var seg = segment;
                var dx = (isSourceLeft) ? -seg : seg;
                var dep = new Five.Point(x0 + dx, y0);
                dx = (isTargetLeft) ? -seg : seg;
                var arr = new Five.Point(xe + dx, ye);
                if (isSourceLeft == isTargetLeft) {
                    var x = (isSourceLeft) ?
                        Math.min(x0, xe) - segment :
                        Math.max(x0, xe) + segment;
                    result.push(new Five.Point(x, y0));
                    result.push(new Five.Point(x, ye));
                }
                else if ((dep.x < arr.x) == isSourceLeft) {
                    var midY = y0 + (ye - y0) / 2;
                    result.push(dep);
                    result.push(new Five.Point(dep.x, midY));
                    result.push(new Five.Point(arr.x, midY));
                    result.push(arr);
                }
                else {
                    result.push(dep);
                    result.push(arr);
                }
            }
        };
        EdgeStyle.loop = function (state, source, target, points, result) {
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            var pt;
            if (p0 != null && pe != null) {
                if (points != null && points.length > 0) {
                    for (var i = 0; i < points.length; i++) {
                        pt = points[i];
                        pt = state.view.transformControlPoint(state, pt);
                        result.push(new Five.Point(pt.x, pt.y));
                    }
                }
                return;
            }
            if (source != null) {
                var view = state.view;
                pt = (points != null && points.length > 0) ? points[0] : null;
                if (pt != null) {
                    pt = view.transformControlPoint(state, pt);
                    if (Five.Utils.contains(source, pt.x, pt.y)) {
                        pt = null;
                    }
                }
                var x = 0;
                var dx = 0;
                var y = 0;
                var dy = 0;
                var seg = state.style.segment * view.scale;
                var dir = state.style.direction || Five.Direction.West;
                if (dir.valueOf() === Five.Direction.North || dir === Five.Direction.South) {
                    x = view.getRoutingCenterX(source);
                    dx = seg;
                }
                else {
                    y = view.getRoutingCenterY(source);
                    dy = seg;
                }
                if (pt == null ||
                    pt.x < source.x ||
                    pt.x > source.x + source.width) {
                    if (pt != null) {
                        x = pt.x;
                        dy = Math.max(Math.abs(y - pt.y), dy);
                    }
                    else {
                        if (dir.valueOf() === Five.Direction.North) {
                            y = source.y - 2 * dx;
                        }
                        else if (dir === Five.Direction.South) {
                            y = source.y + source.height + 2 * dx;
                        }
                        else if (dir === Five.Direction.East) {
                            x = source.x - 2 * dy;
                        }
                        else {
                            x = source.x + source.width + 2 * dy;
                        }
                    }
                }
                else if (pt != null) {
                    x = view.getRoutingCenterX(source);
                    dx = Math.max(Math.abs(x - pt.x), dy);
                    y = pt.y;
                    dy = 0;
                }
                result.push(new Five.Point(x - dx, y - dy));
                result.push(new Five.Point(x + dx, y + dy));
            }
        };
        EdgeStyle.elbowConnector = function (state, source, target, points, result) {
            var pt = (points != null && points.length > 0) ? points[0] : null;
            var vertical = false;
            var horizontal = false;
            if (source != null && target != null) {
                var left;
                var right;
                var top;
                var bottom;
                if (pt != null) {
                    left = Math.min(source.x, target.x);
                    right = Math.max(source.x + source.width, target.x + target.width);
                    top = Math.min(source.y, target.y);
                    bottom = Math.max(source.y + source.height, target.y + target.height);
                    pt = state.view.transformControlPoint(state, pt);
                    vertical = pt.y < top || pt.y > bottom;
                    horizontal = pt.x < left || pt.x > right;
                }
                else {
                    left = Math.max(source.x, target.x);
                    right = Math.min(source.x + source.width, target.x + target.width);
                    vertical = left == right;
                    if (!vertical) {
                        top = Math.max(source.y, target.y);
                        bottom = Math.min(source.y + source.height, target.y + target.height);
                        horizontal = top == bottom;
                    }
                }
            }
            if (!horizontal && (vertical || state.style.elbow == Five.ElbowStyle.Vertical)) {
                EdgeStyle.topToBottom(state, source, target, points, result);
            }
            else {
                EdgeStyle.sideToSide(state, source, target, points, result);
            }
        };
        EdgeStyle.sideToSide = function (state, source, target, points, result) {
            var view = state.view;
            var pt = (points != null && points.length > 0) ? points[0] : null;
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            if (pt != null) {
                pt = view.transformControlPoint(state, pt);
            }
            if (p0 != null) {
                source = new Five.CellState(null, null, null);
                source.x = p0.x;
                source.y = p0.y;
            }
            if (pe != null) {
                target = new Five.CellState(null, null, null);
                target.x = pe.x;
                target.y = pe.y;
            }
            if (source != null && target != null) {
                var left = Math.max(source.x, target.x);
                var right = Math.min(source.x + source.width, target.x + target.width);
                var x = (pt != null) ? pt.x : right + (left - right) / 2;
                var y1 = view.getRoutingCenterY(source);
                var y2 = view.getRoutingCenterY(target);
                if (pt != null) {
                    if (pt.y >= source.y && pt.y <= source.y + source.height) {
                        y1 = pt.y;
                    }
                    if (pt.y >= target.y && pt.y <= target.y + target.height) {
                        y2 = pt.y;
                    }
                }
                if (!Five.Utils.contains(target, x, y1) &&
                    !Five.Utils.contains(source, x, y1)) {
                    result.push(new Five.Point(x, y1));
                }
                if (!Five.Utils.contains(target, x, y2) &&
                    !Five.Utils.contains(source, x, y2)) {
                    result.push(new Five.Point(x, y2));
                }
                if (result.length == 1) {
                    if (pt != null) {
                        if (!Five.Utils.contains(target, x, pt.y) &&
                            !Five.Utils.contains(source, x, pt.y)) {
                            result.push(new Five.Point(x, pt.y));
                        }
                    }
                    else {
                        var t = Math.max(source.y, target.y);
                        var b = Math.min(source.y + source.height, target.y + target.height);
                        result.push(new Five.Point(x, t + (b - t) / 2));
                    }
                }
            }
        };
        EdgeStyle.topToBottom = function (state, source, target, points, result) {
            var view = state.view;
            var pt = (points != null && points.length > 0) ? points[0] : null;
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            if (pt != null) {
                pt = view.transformControlPoint(state, pt);
            }
            if (p0 != null) {
                source = new Five.CellState(null, null, null);
                source.x = p0.x;
                source.y = p0.y;
            }
            if (pe != null) {
                target = new Five.CellState(null, null, null);
                target.x = pe.x;
                target.y = pe.y;
            }
            if (source != null && target != null) {
                var t = Math.max(source.y, target.y);
                var b = Math.min(source.y + source.height, target.y + target.height);
                var x = view.getRoutingCenterX(source);
                if (pt != null &&
                    pt.x >= source.x &&
                    pt.x <= source.x + source.width) {
                    x = pt.x;
                }
                var y = (pt != null) ? pt.y : b + (t - b) / 2;
                if (!Five.Utils.contains(target, x, y) &&
                    !Five.Utils.contains(source, x, y)) {
                    result.push(new Five.Point(x, y));
                }
                if (pt != null &&
                    pt.x >= target.x &&
                    pt.x <= target.x + target.width) {
                    x = pt.x;
                }
                else {
                    x = view.getRoutingCenterX(target);
                }
                if (!Five.Utils.contains(target, x, y) &&
                    !Five.Utils.contains(source, x, y)) {
                    result.push(new Five.Point(x, y));
                }
                if (result.length == 1) {
                    if (pt != null && result.length == 1) {
                        if (!Five.Utils.contains(target, pt.x, y) &&
                            !Five.Utils.contains(source, pt.x, y)) {
                            result.push(new Five.Point(pt.x, y));
                        }
                    }
                    else {
                        var l = Math.max(source.x, target.x);
                        var r = Math.min(source.x + source.width, target.x + target.width);
                        result.push(new Five.Point(l + (r - l) / 2, y));
                    }
                }
            }
        };
        EdgeStyle.topToSide = function (state, source, target, points, result) {
            var view = state.view;
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            if (p0 != null) {
                source = new Five.CellState(null, null, null);
                source.x = p0.x;
                source.y = p0.y;
            }
            if (pe != null) {
                target = new Five.CellState(null, null, null);
                target.x = pe.x;
                target.y = pe.y;
            }
            if (source != null && target != null) {
                var tolerance = 10;
                var sourceY = view.getRoutingCenterY(source);
                var targetY = view.getRoutingCenterY(target);
                var diagonalConnector = function () {
                    return new Five.Point(view.getRoutingCenterX(source), view.getRoutingCenterY(target));
                };
                var horizontalConnector = function () {
                    var targetHorizontalOffset = source.x < target.x ? 0.1 : 0.9;
                    var sourceHorizontalOffset = 1 - targetHorizontalOffset;
                    var p1 = new Five.Point(source.x + sourceHorizontalOffset * source.width, source.y + 0.5 * source.height);
                    var p2 = new Five.Point(target.x + targetHorizontalOffset * target.width, target.y + 0.5 * target.height);
                    return Five.Utils.middlePoint(p1, p2);
                };
                var p = Math.abs(sourceY - targetY) + tolerance < Math.max(target.height, source.height * 0.75) ?
                    horizontalConnector() :
                    diagonalConnector();
                result.push(p);
            }
        };
        EdgeStyle.segmentConnector = function (state, source, target, hints, result) {
            var pts = state.absolutePoints;
            var horizontal = true;
            var hint = null;
            var pt = pts[0];
            if (pt == null && source != null) {
                pt = new Five.Point(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));
            }
            else if (pt != null) {
                pt = Five.Utils.clone(pt);
            }
            var lastInx = pts.length - 1;
            if (hints != null && hints.length > 0) {
                hint = state.view.transformControlPoint(state, hints[0]);
                var currentTerm = source;
                var currentPt = pts[0];
                var hozChan = false;
                var vertChan = false;
                var currentHint = hint;
                var hintsLen = hints.length;
                var i;
                for (i = 0; i < 2; i++) {
                    var fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;
                    var fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;
                    var inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&
                        currentHint.y <= currentTerm.y + currentTerm.height);
                    var inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&
                        currentHint.x <= currentTerm.x + currentTerm.width);
                    hozChan = fixedHozAlign || (currentPt == null && inHozChan);
                    vertChan = fixedVertAlign || (currentPt == null && inVertChan);
                    if (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) {
                        horizontal = !inHozChan;
                        break;
                    }
                    if (vertChan || hozChan) {
                        horizontal = hozChan;
                        if (i == 1) {
                            horizontal = hints.length % 2 == 0 ? hozChan : vertChan;
                        }
                        break;
                    }
                    currentTerm = target;
                    currentPt = pts[lastInx];
                    currentHint = state.view.transformControlPoint(state, hints[hintsLen - 1]);
                }
                if (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||
                    (pts[0] == null && source != null &&
                        (hint.y < source.y || hint.y > source.y + source.height)))) {
                    result.push(new Five.Point(pt.x, hint.y));
                }
                else if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||
                    (pts[0] == null && source != null &&
                        (hint.x < source.x || hint.x > source.x + source.width)))) {
                    result.push(new Five.Point(hint.x, pt.y));
                }
                if (horizontal) {
                    pt.y = hint.y;
                }
                else {
                    pt.x = hint.x;
                }
                for (i = 0; i < hints.length; i++) {
                    horizontal = !horizontal;
                    hint = state.view.transformControlPoint(state, hints[i]);
                    if (horizontal) {
                        pt.y = hint.y;
                    }
                    else {
                        pt.x = hint.x;
                    }
                    result.push(pt.clone());
                }
            }
            else {
                hint = pt;
                horizontal = true;
            }
            pt = pts[lastInx];
            if (pt == null && target != null) {
                pt = new Five.Point(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));
            }
            if (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||
                (pts[lastInx] == null && target != null &&
                    (hint.y < target.y || hint.y > target.y + target.height)))) {
                result.push(new Five.Point(pt.x, hint.y));
            }
            else if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||
                (pts[lastInx] == null && target != null &&
                    (hint.x < target.x || hint.x > target.x + target.width)))) {
                result.push(new Five.Point(hint.x, pt.y));
            }
            if (pts[0] == null && source != null) {
                while (result.length > 1 && Five.Utils.contains(source, result[1].x, result[1].y)) {
                    result = result.splice(1, 1);
                }
            }
            if (pts[lastInx] == null && target != null) {
                while (result.length > 1 && Five.Utils.contains(target, result[result.length - 1].x, result[result.length - 1].y)) {
                    result = result.splice(result.length - 1, 1);
                }
            }
        };
        EdgeStyle.orthConnector = function (state, source, target, points, result) {
            var sourceEdge = source == null ? false : Five.Cells.isEdge(source.cell);
            var targetEdge = target == null ? false : Five.Cells.isEdge(target.cell);
            if (EdgeStyle.orthPointsFallback && (points != null && points.length > 0) || (sourceEdge) || (targetEdge)) {
                EdgeStyle.segmentConnector(state, source, target, points, result);
                return;
            }
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            var sourceX = source != null ? source.x : p0.x;
            var sourceY = source != null ? source.y : p0.y;
            var sourceWidth = source != null ? source.width : 1;
            var sourceHeight = source != null ? source.height : 1;
            var targetX = target != null ? target.x : pe.x;
            var targetY = target != null ? target.y : pe.y;
            var targetWidth = target != null ? target.width : 1;
            var targetHeight = target != null ? target.height : 1;
            var scaledOrthBuffer = state.view.scale * EdgeStyle.orthBuffer;
            var portConstraint = [Five.Constants.directionMaskAll, Five.Constants.directionMaskAll];
            var rotation = 0;
            var newRect;
            if (source != null) {
                portConstraint[0] = Five.Utils.getPortConstraints(source, state, true, Five.Constants.directionMaskAll);
                rotation = source.style.rotation;
                if (rotation != 0) {
                    newRect = Five.Utils.getBoundingBox(new Five.Rectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);
                    sourceX = newRect.x;
                    sourceY = newRect.y;
                    sourceWidth = newRect.width;
                    sourceHeight = newRect.height;
                }
            }
            if (target != null) {
                portConstraint[1] = Five.Utils.getPortConstraints(target, state, false, Five.Constants.directionMaskAll);
                rotation = target.style.rotation;
                if (rotation != 0) {
                    newRect = Five.Utils.getBoundingBox(new Five.Rectangle(targetX, targetY, targetWidth, targetHeight), rotation);
                    targetX = newRect.x;
                    targetY = newRect.y;
                    targetWidth = newRect.width;
                    targetHeight = newRect.height;
                }
            }
            var dir = [0, 0];
            var geo = [
                [sourceX, sourceY, sourceWidth, sourceHeight],
                [targetX, targetY, targetWidth, targetHeight]
            ];
            var i;
            for (i = 0; i < 2; i++) {
                EdgeStyle.limits[i][1] = geo[i][0] - scaledOrthBuffer;
                EdgeStyle.limits[i][2] = geo[i][1] - scaledOrthBuffer;
                EdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + scaledOrthBuffer;
                EdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + scaledOrthBuffer;
            }
            var sourceCenX = geo[0][0] + geo[0][2] / 2.0;
            var sourceCenY = geo[0][1] + geo[0][3] / 2.0;
            var targetCenX = geo[1][0] + geo[1][2] / 2.0;
            var targetCenY = geo[1][1] + geo[1][3] / 2.0;
            var dx = sourceCenX - targetCenX;
            var dy = sourceCenY - targetCenY;
            var quad = 0;
            if (dx < 0) {
                if (dy < 0) {
                    quad = 2;
                }
                else {
                    quad = 1;
                }
            }
            else {
                if (dy <= 0) {
                    quad = 3;
                    if (dx == 0) {
                        quad = 2;
                    }
                }
            }
            var currentTerm = null;
            if (source != null) {
                currentTerm = p0;
            }
            var constraint = [[0.5, 0.5], [0.5, 0.5]];
            for (i = 0; i < 2; i++) {
                if (currentTerm != null) {
                    constraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];
                    if (constraint[i][0] < 0.01) {
                        dir[i] = Five.Constants.directionMaskWest;
                    }
                    else if (constraint[i][0] > 0.99) {
                        dir[i] = Five.Constants.directionMaskEast;
                    }
                    constraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];
                    if (constraint[i][1] < 0.01) {
                        dir[i] = Five.Constants.directionMaskNorth;
                    }
                    else if (constraint[i][1] > 0.99) {
                        dir[i] = Five.Constants.directionMaskSouth;
                    }
                }
                currentTerm = null;
                if (target != null) {
                    currentTerm = pe;
                }
            }
            var sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);
            var sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);
            var sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);
            var sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);
            EdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - 2 * scaledOrthBuffer, 0);
            EdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - 2 * scaledOrthBuffer, 0);
            EdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - 2 * scaledOrthBuffer, 0);
            EdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - 2 * scaledOrthBuffer, 0);
            var dirPref = [];
            var horPref = [];
            var vertPref = [];
            horPref[0] = (sourceLeftDist >= sourceRightDist) ? Five.Constants.directionMaskWest : Five.Constants.directionMaskEast;
            vertPref[0] = (sourceTopDist >= sourceBottomDist) ? Five.Constants.directionMaskNorth : Five.Constants.directionMaskSouth;
            horPref[1] = Five.Utils.reversePortConstraints(horPref[0]);
            vertPref[1] = Five.Utils.reversePortConstraints(vertPref[0]);
            var preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist
                : sourceRightDist;
            var preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist
                : sourceBottomDist;
            var prefOrdering = [[0, 0], [0, 0]];
            var preferredOrderSet = false;
            for (i = 0; i < 2; i++) {
                if (dir[i] != 0x0) {
                    continue;
                }
                if ((horPref[i] & portConstraint[i]) == 0) {
                    horPref[i] = Five.Utils.reversePortConstraints(horPref[i]);
                }
                if ((vertPref[i] & portConstraint[i]) == 0) {
                    vertPref[i] = Five.Utils
                        .reversePortConstraints(vertPref[i]);
                }
                prefOrdering[i][0] = vertPref[i];
                prefOrdering[i][1] = horPref[i];
            }
            if (preferredVertDist > scaledOrthBuffer * 2
                && preferredHorizDist > scaledOrthBuffer * 2) {
                if (((horPref[0] & portConstraint[0]) > 0)
                    && ((vertPref[1] & portConstraint[1]) > 0)) {
                    prefOrdering[0][0] = horPref[0];
                    prefOrdering[0][1] = vertPref[0];
                    prefOrdering[1][0] = vertPref[1];
                    prefOrdering[1][1] = horPref[1];
                    preferredOrderSet = true;
                }
                else if (((vertPref[0] & portConstraint[0]) > 0)
                    && ((horPref[1] & portConstraint[1]) > 0)) {
                    prefOrdering[0][0] = vertPref[0];
                    prefOrdering[0][1] = horPref[0];
                    prefOrdering[1][0] = horPref[1];
                    prefOrdering[1][1] = vertPref[1];
                    preferredOrderSet = true;
                }
            }
            if (preferredVertDist > scaledOrthBuffer * 2 && !preferredOrderSet) {
                prefOrdering[0][0] = vertPref[0];
                prefOrdering[0][1] = horPref[0];
                prefOrdering[1][0] = vertPref[1];
                prefOrdering[1][1] = horPref[1];
                preferredOrderSet = true;
            }
            if (preferredHorizDist > scaledOrthBuffer * 2 && !preferredOrderSet) {
                prefOrdering[0][0] = horPref[0];
                prefOrdering[0][1] = vertPref[0];
                prefOrdering[1][0] = horPref[1];
                prefOrdering[1][1] = vertPref[1];
                preferredOrderSet = true;
            }
            for (i = 0; i < 2; i++) {
                if (dir[i] != 0x0) {
                    continue;
                }
                if ((prefOrdering[i][0] & portConstraint[i]) == 0) {
                    prefOrdering[i][0] = prefOrdering[i][1];
                }
                dirPref[i] = prefOrdering[i][0] & portConstraint[i];
                dirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;
                dirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;
                dirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;
                if ((dirPref[i] & 0xF) == 0) {
                    dirPref[i] = dirPref[i] << 8;
                }
                if ((dirPref[i] & 0xF00) == 0) {
                    dirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;
                }
                if ((dirPref[i] & 0xF0000) == 0) {
                    dirPref[i] = (dirPref[i] & 0xFFFF)
                        | ((dirPref[i] & 0xF000000) >> 8);
                }
                dir[i] = dirPref[i] & 0xF;
                if (portConstraint[i] == Five.Constants.directionMaskWest
                    || portConstraint[i] == Five.Constants.directionMaskNorth
                    || portConstraint[i] == Five.Constants.directionMaskEast
                    || portConstraint[i] == Five.Constants.directionMaskSouth) {
                    dir[i] = portConstraint[i];
                }
            }
            var sourceIndex = dir[0] == Five.Constants.directionMaskEast ? 3 : dir[0];
            var targetIndex = dir[1] == Five.Constants.directionMaskEast ? 3 : dir[1];
            sourceIndex -= quad;
            targetIndex -= quad;
            if (sourceIndex < 1) {
                sourceIndex += 4;
            }
            if (targetIndex < 1) {
                targetIndex += 4;
            }
            var routePattern = EdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];
            EdgeStyle.wayPoints1[0][0] = geo[0][0];
            EdgeStyle.wayPoints1[0][1] = geo[0][1];
            switch (dir[0]) {
                case Five.Constants.directionMaskWest:
                    EdgeStyle.wayPoints1[0][0] -= scaledOrthBuffer;
                    EdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];
                    break;
                case Five.Constants.directionMaskSouth:
                    EdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];
                    EdgeStyle.wayPoints1[0][1] += geo[0][3] + scaledOrthBuffer;
                    break;
                case Five.Constants.directionMaskEast:
                    EdgeStyle.wayPoints1[0][0] += geo[0][2] + scaledOrthBuffer;
                    EdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];
                    break;
                case Five.Constants.directionMaskNorth:
                    EdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];
                    EdgeStyle.wayPoints1[0][1] -= scaledOrthBuffer;
                    break;
            }
            var currentIndex = 0;
            var lastOrientation = (dir[0] & (Five.Constants.directionMaskEast | Five.Constants.directionMaskWest)) > 0 ? 0
                : 1;
            var initialOrientation = lastOrientation;
            var currentOrientation = 0;
            for (i = 0; i < routePattern.length; i++) {
                var nextDirection = routePattern[i] & 0xF;
                var directionIndex = nextDirection == Five.Constants.directionMaskEast ? 3
                    : nextDirection;
                directionIndex += quad;
                if (directionIndex > 4) {
                    directionIndex -= 4;
                }
                var direction = EdgeStyle.dirVectors[directionIndex - 1];
                currentOrientation = (directionIndex % 2 > 0) ? 0 : 1;
                if (currentOrientation != lastOrientation) {
                    currentIndex++;
                    EdgeStyle.wayPoints1[currentIndex][0] = EdgeStyle.wayPoints1[currentIndex - 1][0];
                    EdgeStyle.wayPoints1[currentIndex][1] = EdgeStyle.wayPoints1[currentIndex - 1][1];
                }
                var tar = (routePattern[i] & EdgeStyle.targetMask) > 0;
                var sou = (routePattern[i] & EdgeStyle.sourceMask) > 0;
                var side = (routePattern[i] & EdgeStyle.sideMask) >> 5;
                side = side << quad;
                if (side > 0xF) {
                    side = side >> 4;
                }
                var center = (routePattern[i] & EdgeStyle.centerMask) > 0;
                if ((sou || tar) && side < 9) {
                    var limit = 0;
                    var souTar = sou ? 0 : 1;
                    if (center && currentOrientation == 0) {
                        limit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];
                    }
                    else if (center) {
                        limit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];
                    }
                    else {
                        limit = EdgeStyle.limits[souTar][side];
                    }
                    if (currentOrientation == 0) {
                        var lastX = EdgeStyle.wayPoints1[currentIndex][0];
                        var deltaX = (limit - lastX) * direction[0];
                        if (deltaX > 0) {
                            EdgeStyle.wayPoints1[currentIndex][0] += direction[0]
                                * deltaX;
                        }
                    }
                    else {
                        var lastY = EdgeStyle.wayPoints1[currentIndex][1];
                        var deltaY = (limit - lastY) * direction[1];
                        if (deltaY > 0) {
                            EdgeStyle.wayPoints1[currentIndex][1] += direction[1]
                                * deltaY;
                        }
                    }
                }
                else if (center) {
                    EdgeStyle.wayPoints1[currentIndex][0] += direction[0]
                        * Math.abs(EdgeStyle.vertexSeperations[directionIndex] / 2);
                    EdgeStyle.wayPoints1[currentIndex][1] += direction[1]
                        * Math.abs(EdgeStyle.vertexSeperations[directionIndex] / 2);
                }
                if (currentIndex > 0
                    && EdgeStyle.wayPoints1[currentIndex][currentOrientation] == EdgeStyle.wayPoints1[currentIndex - 1][currentOrientation]) {
                    currentIndex--;
                }
                else {
                    lastOrientation = currentOrientation;
                }
            }
            for (i = 0; i <= currentIndex; i++) {
                if (i == currentIndex) {
                    var targetOrientation = (dir[1] & (Five.Constants.directionMaskEast | Five.Constants.directionMaskWest)) > 0 ? 0
                        : 1;
                    var sameOrient = targetOrientation == initialOrientation ? 0 : 1;
                    if (sameOrient != (currentIndex + 1) % 2) {
                        break;
                    }
                }
                result.push(new Five.Point(EdgeStyle.wayPoints1[i][0], EdgeStyle.wayPoints1[i][1]));
            }
        };
        EdgeStyle.getRoutePattern = function (dir, quad, dx, dy) {
            var sourceIndex = dir[0] == Five.Constants.directionMaskEast ? 3 : dir[0];
            var targetIndex = dir[1] == Five.Constants.directionMaskEast ? 3 : dir[1];
            sourceIndex -= quad;
            targetIndex -= quad;
            if (sourceIndex < 1) {
                sourceIndex += 4;
            }
            if (targetIndex < 1) {
                targetIndex += 4;
            }
            var result = EdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];
            if (dx == 0 || dy == 0) {
                if (EdgeStyle.inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null) {
                    result = EdgeStyle.inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];
                }
            }
            return result;
        };
        EdgeStyle.orthBuffer = 10;
        EdgeStyle.orthPointsFallback = true;
        EdgeStyle.dirVectors = [[-1, 0], [0, -1], [1, 0], [0, 1], [-1, 0], [0, -1], [1, 0]];
        EdgeStyle.wayPoints1 = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
        EdgeStyle.routePatterns = [
            [
                [513, 2308, 2081, 2562], [513, 1090, 514, 2184, 2114, 2561],
                [513, 1090, 514, 2564, 2184, 2562],
                [513, 2308, 2561, 1090, 514, 2568, 2308]
            ],
            [
                [514, 1057, 513, 2308, 2081, 2562], [514, 2184, 2114, 2561],
                [514, 2184, 2562, 1057, 513, 2564, 2184],
                [514, 1057, 513, 2568, 2308, 2561]
            ],
            [
                [1090, 514, 1057, 513, 2308, 2081, 2562], [2114, 2561],
                [1090, 2562, 1057, 513, 2564, 2184],
                [1090, 514, 1057, 513, 2308, 2561, 2568]
            ],
            [
                [2081, 2562], [1057, 513, 1090, 514, 2184, 2114, 2561],
                [1057, 513, 1090, 514, 2184, 2562, 2564],
                [1057, 2561, 1090, 514, 2568, 2308]
            ]
        ];
        EdgeStyle.inlineRoutePatterns = [
            [null, [2114, 2568], null, null],
            [null, [514, 2081, 2114, 2568], null, null],
            [null, [2114, 2561], null, null],
            [
                [2081, 2562], [1057, 2114, 2568],
                [2184, 2562],
                null
            ]
        ];
        EdgeStyle.vertexSeperations = [];
        EdgeStyle.limits = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
        EdgeStyle.leftMask = 32;
        EdgeStyle.topMask = 64;
        EdgeStyle.rightMask = 128;
        EdgeStyle.bottomMask = 256;
        EdgeStyle.left = 1;
        EdgeStyle.top = 2;
        EdgeStyle.right = 4;
        EdgeStyle.bottom = 8;
        EdgeStyle.sideMask = 480;
        EdgeStyle.centerMask = 512;
        EdgeStyle.sourceMask = 1024;
        EdgeStyle.targetMask = 2048;
        EdgeStyle.vertexMask = 3072;
        return EdgeStyle;
    }());
    Five.EdgeStyle = EdgeStyle;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Effects = (function () {
        function Effects() {
        }
        Effects.animateChanges = function (graph, changes, done) {
            var maxStep = 10;
            var step = 0;
            var animate = function () {
                var isRequired = false;
                for (var i = 0; i < changes.length; i++) {
                    var change = changes[i];
                    if (change instanceof Five.GeometryChange ||
                        change instanceof Five.TerminalChange ||
                        change instanceof Five.ValueChange ||
                        change instanceof Five.ChildChange ||
                        change instanceof Five.StyleChange) {
                        var state = graph.getView().getState(change.cell, false);
                        if (state != null) {
                            isRequired = true;
                            if (change.constructor != Five.GeometryChange || Five.Cells.isEdge(change.cell)) {
                                Five.Utils.setOpacity(state.shape.node, 100 * step / maxStep);
                            }
                            else {
                                var geoChange = change;
                                var scale = graph.getView().scale;
                                var dx = (geoChange.geometry.x - geoChange.previous.x) * scale;
                                var dy = (geoChange.geometry.y - geoChange.previous.y) * scale;
                                var sx = (geoChange.geometry.width - geoChange.previous.width) * scale;
                                var sy = (geoChange.geometry.height - geoChange.previous.height) * scale;
                                if (step == 0) {
                                    state.x -= dx;
                                    state.y -= dy;
                                    state.width -= sx;
                                    state.height -= sy;
                                }
                                else {
                                    state.x += dx / maxStep;
                                    state.y += dy / maxStep;
                                    state.width += sx / maxStep;
                                    state.height += sy / maxStep;
                                }
                                graph.cellRenderer.redraw(state);
                                Effects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);
                            }
                        }
                    }
                }
                if (step < maxStep && isRequired) {
                    step++;
                    window.setTimeout(animate, delay);
                }
                else if (done != null) {
                    done();
                }
            };
            var delay = 30;
            animate();
        };
        Effects.cascadeOpacity = function (graph, cell, opacity) {
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(cell, i);
                var childState = graph.getView().getState(child);
                if (childState != null) {
                    Five.Utils.setOpacity(childState.shape.node, opacity);
                    Effects.cascadeOpacity(graph, child, opacity);
                }
            }
            var edges = graph.model.getEdges(cell);
            if (edges != null) {
                edges.forEach(function (edge) {
                    var edgeState = graph.getView().getState(edge);
                    if (edgeState != null) {
                        Five.Utils.setOpacity(edgeState.shape.node, opacity);
                    }
                });
            }
        };
        Effects.fadeOut = function (node, from, remove, step, delay, isEnabled) {
            if (from === void 0) { from = 100; }
            if (remove === void 0) { remove = false; }
            if (step === void 0) { step = 40; }
            if (delay === void 0) { delay = 30; }
            if (isEnabled === void 0) { isEnabled = true; }
            var opacity = from;
            Five.Utils.setOpacity(node, opacity);
            if (isEnabled) {
                var f = function () {
                    opacity = Math.max(opacity - step, 0);
                    Five.Utils.setOpacity(node, opacity);
                    if (opacity > 0) {
                        window.setTimeout(f, delay);
                    }
                    else {
                        Five.Utils.nodeStyle(node).visibility = 'hidden';
                        if (remove && node.parentNode) {
                            node.parentNode.removeChild(node);
                        }
                    }
                };
                window.setTimeout(f, delay);
            }
            else {
                Five.Utils.nodeStyle(node).visibility = 'hidden';
                if (remove && node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            }
        };
        return Effects;
    }());
    Five.Effects = Effects;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var EventObject = (function () {
        function EventObject(name) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            this.properties = {};
            this.consumed = false;
            this.name = name;
            for (var i = 0; i < params.length; i++) {
                this.properties[params[i].key] = params[i].value;
            }
        }
        EventObject.prototype.getName = function () {
            return this.name;
        };
        EventObject.prototype.getProperties = function () {
            return this.properties;
        };
        EventObject.prototype.getProperty = function (key) {
            return this.properties[key];
        };
        EventObject.prototype.isConsumed = function () {
            return this.consumed;
        };
        EventObject.prototype.consume = function () {
            this.consumed = true;
        };
        return EventObject;
    }());
    Five.EventObject = EventObject;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var FastOrganicLayout = (function (_super) {
        __extends(FastOrganicLayout, _super);
        function FastOrganicLayout(graph) {
            var _this = _super.call(this, graph) || this;
            _this.useInputOrigin = true;
            _this.resetEdges = true;
            _this.disableEdgeStyle = true;
            _this.forceConstant = 50;
            _this.forceConstantSquared = 0;
            _this.minDistanceLimit = 2;
            _this.maxDistanceLimit = 500;
            _this.minDistanceLimitSquared = 4;
            _this.initialTemp = 200;
            _this.temperature = 0;
            _this.maxIterations = 0;
            _this.iteration = 0;
            _this.allowedToRun = true;
            return _this;
        }
        FastOrganicLayout.prototype.isVertexIgnored = function (vertex) {
            return _super.prototype.isVertexIgnored.call(this, vertex) || this.graph.getConnections(vertex).length === 0;
        };
        FastOrganicLayout.prototype.execute = function (parent) {
            var model = this.graph.getModel();
            this.vertexArray = [];
            var cells = this.graph.getChildVertices(parent);
            var i;
            for (i = 0; i < cells.length; i++) {
                if (!this.isVertexIgnored(cells[i])) {
                    this.vertexArray.push(cells[i]);
                }
            }
            var initialBounds = (this.useInputOrigin) ?
                this.graph.getBoundingBoxFromGeometry(this.vertexArray) :
                null;
            var n = this.vertexArray.length;
            this.indices = [];
            this.dispX = [];
            this.dispY = [];
            this.cellLocation = [];
            this.isMoveable = [];
            this.neighbours = [];
            this.radius = [];
            this.radiusSquared = [];
            if (this.forceConstant < 0.001) {
                this.forceConstant = 0.001;
            }
            this.forceConstantSquared = this.forceConstant * this.forceConstant;
            var vertex;
            var x;
            var y;
            var id;
            var bounds;
            for (i = 0; i < this.vertexArray.length; i++) {
                vertex = this.vertexArray[i];
                this.cellLocation[i] = [];
                id = Five.CellPath.create(vertex);
                this.indices[id] = i;
                bounds = this.getVertexBounds(vertex);
                var width = bounds.width;
                var height = bounds.height;
                x = bounds.x;
                y = bounds.y;
                this.cellLocation[i][0] = x + width / 2.0;
                this.cellLocation[i][1] = y + height / 2.0;
                this.radius[i] = Math.min(width, height);
                this.radiusSquared[i] = this.radius[i] * this.radius[i];
            }
            model.beginUpdate();
            try {
                for (i = 0; i < n; i++) {
                    this.dispX[i] = 0;
                    this.dispY[i] = 0;
                    this.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);
                    var edges = this.graph.getConnections(this.vertexArray[i], parent);
                    cells = this.graph.getOpposites(edges, this.vertexArray[i]);
                    this.neighbours[i] = [];
                    for (var j = 0; j < cells.length; j++) {
                        if (this.resetEdges) {
                            this.graph.resetEdge(edges[j]);
                        }
                        if (this.disableEdgeStyle) {
                            this.setEdgeStyleEnabled(edges[j], false);
                        }
                        id = Five.CellPath.create(cells[j]);
                        var index = this.indices[id];
                        if (index != null) {
                            this.neighbours[i][j] = index;
                        }
                        else {
                            this.neighbours[i][j] = i;
                        }
                    }
                }
                this.temperature = this.initialTemp;
                if (this.maxIterations === 0) {
                    this.maxIterations = 20 * Math.sqrt(n);
                }
                for (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++) {
                    if (!this.allowedToRun) {
                        return;
                    }
                    this.calcRepulsion();
                    this.calcAttraction();
                    this.calcPositions();
                    this.reduceTemperature();
                }
                var minx = null;
                var miny = null;
                for (i = 0; i < this.vertexArray.length; i++) {
                    vertex = this.vertexArray[i];
                    if (this.isVertexMovable(vertex)) {
                        bounds = this.getVertexBounds(vertex);
                        if (bounds != null) {
                            this.cellLocation[i][0] -= bounds.width / 2.0;
                            this.cellLocation[i][1] -= bounds.height / 2.0;
                            x = this.graph.snap(this.cellLocation[i][0]);
                            y = this.graph.snap(this.cellLocation[i][1]);
                            this.setVertexLocation(vertex, x, y);
                            if (minx == null) {
                                minx = x;
                            }
                            else {
                                minx = Math.min(minx, x);
                            }
                            if (miny == null) {
                                miny = y;
                            }
                            else {
                                miny = Math.min(miny, y);
                            }
                        }
                    }
                }
                var dx = -(minx || 0) + 1;
                var dy = -(miny || 0) + 1;
                if (initialBounds != null) {
                    dx += initialBounds.x;
                    dy += initialBounds.y;
                }
                this.graph.moveCells(this.vertexArray, dx, dy);
            }
            finally {
                model.endUpdate();
            }
        };
        FastOrganicLayout.prototype.calcPositions = function () {
            for (var index = 0; index < this.vertexArray.length; index++) {
                if (this.isMoveable[index]) {
                    var deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +
                        this.dispY[index] * this.dispY[index]);
                    if (deltaLength < 0.001) {
                        deltaLength = 0.001;
                    }
                    var newXDisp = this.dispX[index] / deltaLength
                        * Math.min(deltaLength, this.temperature);
                    var newYDisp = this.dispY[index] / deltaLength
                        * Math.min(deltaLength, this.temperature);
                    this.dispX[index] = 0;
                    this.dispY[index] = 0;
                    this.cellLocation[index][0] += newXDisp;
                    this.cellLocation[index][1] += newYDisp;
                }
            }
        };
        FastOrganicLayout.prototype.calcAttraction = function () {
            for (var i = 0; i < this.vertexArray.length; i++) {
                for (var k = 0; k < this.neighbours[i].length; k++) {
                    var j = this.neighbours[i][k];
                    if (i !== j &&
                        this.isMoveable[i] &&
                        this.isMoveable[j]) {
                        var xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];
                        var yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];
                        var deltaLengthSquared = xDelta * xDelta + yDelta
                            * yDelta - this.radiusSquared[i] - this.radiusSquared[j];
                        if (deltaLengthSquared < this.minDistanceLimitSquared) {
                            deltaLengthSquared = this.minDistanceLimitSquared;
                        }
                        var deltaLength = Math.sqrt(deltaLengthSquared);
                        var force = (deltaLengthSquared) / this.forceConstant;
                        var displacementX = (xDelta / deltaLength) * force;
                        var displacementY = (yDelta / deltaLength) * force;
                        this.dispX[i] -= displacementX;
                        this.dispY[i] -= displacementY;
                        this.dispX[j] += displacementX;
                        this.dispY[j] += displacementY;
                    }
                }
            }
        };
        FastOrganicLayout.prototype.calcRepulsion = function () {
            var vertexCount = this.vertexArray.length;
            for (var i = 0; i < vertexCount; i++) {
                for (var j = i; j < vertexCount; j++) {
                    if (!this.allowedToRun) {
                        return;
                    }
                    if (j !== i &&
                        this.isMoveable[i] &&
                        this.isMoveable[j]) {
                        var xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];
                        var yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];
                        if (xDelta === 0) {
                            xDelta = 0.01 + Math.random();
                        }
                        if (yDelta === 0) {
                            yDelta = 0.01 + Math.random();
                        }
                        var deltaLength = Math.sqrt((xDelta * xDelta)
                            + (yDelta * yDelta));
                        var deltaLengthWithRadius = deltaLength - this.radius[i]
                            - this.radius[j];
                        if (deltaLengthWithRadius > this.maxDistanceLimit) {
                            continue;
                        }
                        if (deltaLengthWithRadius < this.minDistanceLimit) {
                            deltaLengthWithRadius = this.minDistanceLimit;
                        }
                        var force = this.forceConstantSquared / deltaLengthWithRadius;
                        var displacementX = (xDelta / deltaLength) * force;
                        var displacementY = (yDelta / deltaLength) * force;
                        this.dispX[i] += displacementX;
                        this.dispY[i] += displacementY;
                        this.dispX[j] -= displacementX;
                        this.dispY[j] -= displacementY;
                    }
                }
            }
        };
        FastOrganicLayout.prototype.reduceTemperature = function () {
            this.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);
        };
        return FastOrganicLayout;
    }(Five.BasicLayout));
    Five.FastOrganicLayout = FastOrganicLayout;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Form = (function () {
        function Form(className) {
            this.table = document.createElement('table');
            this.table.className = className;
            this.body = document.createElement('tbody');
            this.table.appendChild(this.body);
        }
        Form.prototype.getTable = function () {
            return this.table;
        };
        Form.prototype.addButtons = function (okFunct, cancelFunct) {
            var tr = document.createElement('tr');
            var td = document.createElement('td');
            tr.appendChild(td);
            td = document.createElement('td');
            var button = document.createElement('button');
            Five.Utils.write(button, Five.Resources.get('OK'));
            td.appendChild(button);
            Five.Events.addListener(button, 'click', function () { return okFunct(); });
            button = document.createElement('button');
            Five.Utils.write(button, Five.Resources.get('Cancel'));
            td.appendChild(button);
            Five.Events.addListener(button, 'click', function () { return cancelFunct(); });
            tr.appendChild(td);
            this.body.appendChild(tr);
        };
        Form.prototype.addText = function (name, value) {
            var input = document.createElement('input');
            input.type = 'text';
            input.value = value;
            this.addField(name, input);
            return input;
        };
        Form.prototype.addCheckbox = function (name, value) {
            var input = document.createElement('input');
            input.type = 'checkbox';
            this.addField(name, input);
            if (value) {
                input.checked = true;
            }
            return input;
        };
        Form.prototype.addTextarea = function (name, value, rows) {
            if (rows === void 0) { rows = 2; }
            var input = document.createElement('textarea');
            if (Five.Client.isNs) {
                rows--;
            }
            input.rows = rows;
            input.value = value;
            return this.addField(name, input);
        };
        Form.prototype.addCombo = function (name, isMultiSelect, size) {
            var select = document.createElement('select');
            if (size != null) {
                select.size = size;
            }
            if (isMultiSelect) {
                select.multiple = true;
            }
            return this.addField(name, select);
        };
        Form.prototype.addOption = function (combo, label, value, isSelected) {
            var option = document.createElement('option');
            Five.Utils.writeln(option, label);
            option.value = value;
            if (isSelected) {
                option.selected = isSelected;
            }
            combo.appendChild(option);
        };
        Form.prototype.addField = function (name, input) {
            var tr = document.createElement('tr');
            var td = document.createElement('td');
            Five.Utils.write(td, name);
            tr.appendChild(td);
            td = document.createElement('td');
            td.appendChild(input);
            tr.appendChild(td);
            this.body.appendChild(tr);
            return input;
        };
        return Form;
    }());
    Five.Form = Form;
})(Five || (Five = {}));
var Five;
(function (Five) {
    "use strict";
    var Geometry = (function (_super) {
        __extends(Geometry, _super);
        function Geometry(bounds, sizeRestrictions) {
            var _this = _super.call(this) || this;
            _this.sizeRestrictions = sizeRestrictions;
            _this.translateControlPoints = true;
            _this.alternateBounds = null;
            _this.sourcePoint = null;
            _this.targetPoint = null;
            _this.points = null;
            _this._offset = null;
            _this.relative = false;
            if (bounds) {
                _this.x = bounds.x;
                _this.y = bounds.y;
                _this.width = bounds.width;
                _this.height = bounds.height;
            }
            return _this;
        }
        Object.defineProperty(Geometry.prototype, "offset", {
            get: function () {
                return this._offset;
            },
            set: function (value) {
                this._offset = value;
            },
            enumerable: true,
            configurable: true
        });
        Geometry.prototype.swap = function () {
            if (this.alternateBounds != null) {
                var old = new Five.Rectangle(this.x, this.y, this.width, this.height);
                this.x = this.alternateBounds.x;
                this.y = this.alternateBounds.y;
                this.width = this.alternateBounds.width;
                this.height = this.alternateBounds.height;
                this.alternateBounds = old;
            }
        };
        Geometry.prototype.clone = function () {
            return Five.Utils.clone(this);
        };
        Geometry.prototype.getTerminalPoint = function (isSource) {
            return (isSource) ? this.sourcePoint : this.targetPoint;
        };
        Geometry.prototype.setTerminalPoint = function (point, isSource) {
            if (isSource) {
                this.sourcePoint = point;
            }
            else {
                this.targetPoint = point;
            }
            return point;
        };
        Geometry.prototype.rotate = function (angle, cx) {
            var rad = Five.Utils.toRadians(angle);
            var cos = Math.cos(rad);
            var sin = Math.sin(rad);
            var pt;
            if (!this.relative) {
                var ct = new Five.Point(this.getCenterX(), this.getCenterY());
                pt = Five.Utils.getRotatedPoint(ct, cos, sin, cx);
                this.x = Math.round(pt.x - this.width / 2);
                this.y = Math.round(pt.y - this.height / 2);
            }
            if (this.sourcePoint != null) {
                pt = Five.Utils.getRotatedPoint(this.sourcePoint, cos, sin, cx);
                this.sourcePoint.x = Math.round(pt.x);
                this.sourcePoint.y = Math.round(pt.y);
            }
            if (this.targetPoint != null) {
                pt = Five.Utils.getRotatedPoint(this.targetPoint, cos, sin, cx);
                this.targetPoint.x = Math.round(pt.x);
                this.targetPoint.y = Math.round(pt.y);
            }
            if (this.points != null) {
                for (var i = 0; i < this.points.length; i++) {
                    if (this.points[i] != null) {
                        pt = Five.Utils.getRotatedPoint(this.points[i], cos, sin, cx);
                        this.points[i].x = Math.round(pt.x);
                        this.points[i].y = Math.round(pt.y);
                    }
                }
            }
        };
        Geometry.prototype.translate = function (dx, dy) {
            if (!this.relative) {
                this.x += dx;
                this.y += dy;
            }
            if (this.sourcePoint != null) {
                this.sourcePoint.x += dx;
                this.sourcePoint.y += dy;
            }
            if (this.targetPoint != null) {
                this.targetPoint.x += dx;
                this.targetPoint.y += dy;
            }
            if (this.translateControlPoints && this.points != null) {
                for (var i = 0; i < this.points.length; i++) {
                    if (this.points[i] != null) {
                        this.points[i].x += dx;
                        this.points[i].y += dy;
                    }
                }
            }
        };
        Geometry.prototype.scale = function (sx, sy) {
            if (!this.relative) {
                this.x *= sx;
                this.y *= sy;
                this.width *= sx;
                this.height *= sy;
            }
            if (this.sourcePoint != null) {
                this.sourcePoint.x *= sx;
                this.sourcePoint.y *= sy;
            }
            if (this.targetPoint != null) {
                this.targetPoint.x *= sx;
                this.targetPoint.y *= sy;
            }
            if (this.points != null) {
                for (var i = 0; i < this.points.length; i++) {
                    if (this.points[i] != null) {
                        this.points[i].x *= sx;
                        this.points[i].y *= sy;
                    }
                }
            }
        };
        Geometry.prototype.equals = function (obj) {
            return _super.prototype.equals.call(this, obj) &&
                this.relative === obj.relative &&
                ((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&
                ((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&
                ((this.points == null && obj.points == null) || (this.points != null && Five.Utils.equalPoints(this.points, obj.points))) &&
                ((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&
                ((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));
        };
        Geometry.prototype.setRelative = function (value) {
            this.relative = value;
        };
        Geometry.prototype.applySizeRestrictions = function (rect) {
            var restrictions = this.sizeRestrictions;
            if (restrictions) {
                if (restrictions.minWidth)
                    rect.width = Math.max(rect.width, restrictions.minWidth());
                if (restrictions.maxWidth)
                    rect.width = Math.min(rect.width, restrictions.maxWidth());
                if (restrictions.minHeight)
                    rect.height = Math.max(rect.height, restrictions.minHeight());
                if (restrictions.maxHeight)
                    rect.height = Math.min(rect.height, restrictions.maxHeight());
            }
            return rect;
        };
        Geometry.prototype.getMaxWidth = function () {
            if (this.sizeRestrictions && this.sizeRestrictions.maxWidth)
                return this.sizeRestrictions.maxWidth();
            return NaN;
        };
        Geometry.prototype.getBounds = function () { return this; };
        return Geometry;
    }(Five.Rectangle));
    Five.Geometry = Geometry;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var GeometryChange = (function () {
        function GeometryChange(model, cell, geometry) {
            this.model = model;
            this.cell = cell;
            this.geometry = geometry;
            this.previous = geometry;
        }
        GeometryChange.prototype.execute = function () {
            this.geometry = this.previous;
            this.previous = this.model.geometryForCellChanged(this.cell, this.previous);
        };
        return GeometryChange;
    }());
    Five.GeometryChange = GeometryChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var GraphHandler = (function () {
        function GraphHandler(graph) {
            var _this = this;
            this.graph = null;
            this.enabled = true;
            this.highlightEnabled = true;
            this.cloneEnabled = true;
            this.moveEnabled = true;
            this.guidesEnabled = false;
            this.guide = null;
            this.currentDx = null;
            this.currentDy = null;
            this.updateCursor = true;
            this.selectEnabled = true;
            this.removeCellsFromParent = true;
            this.connectOnDrop = false;
            this.scrollOnMove = true;
            this.minimumSize = 6;
            this.previewColor = "black";
            this.htmlPreview = false;
            this.shape = null;
            this.scaleGrid = false;
            this.rotationEnabled = true;
            this.graph = graph;
            this.graph.addMouseListener(this);
            this.panHandler = function () {
                _this.updatePreviewShape();
                _this.updateHint();
            };
            this.graph.onPan.add(this.panHandler);
            this.escapeHandler = Five.Utils.bind(this, function () {
                _this.reset();
            });
            this.graph.onEscape.add(this.escapeHandler);
        }
        GraphHandler.prototype.isEnabled = function () {
            return this.enabled;
        };
        GraphHandler.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        GraphHandler.prototype.isCloneEnabled = function () {
            return this.cloneEnabled;
        };
        GraphHandler.prototype.setCloneEnabled = function (value) {
            this.cloneEnabled = value;
        };
        GraphHandler.prototype.isMoveEnabled = function () {
            return this.moveEnabled;
        };
        GraphHandler.prototype.setMoveEnabled = function (value) {
            this.moveEnabled = value;
        };
        GraphHandler.prototype.isSelectEnabled = function () {
            return this.selectEnabled;
        };
        GraphHandler.prototype.setSelectEnabled = function (value) {
            this.selectEnabled = value;
        };
        GraphHandler.prototype.isRemoveCellsFromParent = function () {
            return this.removeCellsFromParent;
        };
        GraphHandler.prototype.setRemoveCellsFromParent = function (value) {
            this.removeCellsFromParent = value;
        };
        GraphHandler.prototype.getInitialCellForEvent = function (me) {
            return me.getCell();
        };
        GraphHandler.prototype.isDelayedSelection = function (cell) {
            return this.graph.isCellSelected(cell);
        };
        GraphHandler.prototype.mouseDown = function (sender, me) {
            if (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&
                me.getState() != null && !Five.Events.isMultiTouchEvent(me.getEvent())) {
                var cell = this.getInitialCellForEvent(me);
                this.delayedSelection = this.isDelayedSelection(cell);
                this.cell = null;
                if (this.isSelectEnabled() && !this.delayedSelection) {
                    this.graph.selectCellForEvent(cell, me.getEvent());
                }
                if (this.isMoveEnabled()) {
                    var geo = Five.Cells.getGeometry(cell);
                    if (this.graph.isCellMovable(cell) && ((!Five.Cells.isEdge(cell) || this.graph.getSelectionCount() > 1 ||
                        (geo.points != null && geo.points.length > 0) || Five.Cells.getTerminal(cell, true) == null ||
                        Five.Cells.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges ||
                        (this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable()))) {
                        this.start(cell, me.getX(), me.getY());
                    }
                    this.cellWasClicked = true;
                    me.consume();
                }
            }
        };
        GraphHandler.prototype.getGuideStates = function () {
            var _this = this;
            var parent = this.graph.getDefaultParent();
            var model = this.graph.getModel();
            var filter = Five.Utils.bind(this, function (cell) {
                return _this.graph.view.getState(cell) != null &&
                    Five.Cells.isVertex(cell) && Five.Cells.getGeometry(cell) != null && !Five.Cells.getGeometry(cell).relative;
            });
            return this.graph.view.getCellStates(model.filterDescendants(filter, parent));
        };
        GraphHandler.prototype.getCells = function (initialCell) {
            if (!this.delayedSelection && this.graph.isCellMovable(initialCell)) {
                return [initialCell];
            }
            else {
                return this.graph.getMovableCells(this.graph.getSelectionCells());
            }
        };
        GraphHandler.prototype.getPreviewBounds = function (cells) {
            var bounds = this.getBoundingBox(cells);
            if (bounds != null) {
                bounds.grow(-1);
                if (bounds.width < this.minimumSize) {
                    var dx = this.minimumSize - bounds.width;
                    bounds.x -= dx / 2;
                    bounds.width = this.minimumSize;
                }
                if (bounds.height < this.minimumSize) {
                    var dy = this.minimumSize - bounds.height;
                    bounds.y -= dy / 2;
                    bounds.height = this.minimumSize;
                }
            }
            return bounds;
        };
        GraphHandler.prototype.getBoundingBox = function (cells) {
            var result = null;
            if (cells != null && cells.length > 0) {
                for (var i = 0; i < cells.length; i++) {
                    if (Five.Cells.isVertex(cells[i]) || Five.Cells.isEdge(cells[i])) {
                        var state = this.graph.view.getState(cells[i]);
                        if (state != null) {
                            var bbox = state;
                            if (Five.Cells.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null) {
                                bbox = state.shape.boundingBox;
                            }
                            if (result == null) {
                                result = new Five.Rectangle(bbox.x, bbox.y, bbox.width, bbox.height);
                            }
                            else {
                                result.add(bbox);
                            }
                        }
                    }
                }
            }
            return result;
        };
        GraphHandler.prototype.createPreviewShape = function (bounds) {
            var shape = new Five.RectangleShape(bounds, null, this.previewColor);
            shape.className = "Preview";
            shape.isDashed = true;
            if (this.htmlPreview) {
                shape.dialect = Five.Dialect.StrictHtml;
                shape.init(this.graph.container);
            }
            else {
                shape.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.Vml : Five.Dialect.Svg;
                shape.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
                shape.pointerEvents = false;
                if (Five.Client.isIos) {
                    shape.getSvgScreenOffset = function () { return 0; };
                }
            }
            return shape;
        };
        GraphHandler.prototype.start = function (cell, x, y) {
            this.cell = cell;
            this.first = this.graph.container.convertPoint(x, y);
            this.cells = this.getCells(this.cell);
            this.bounds = this.graph.getView().getBounds(this.cells);
            this.pBounds = this.getPreviewBounds(this.cells);
            if (this.guidesEnabled) {
                this.guide = new Five.Guide(this.graph, this.getGuideStates());
            }
        };
        GraphHandler.prototype.useGuidesForEvent = function (me) {
            return (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;
        };
        GraphHandler.prototype.snap = function (vector) {
            var scale = (this.scaleGrid) ? this.graph.view.scale : 1;
            vector.x = this.graph.snap(vector.x / scale) * scale;
            vector.y = this.graph.snap(vector.y / scale) * scale;
            return vector;
        };
        GraphHandler.prototype.getDelta = function (me) {
            var point = this.graph.container.convertPoint(me.getX(), me.getY());
            var s = this.graph.view.scale;
            return new Five.Point(this.roundLength((point.x - this.first.x) / s) * s, this.roundLength((point.y - this.first.y) / s) * s);
        };
        GraphHandler.prototype.updateHint = function (me) { };
        GraphHandler.prototype.removeHint = function () { };
        GraphHandler.prototype.roundLength = function (length) {
            return Math.round(length);
        };
        GraphHandler.prototype.mouseMove = function (sender, me) {
            var graph = this.graph;
            if (!me.isConsumed() && graph.isMouseDown && this.cell != null &&
                this.first != null && this.bounds != null) {
                if (Five.Events.isMultiTouchEvent(me.getEvent())) {
                    this.reset();
                    return;
                }
                var delta = this.getDelta(me);
                var dx = delta.x;
                var dy = delta.y;
                var tol = graph.tolerance;
                if (this.shape != null || Math.abs(dx) > tol || Math.abs(dy) > tol) {
                    if (this.highlight == null) {
                        this.highlight = new Five.CellHighlight(this.graph, Five.Constants.dropTargetColor, 3);
                    }
                    if (this.shape == null) {
                        this.shape = this.createPreviewShape(this.bounds);
                    }
                    var gridEnabled = graph.isGridEnabledEvent(me.getEvent());
                    var hideGuide = true;
                    if (this.guide != null && this.useGuidesForEvent(me)) {
                        delta = this.guide.move(this.bounds, new Five.Point(dx, dy), gridEnabled);
                        hideGuide = false;
                        dx = delta.x;
                        dy = delta.y;
                    }
                    else if (gridEnabled) {
                        var trx = graph.getView().translate;
                        var scale = graph.getView().scale;
                        var tx = this.bounds.x - (graph.snap(this.bounds.x / scale - trx.x) + trx.x) * scale;
                        var ty = this.bounds.y - (graph.snap(this.bounds.y / scale - trx.y) + trx.y) * scale;
                        var v = this.snap(new Five.Point(dx, dy));
                        dx = v.x - tx;
                        dy = v.y - ty;
                    }
                    if (this.guide != null && hideGuide) {
                        this.guide.hide();
                    }
                    if (graph.isConstrainedEvent(me.getEvent())) {
                        if (Math.abs(dx) > Math.abs(dy)) {
                            dy = 0;
                        }
                        else {
                            dx = 0;
                        }
                    }
                    this.currentDx = dx;
                    this.currentDy = dy;
                    this.updatePreviewShape();
                    var target = null;
                    var cell = me.getCell();
                    var clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();
                    if (graph.isDropEnabled() && this.highlightEnabled) {
                        target = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);
                    }
                    var state = graph.getView().getState(target);
                    var highlight = false;
                    if (state != null && (Five.Cells.getParent(this.cell) != target || clone)) {
                        if (this.target != target) {
                            this.target = target;
                            this.setHighlightColor(Five.Constants.dropTargetColor);
                        }
                        highlight = true;
                    }
                    else {
                        this.target = null;
                        if (this.connectOnDrop && cell != null && this.cells.length == 1 &&
                            Five.Cells.isVertex(cell) && graph.isCellConnectable(cell)) {
                            state = graph.getView().getState(cell);
                            if (state != null) {
                                var error = graph.getEdgeValidationError(null, this.cell, cell);
                                var color = (error == null) ?
                                    Five.Constants.validColor :
                                    Five.Constants.invalidConnectTargetColor;
                                this.setHighlightColor(color);
                                highlight = true;
                            }
                        }
                    }
                    if (state != null && highlight) {
                        this.highlight.highlight(state);
                    }
                    else {
                        this.highlight.hide();
                    }
                }
                this.updateHint(me);
                me.consume();
                Five.Events.consume(me.getEvent());
            }
            else if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor &&
                !me.isConsumed() && me.getState() != null && !graph.isMouseDown) {
                var cursor = graph.getCursorForMouseEvent(me);
                if (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell())) {
                    if (Five.Cells.isEdge(me.getCell())) {
                        cursor = Five.Constants.cursorMovableEdge;
                    }
                    else {
                        cursor = Five.Constants.cursorMovableVertex;
                    }
                }
                me.getState().setCursor(cursor);
            }
        };
        GraphHandler.prototype.updatePreviewShape = function () {
            if (this.shape != null) {
                this.shape.bounds = new Five.Rectangle(Math.round(this.pBounds.x + this.currentDx - this.graph.panDx), Math.round(this.pBounds.y + this.currentDy - this.graph.panDy), this.pBounds.width, this.pBounds.height);
                this.shape.redraw();
            }
        };
        GraphHandler.prototype.setHighlightColor = function (color) {
            if (this.highlight != null) {
                this.highlight.setHighlightColor(color);
            }
        };
        GraphHandler.prototype.mouseUp = function (sender, me) {
            if (!me.isConsumed()) {
                var graph = this.graph;
                if (this.cell != null && this.first != null && this.shape != null &&
                    this.currentDx != null && this.currentDy != null) {
                    var cell = me.getCell();
                    if (this.connectOnDrop && this.target == null && cell != null && Five.Cells.isVertex(cell) &&
                        graph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell)) {
                        graph.connectionHandler.connect(this.cell, cell, me.getEvent());
                    }
                    else {
                        var scale = graph.getView().scale;
                        var dx = this.roundLength(this.currentDx / scale);
                        var dy = this.roundLength(this.currentDy / scale);
                        var target = this.target;
                        if (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent())) {
                            graph.splitEdge(target, this.cells, null, dx, dy);
                        }
                        else {
                            this.moveCells(this.cells, dx, dy, graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled(), this.target, me.getEvent());
                        }
                    }
                }
                else if (this.isSelectEnabled() && this.delayedSelection && this.cell != null) {
                    this.selectDelayed(me);
                }
            }
            if (this.cellWasClicked) {
                me.consume();
            }
            this.reset();
        };
        GraphHandler.prototype.selectDelayed = function (me) {
            if (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me)) {
                this.graph.selectCellForEvent(this.cell, me.getEvent());
            }
        };
        GraphHandler.prototype.reset = function () {
            this.destroyShapes();
            this.removeHint();
            this.cellWasClicked = false;
            this.delayedSelection = false;
            this.currentDx = null;
            this.currentDy = null;
            this.first = null;
            this.cell = null;
            this.target = null;
        };
        GraphHandler.prototype.shouldRemoveCellsFromParent = function (parent, cells, evt) {
            if (Five.Cells.isVertex(parent)) {
                var pState = this.graph.getView().getState(parent);
                var pt = this.graph.container.convertPoint(Five.Events.getClientX(evt), Five.Events.getClientY(evt));
                var alpha = Five.Utils.toRadians(pState.style.rotation);
                if (alpha != 0) {
                    var cos = Math.cos(-alpha);
                    var sin = Math.sin(-alpha);
                    var cx = new Five.Point(pState.getCenterX(), pState.getCenterY());
                    pt = Five.Utils.getRotatedPoint(pt, cos, sin, cx);
                }
                return !Five.Utils.contains(pState, pt.x, pt.y);
            }
            return false;
        };
        GraphHandler.prototype.moveCells = function (cells, dx, dy, clone, target, evt) {
            if (clone) {
                cells = this.graph.getCloneableCells(cells);
            }
            if (target == null && this.isRemoveCellsFromParent() &&
                this.shouldRemoveCellsFromParent(Five.Cells.getParent(this.cell), cells, evt)) {
                target = this.graph.getDefaultParent();
            }
            cells = this.graph.moveCells(cells, dx - this.graph.panDx / this.graph.view.scale, dy - this.graph.panDy / this.graph.view.scale, clone, target, evt);
            if (this.isSelectEnabled() && this.scrollOnMove) {
                this.graph.scrollCellToVisible(cells[0]);
            }
            if (clone) {
                this.graph.setSelectionCells(cells);
            }
        };
        GraphHandler.prototype.destroyShapes = function () {
            if (this.shape != null) {
                this.shape.destroy();
                this.shape = null;
            }
            if (this.guide != null) {
                this.guide.destroy();
                this.guide = null;
            }
            if (this.highlight != null) {
                this.highlight.destroy();
                this.highlight = null;
            }
        };
        GraphHandler.prototype.destroy = function () {
            this.graph.removeMouseListener(this);
            this.graph.onPan.remove(this.panHandler);
            if (this.escapeHandler != null) {
                this.graph.onEscape.remove(this.escapeHandler);
                this.escapeHandler = null;
            }
            this.destroyShapes();
            this.removeHint();
        };
        GraphHandler.maxCells = (Five.Client.isIe) ? 20 : 50;
        return GraphHandler;
    }());
    Five.GraphHandler = GraphHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var SelectionChangeEvent = (function (_super) {
        __extends(SelectionChangeEvent, _super);
        function SelectionChangeEvent(added, removed) {
            var _this = _super.call(this) || this;
            _this.added = added;
            _this.removed = removed;
            return _this;
        }
        return SelectionChangeEvent;
    }(Five.BasicEvent));
    Five.SelectionChangeEvent = SelectionChangeEvent;
    var GraphSelectionModel = (function () {
        function GraphSelectionModel(graph) {
            this.onChange = null;
            this.onAfterExecute = null;
            this.onStartEdit = null;
            this.onEndEdit = null;
            this.onNotify = null;
            this.doneResource = (Five.Client.language != "none") ? "done" : "";
            this.updatingSelectionResource = (Five.Client.language != "none") ? "updatingSelection" : "";
            this.graph = null;
            this.singleSelection = false;
            this.onUndo = new Five.EventListeners();
            this.onSelectionChange = new Five.EventListeners();
            this.graph = graph;
            this.cells = [];
        }
        GraphSelectionModel.prototype.isSingleSelection = function () {
            return this.singleSelection;
        };
        GraphSelectionModel.prototype.setSingleSelection = function (singleSelection) {
            this.singleSelection = singleSelection;
        };
        GraphSelectionModel.prototype.isSelected = function (cell) {
            if (cell != null) {
                return Five.Utils.indexOf(this.cells, cell) >= 0;
            }
            return false;
        };
        GraphSelectionModel.prototype.isEmpty = function () {
            return this.cells.length == 0;
        };
        GraphSelectionModel.prototype.clear = function () {
            this.changeSelection(null, this.cells);
        };
        GraphSelectionModel.prototype.setCell = function (cell) {
            if (cell != null) {
                this.setCells([cell]);
            }
        };
        GraphSelectionModel.prototype.setCells = function (cells) {
            if (cells != null) {
                if (this.singleSelection) {
                    cells = [this.getFirstSelectableCell(cells)];
                }
                var tmp = [];
                for (var i = 0; i < cells.length; i++) {
                    if (this.graph.isCellSelectable(cells[i])) {
                        tmp.push(cells[i]);
                    }
                }
                this.changeSelection(tmp, this.cells);
            }
        };
        GraphSelectionModel.prototype.getFirstSelectableCell = function (cells) {
            if (cells != null) {
                for (var i = 0; i < cells.length; i++) {
                    if (this.graph.isCellSelectable(cells[i])) {
                        return cells[i];
                    }
                }
            }
            return null;
        };
        GraphSelectionModel.prototype.addCell = function (cell) {
            if (cell != null) {
                this.addCells([cell]);
            }
        };
        GraphSelectionModel.prototype.addCells = function (cells) {
            if (cells != null) {
                var remove = null;
                if (this.singleSelection) {
                    remove = this.cells;
                    cells = [this.getFirstSelectableCell(cells)];
                }
                var tmp = [];
                for (var i = 0; i < cells.length; i++) {
                    if (!this.isSelected(cells[i]) &&
                        this.graph.isCellSelectable(cells[i])) {
                        tmp.push(cells[i]);
                    }
                }
                this.changeSelection(tmp, remove);
            }
        };
        GraphSelectionModel.prototype.removeCell = function (cell) {
            if (cell != null) {
                this.removeCells([cell]);
            }
        };
        GraphSelectionModel.prototype.removeCells = function (cells) {
            if (cells != null) {
                var tmp = [];
                for (var i = 0; i < cells.length; i++) {
                    if (this.isSelected(cells[i])) {
                        tmp.push(cells[i]);
                    }
                }
                this.changeSelection(null, tmp);
            }
        };
        GraphSelectionModel.prototype.changeSelection = function (added, removed) {
            if ((added != null && added.length > 0 && added[0] != null) ||
                (removed != null && removed.length > 0 && removed[0] != null)) {
                var change = new Five.SelectionChange(this, added, removed);
                change.execute();
                var edit = new Five.UndoableEdit(this, false);
                edit.add(change);
                this.onUndo.fire(new Five.UndoEvent(edit));
            }
        };
        GraphSelectionModel.prototype.cellAdded = function (cell) {
            if (cell != null &&
                !this.isSelected(cell)) {
                this.cells.push(cell);
            }
        };
        GraphSelectionModel.prototype.cellRemoved = function (cell) {
            if (cell != null) {
                var index = Five.Utils.indexOf(this.cells, cell);
                if (index >= 0) {
                    this.cells.splice(index, 1);
                }
            }
        };
        return GraphSelectionModel;
    }());
    Five.GraphSelectionModel = GraphSelectionModel;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ViewRootChangeEvent = (function (_super) {
        __extends(ViewRootChangeEvent, _super);
        function ViewRootChangeEvent(root, previous, isUp) {
            var _this = _super.call(this) || this;
            _this.root = root;
            _this.previous = previous;
            _this.isUp = isUp;
            return _this;
        }
        return ViewRootChangeEvent;
    }(Five.BasicEvent));
    Five.ViewRootChangeEvent = ViewRootChangeEvent;
    var GraphView = (function () {
        function GraphView(graph) {
            this.onChange = null;
            this.onAfterExecute = null;
            this.onStartEdit = null;
            this.onEndEdit = null;
            this.onNotify = null;
            this.doneResource = (Five.Client.language != "none") ? "done" : "";
            this.updatingDocumentResource = (Five.Client.language != "none") ? "updatingDocument" : "";
            this.allowEval = false;
            this.captureDocumentGesture = true;
            this.optimizeVmlReflows = true;
            this.rendering = true;
            this.currentRoot = null;
            this.scale_ = 1;
            this.onUndo = new Five.EventListeners();
            this.onScaleAndTranslate = new Five.EventListeners();
            this.onScale = new Five.EventListeners();
            this.onTranslate = new Five.EventListeners();
            this.onRootChange = new Five.EventListeners();
            this.translate_ = null;
            this.isEventsEnabled_ = true;
            this.updateStyle = false;
            this.lastNode = null;
            this.lastHtmlNode = null;
            this.lastForegroundNode = null;
            this.lastForegroundHtmlNode = null;
            this.graphBounds = null;
            this.graph = graph;
            this.translate = new Five.Point(0, 0);
            this.graphBounds = new Five.Rectangle(null, null, null, null);
            this.states = new Five.Dictionary();
        }
        Object.defineProperty(GraphView.prototype, "scale", {
            get: function () {
                return this.scale_;
            },
            set: function (value) {
                this.scale_ = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphView.prototype, "translate", {
            get: function () {
                return this.translate_;
            },
            set: function (value) {
                this.translate_ = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GraphView.prototype, "isEventsEnabled", {
            get: function () { return this.isEventsEnabled_; },
            set: function (value) { this.isEventsEnabled_ = value; },
            enumerable: true,
            configurable: true
        });
        GraphView.prototype.getGraphBounds = function () { return this.graphBounds; };
        GraphView.prototype.setGraphBounds = function (value) {
            this.graphBounds = value;
        };
        GraphView.prototype.getState = function (cell, create) {
            if (create === void 0) { create = false; }
            var state = null;
            if (cell != null) {
                state = this.states.get(cell);
                if (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell)) {
                    if (state == null) {
                        state = this.createState(cell);
                        this.states.put(cell, state);
                    }
                    else {
                        state.style = this.graph.getCellStyle(cell);
                    }
                }
            }
            return state;
        };
        GraphView.prototype.getBounds = function (cells) {
            var result = null;
            if (cells != null && cells.length > 0) {
                for (var i = 0; i < cells.length; i++) {
                    if (Five.Cells.isVertex(cells[i]) || Five.Cells.isEdge(cells[i])) {
                        var state = this.getState(cells[i]);
                        if (state != null) {
                            if (result == null) {
                                result = new Five.Rectangle(state.x, state.y, state.width, state.height);
                            }
                            else {
                                result.add(state);
                            }
                        }
                    }
                }
            }
            return result;
        };
        GraphView.prototype.setCurrentRoot = function (root) {
            if (this.currentRoot != root) {
                var change = new Five.CurrentRootChange(this, root);
                change.execute();
                var edit = new Five.UndoableEdit(this, false);
                edit.add(change);
                this.onUndo.fire(new Five.UndoEvent(edit));
                this.graph.sizeDidChange();
            }
            return root;
        };
        GraphView.prototype.scaleAndTranslate = function (scale, dx, dy) {
            var previousScale = this.scale;
            var previousTranslate = new Five.Point(this.translate.x, this.translate.y);
            if (this.scale != scale || this.translate.x != dx || this.translate.y != dy) {
                this.scale = scale;
                this.translate.x = dx;
                this.translate.y = dy;
                if (this.isEventsEnabled) {
                    this.revalidate();
                    this.graph.sizeDidChange();
                }
            }
            this.onScaleAndTranslate.fire(new Five.ScaleAndTranslateEvent(scale, previousScale, this.translate, previousTranslate));
        };
        GraphView.prototype.getScale = function () {
            return this.scale;
        };
        GraphView.prototype.setScale = function (value) {
            var previousScale = this.scale;
            if (this.scale != value) {
                this.scale = value;
                if (this.isEventsEnabled) {
                    this.revalidate();
                    this.graph.sizeDidChange();
                }
            }
            this.onScale.fire(new Five.ScaleEvent(value, previousScale));
        };
        GraphView.prototype.getTranslate = function () {
            return this.translate;
        };
        GraphView.prototype.setTranslate = function (dx, dy) {
            var previousTranslate = new Five.Point(this.translate.x, this.translate.y);
            if (this.translate.x != dx || this.translate.y != dy) {
                this.translate.x = dx;
                this.translate.y = dy;
                if (this.isEventsEnabled) {
                    this.revalidate();
                    this.graph.sizeDidChange();
                }
            }
            this.onTranslate.fire(new Five.TranslateEvent(this.translate, previousTranslate));
        };
        GraphView.prototype.refresh = function () {
            if (this.currentRoot != null) {
                this.clear();
            }
            this.revalidate();
        };
        GraphView.prototype.revalidate = function () {
            this.invalidate();
            this.validate();
        };
        GraphView.prototype.clear = function (cell, force, recurse) {
            var model = this.graph.getModel();
            cell = cell || model.getRoot();
            force = (force != null) ? force : false;
            recurse = (recurse != null) ? recurse : true;
            this.removeState(cell);
            if (recurse && (force || cell != this.currentRoot)) {
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = 0; i < childCount; i++) {
                    this.clear(Five.Cells.getChildAt(cell, i), force);
                }
            }
            else {
                this.invalidate(cell);
            }
        };
        GraphView.prototype.invalidate = function (cell, recurse, includeEdges) {
            var model = this.graph.getModel();
            cell = cell || model.getRoot();
            recurse = (recurse != null) ? recurse : true;
            includeEdges = (includeEdges != null) ? includeEdges : true;
            var state = this.getState(cell);
            if (state != null) {
                state.invalid = true;
            }
            if (cell && !cell.invalidating) {
                cell.invalidating = true;
                if (recurse) {
                    var childCount = Five.Cells.getChildCount(cell);
                    for (var i = 0; i < childCount; i++) {
                        var child = Five.Cells.getChildAt(cell, i);
                        this.invalidate(child, recurse, includeEdges);
                    }
                }
                if (includeEdges) {
                    var edgeCount = Five.Cells.getEdgeCount(cell);
                    for (var j = 0; j < edgeCount; j++) {
                        this.invalidate(Five.Cells.getEdgeAt(cell, j), recurse, includeEdges);
                    }
                }
                delete cell.invalidating;
            }
        };
        GraphView.prototype.validate = function (cell) {
            window.status = Five.Resources.get(this.updatingDocumentResource) || this.updatingDocumentResource;
            this.resetValidationState();
            var graphBounds = this.getBoundingBox(this.validateCellState(this.validateCell(cell || ((this.currentRoot != null) ? this.currentRoot : this.graph.getModel().getRoot()))));
            this.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());
            this.validateBackground();
            this.resetValidationState();
            window.status = Five.Resources.get(this.doneResource) || this.doneResource;
        };
        GraphView.prototype.getEmptyBounds = function () {
            return new Five.Rectangle(this.translate.x * this.scale, this.translate.y * this.scale);
        };
        GraphView.prototype.getBoundingBox = function (state, recurse) {
            if (recurse === void 0) { recurse = true; }
            var bbox = null;
            if (state != null) {
                if (state.shape != null && state.shape.boundingBox != null) {
                    bbox = Five.Utils.clone(state.shape.boundingBox);
                }
                if (state.text != null && state.text.boundingBox != null) {
                    if (bbox != null) {
                        bbox.add(state.text.boundingBox);
                    }
                    else {
                        bbox = state.text.boundingBox.clone();
                    }
                }
                if (recurse) {
                    var childCount = Five.Cells.getChildCount(state.cell);
                    for (var i = 0; i < childCount; i++) {
                        var bounds = this.getBoundingBox(this.getState(Five.Cells.getChildAt(state.cell, i)));
                        if (bounds != null) {
                            if (bbox == null) {
                                bbox = bounds;
                            }
                            else {
                                bbox.add(bounds);
                            }
                        }
                    }
                }
            }
            return bbox;
        };
        GraphView.prototype.createBackgroundPageShape = function (bounds) {
            return new Five.RectangleShape(bounds, "white", "black");
        };
        GraphView.prototype.validateBackground = function () {
            this.validateBackgroundImage();
            this.validateBackgroundPage();
        };
        GraphView.prototype.validateBackgroundImage = function () {
            var bg = this.graph.getBackgroundImage();
            if (bg != null) {
                if (this.backgroundImage == null || this.backgroundImage.image !== bg.src) {
                    if (this.backgroundImage != null) {
                        this.backgroundImage.destroy();
                    }
                    var bounds = new Five.Rectangle(0, 0, 1, 1);
                    this.backgroundImage = new Five.ImageShape(bounds, bg.src);
                    this.backgroundImage.dialect = this.graph.dialect;
                    this.backgroundImage.init(Five.ElementInitializer(this.backgroundPane));
                    this.backgroundImage.redraw();
                }
                this.redrawBackgroundImage(this.backgroundImage, bg);
            }
            else if (this.backgroundImage != null) {
                this.backgroundImage.destroy();
                this.backgroundImage = null;
            }
        };
        GraphView.prototype.validateBackgroundPage = function () {
            var _this = this;
            if (this.graph.pageVisible) {
                var bounds = this.getBackgroundPageBounds();
                if (this.backgroundPageShape == null) {
                    this.backgroundPageShape = this.createBackgroundPageShape(bounds);
                    this.backgroundPageShape.scale = this.scale;
                    this.backgroundPageShape.isShadow = true;
                    this.backgroundPageShape.dialect = this.graph.dialect;
                    this.backgroundPageShape.init(Five.ElementInitializer(this.backgroundPane));
                    this.backgroundPageShape.redraw();
                    if (this.graph.nativeDblClickEnabled) {
                        Five.Events.addListener(this.backgroundPageShape.node, "dblclick", Five.Utils.bind(this, function (evt) { _this.graph.dblClick(evt); }));
                    }
                    Five.Events.addGestureListeners(this.backgroundPageShape.node, Five.Utils.bind(this, function (evt) { _this.graph.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt)); }), Five.Utils.bind(this, function (evt) {
                        if (_this.graph.tooltipHandler != null && _this.graph.tooltipHandler.isHideOnHover()) {
                            _this.graph.tooltipHandler.hide();
                        }
                        if (_this.graph.isMouseDown && !Five.Events.isConsumed(evt)) {
                            _this.graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt));
                        }
                    }), Five.Utils.bind(this, function (evt) {
                        _this.graph.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(evt));
                    }));
                }
                else {
                    this.backgroundPageShape.scale = this.scale;
                    this.backgroundPageShape.bounds = bounds;
                    this.backgroundPageShape.redraw();
                }
            }
            else if (this.backgroundPageShape != null) {
                this.backgroundPageShape.destroy();
                this.backgroundPageShape = null;
            }
        };
        GraphView.prototype.getBackgroundPageBounds = function () {
            var fmt = this.graph.pageFormat;
            var ps = this.scale * this.graph.pageScale;
            var bounds = new Five.Rectangle(this.scale * this.translate.x, this.scale * this.translate.y, fmt.width * ps, fmt.height * ps);
            return bounds;
        };
        GraphView.prototype.redrawBackgroundImage = function (backgroundImage, bg) {
            backgroundImage.scale = this.scale;
            backgroundImage.bounds.x = this.scale * this.translate.x;
            backgroundImage.bounds.y = this.scale * this.translate.y;
            backgroundImage.bounds.width = this.scale * bg.width;
            backgroundImage.bounds.height = this.scale * bg.height;
            backgroundImage.redraw();
        };
        GraphView.prototype.validateCell = function (cell, visible) {
            if (visible === void 0) { visible = true; }
            if (cell != null) {
                visible = visible && this.graph.isCellVisible(cell);
                var state = this.getState(cell, visible);
                if (state != null && !visible) {
                    this.removeState(cell);
                }
                else {
                    var childCount = Five.Cells.getChildCount(cell);
                    for (var i = 0; i < childCount; i++) {
                        this.validateCell(Five.Cells.getChildAt(cell, i), visible &&
                            (!this.isCellCollapsed(cell) || cell == this.currentRoot));
                    }
                }
            }
            return cell;
        };
        GraphView.prototype.validateCellState = function (cell, recurse) {
            if (recurse === void 0) { recurse = true; }
            var state = null;
            if (cell != null) {
                state = this.getState(cell);
                if (state != null) {
                    if (state.invalid) {
                        state.invalid = false;
                        if (cell != this.currentRoot) {
                            this.validateCellState(Five.Cells.getParent(cell), false);
                        }
                        state.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);
                        state.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);
                        this.updateCellState(state);
                        if (cell != this.currentRoot) {
                            this.graph.cellRenderer.redraw(state, false, this.isRendering());
                        }
                    }
                    if (recurse) {
                        state.updateCachedBounds();
                        if (state.shape != null) {
                            this.stateValidated(state);
                        }
                        var childCount = Five.Cells.getChildCount(cell);
                        for (var i = 0; i < childCount; i++) {
                            this.validateCellState(Five.Cells.getChildAt(cell, i));
                        }
                    }
                }
            }
            return state;
        };
        GraphView.prototype.updateCellState = function (state) {
            state.absoluteOffset.x = 0;
            state.absoluteOffset.y = 0;
            state.origin.x = 0;
            state.origin.y = 0;
            state.length = 0;
            if (state.cell != this.currentRoot) {
                var pState = this.getState(Five.Cells.getParent(state.cell));
                if (pState != null && pState.cell != this.currentRoot) {
                    state.origin.x += pState.origin.x;
                    state.origin.y += pState.origin.y;
                }
                var offset = this.graph.getChildOffsetForCell(state.cell);
                if (offset != null) {
                    state.origin.x += offset.x;
                    state.origin.y += offset.y;
                }
                var geo = this.graph.getCellGeometry(state.cell);
                if (geo != null) {
                    if (!Five.Cells.isEdge(state.cell)) {
                        offset = geo.offset || GraphView.emptyPoint;
                        if (geo.relative && pState != null) {
                            if (Five.Cells.isEdge(pState.cell)) {
                                var origin = this.getPoint(pState, geo);
                                if (origin != null) {
                                    state.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;
                                    state.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;
                                }
                            }
                            else {
                                state.origin.x += geo.x * pState.width / this.scale + offset.x;
                                state.origin.y += geo.y * pState.height / this.scale + offset.y;
                            }
                        }
                        else {
                            state.absoluteOffset.x = this.scale * offset.x;
                            state.absoluteOffset.y = this.scale * offset.y;
                            state.origin.x += geo.x;
                            state.origin.y += geo.y;
                        }
                    }
                    state.x = this.scale * (this.translate.x + state.origin.x);
                    state.y = this.scale * (this.translate.y + state.origin.y);
                    state.width = this.scale * geo.width;
                    state.height = this.scale * geo.height;
                    if (Five.Cells.isVertex(state.cell)) {
                        this.updateVertexState(state, geo);
                    }
                    if (Five.Cells.isEdge(state.cell)) {
                        this.updateEdgeState(state, geo);
                    }
                }
            }
        };
        GraphView.prototype.isCellCollapsed = function (cell) {
            return this.graph.isCellCollapsed(cell);
        };
        GraphView.prototype.updateVertexState = function (state, geo) {
            var pState = this.getState(Five.Cells.getParent(state.cell));
            if (geo.relative && pState != null && !Five.Cells.isEdge(pState.cell)) {
                var alpha = Five.Utils.toRadians(pState.style.rotation);
                if (alpha != 0) {
                    var cos = Math.cos(alpha);
                    var sin = Math.sin(alpha);
                    var ct = new Five.Point(state.getCenterX(), state.getCenterY());
                    var cx = new Five.Point(pState.getCenterX(), pState.getCenterY());
                    var pt = Five.Utils.getRotatedPoint(ct, cos, sin, cx);
                    state.x = pt.x - state.width / 2;
                    state.y = pt.y - state.height / 2;
                }
            }
            this.updateVertexLabelOffset(state);
        };
        GraphView.prototype.updateEdgeState = function (state, geo) {
            var source = state.getVisibleTerminalState(true);
            var target = state.getVisibleTerminalState(false);
            if ((Five.Cells.getTerminal(state.cell, true) != null && source == null) ||
                (source == null && geo.getTerminalPoint(true) == null) ||
                (Five.Cells.getTerminal(state.cell, false) != null && target == null) ||
                (target == null && geo.getTerminalPoint(false) == null)) {
                this.clear(state.cell, true);
            }
            else {
                this.updateFixedTerminalPoints(state, source, target);
                this.updatePoints(state, geo.points, source, target);
                this.updateFloatingTerminalPoints(state, source, target);
                var pts = state.absolutePoints;
                if (state.cell != this.currentRoot && (pts == null || pts.length < 2 || pts[0] == null || pts[pts.length - 1] == null)) {
                    this.clear(state.cell, true);
                }
                else {
                    this.updateEdgeBounds(state);
                    this.updateEdgeLabelOffset(state);
                }
            }
        };
        GraphView.prototype.updateVertexLabelOffset = function (state) {
            var h = state.style.labelPosition || Five.HorizontalAlign.Center;
            var lw;
            if (h == Five.HorizontalAlign.Left) {
                lw = state.style.labelWidth;
                if (lw != null) {
                    lw *= this.scale;
                }
                else {
                    lw = state.width;
                }
                state.absoluteOffset.x -= lw;
            }
            else if (h == Five.HorizontalAlign.Right) {
                state.absoluteOffset.x += state.width;
            }
            else if (h == Five.HorizontalAlign.Center) {
                lw = state.style.labelWidth;
                if (lw != null) {
                    var align = state.style.hAlign;
                    var dx = 0;
                    if (align == Five.HorizontalAlign.Center) {
                        dx = 0.5;
                    }
                    else if (align == Five.HorizontalAlign.Right) {
                        dx = 1;
                    }
                    if (dx != 0) {
                        state.absoluteOffset.x -= (lw * this.scale - state.width) * dx;
                    }
                }
            }
            var v = state.style.verticalLabelPosition || Five.VerticalAlign.Middle;
            if (v == Five.VerticalAlign.Top) {
                state.absoluteOffset.y -= state.height;
            }
            else if (v == Five.VerticalAlign.Bottom) {
                state.absoluteOffset.y += state.height;
            }
        };
        GraphView.prototype.resetValidationState = function () {
            this.lastNode = null;
            this.lastHtmlNode = null;
            this.lastForegroundNode = null;
            this.lastForegroundHtmlNode = null;
        };
        GraphView.prototype.stateValidated = function (state) {
            var fg = (Five.Cells.isEdge(state.cell) && this.graph.keepEdgesInForeground) ||
                (Five.Cells.isVertex(state.cell) && this.graph.keepEdgesInBackground);
            var htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;
            var node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;
            var result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);
            if (fg) {
                this.lastForegroundHtmlNode = result[1];
                this.lastForegroundNode = result[0];
            }
            else {
                this.lastHtmlNode = result[1];
                this.lastNode = result[0];
            }
        };
        GraphView.prototype.updateFixedTerminalPoints = function (edge, source, target) {
            this.updateFixedTerminalPoint(edge, source, true, this.graph.getConnectionConstraint(edge, source, true));
            this.updateFixedTerminalPoint(edge, target, false, this.graph.getConnectionConstraint(edge, target, false));
        };
        GraphView.prototype.updateFixedTerminalPoint = function (edge, terminal, source, constraint) {
            var pt = null;
            if (constraint != null) {
                pt = this.graph.getConnectionPoint(terminal, constraint);
            }
            if (pt == null && terminal == null) {
                var s = this.scale;
                var tr = this.translate;
                var orig = edge.origin;
                var geo = this.graph.getCellGeometry(edge.cell);
                pt = geo.getTerminalPoint(source);
                if (pt != null) {
                    pt = new Five.Point(s * (tr.x + pt.x + orig.x), s * (tr.y + pt.y + orig.y));
                }
            }
            edge.setAbsoluteTerminalPoint(pt, source);
        };
        GraphView.prototype.updatePoints = function (edge, points, source, target) {
            if (edge != null) {
                var pts = [];
                pts.push(edge.absolutePoints[0]);
                var edgeStyle = this.getEdgeStyle(edge, points, source, target);
                if (edgeStyle != null) {
                    var src = this.getTerminalPort(edge, source, true);
                    var trg = this.getTerminalPort(edge, target, false);
                    edgeStyle(edge, src, trg, points, pts);
                }
                else if (points != null) {
                    for (var i = 0; i < points.length; i++) {
                        if (points[i] != null) {
                            var pt = Five.Utils.clone(points[i]);
                            pts.push(this.transformControlPoint(edge, pt));
                        }
                    }
                }
                var tmp = edge.absolutePoints;
                pts.push(tmp[tmp.length - 1]);
                edge.absolutePoints = pts;
            }
        };
        GraphView.prototype.transformControlPoint = function (state, pt) {
            var orig = state.origin;
            return new Five.Point(this.scale * (pt.x + this.translate.x + orig.x), this.scale * (pt.y + this.translate.y + orig.y));
        };
        GraphView.prototype.getEdgeStyle = function (edge, points, source, target) {
            var edgeStyleName = (source != null && source === target) ?
                edge.style.loop : !edge.style.noEdge ?
                edge.style.edge
                : null;
            if (edgeStyleName)
                return Five.StyleRegistry.getEdge(edgeStyleName);
            return null;
        };
        GraphView.prototype.updateFloatingTerminalPoints = function (state, source, target) {
            var pts = state.absolutePoints;
            var p0 = pts[0];
            var pe = pts[pts.length - 1];
            if (pe == null && target != null) {
                this.updateFloatingTerminalPoint(state, target, source, false);
            }
            if (p0 == null && source != null) {
                this.updateFloatingTerminalPoint(state, source, target, true);
            }
        };
        GraphView.prototype.updateFloatingTerminalPoint = function (edge, start, end, source) {
            start = this.getTerminalPort(edge, start, source);
            var next = this.getNextPoint(edge, end, source);
            var orth = this.graph.isOrthogonal(edge);
            var alpha = Five.Utils.toRadians(start.style.rotation);
            var center = new Five.Point(start.getCenterX(), start.getCenterY());
            if (alpha != 0) {
                next = Five.Utils.getRotatedPoint(next, Math.cos(-alpha), Math.sin(-alpha), center);
            }
            var border = parseFloat(edge.style[Five.Constants.stylePerimeterSpacing] || "0");
            border += parseFloat(edge.style[(source) ?
                Five.Constants.styleSourcePerimeterSpacing :
                Five.Constants.styleTargetPerimeterSpacing] || "0");
            var pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);
            if (alpha != 0) {
                var cos = Math.cos(alpha);
                var sin = Math.sin(alpha);
                pt = Five.Utils.getRotatedPoint(pt, cos, sin, center);
            }
            edge.setAbsoluteTerminalPoint(pt, source);
        };
        GraphView.prototype.getTerminalPort = function (state, terminal, source) {
            var id = null;
            if (id != null) {
                var tmp = this.getState(this.graph.getModel().getCell(id));
                if (tmp != null) {
                    terminal = tmp;
                }
            }
            return terminal;
        };
        GraphView.prototype.getPerimeterPoint = function (terminal, next, orthogonal, border) {
            var point = null;
            if (terminal != null) {
                var perimeter = this.getPerimeterFunction(terminal);
                if (perimeter != null && next != null) {
                    var bounds = this.getPerimeterBounds(terminal, border);
                    if (bounds.width > 0 || bounds.height > 0) {
                        point = perimeter(bounds, terminal, next, orthogonal);
                    }
                }
                if (point == null) {
                    point = this.getPoint(terminal);
                }
            }
            return point;
        };
        GraphView.prototype.getRoutingCenterX = function (state) {
            var f = (state.style != null) ? parseFloat(state.style[Five.Constants.styleRoutingCenterX]) || 0 : 0;
            return state.getCenterX() + f * state.width;
        };
        GraphView.prototype.getRoutingCenterY = function (state) {
            var f = (state.style != null) ? parseFloat(state.style[Five.Constants.styleRoutingCenterY]) || 0 : 0;
            return state.getCenterY() + f * state.height;
        };
        GraphView.prototype.getPerimeterBounds = function (terminal, border) {
            if (border === void 0) { border = 0; }
            border += parseFloat(terminal.style[Five.Constants.stylePerimeterSpacing] || "0");
            return terminal.getPerimeterBounds(border * this.scale);
        };
        GraphView.prototype.getPerimeterFunction = function (state) {
            var perimeter = state.style[Five.Constants.stylePerimeter];
            if (perimeter)
                return Five.StyleRegistry.getPerimeter(perimeter);
            return null;
        };
        GraphView.prototype.getNextPoint = function (edge, opposite, source) {
            var pts = edge.absolutePoints;
            var point = null;
            if (pts != null && (source || pts.length > 2 || opposite == null)) {
                var count = pts.length;
                point = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];
            }
            if (point == null && opposite != null) {
                point = new Five.Point(opposite.getCenterX(), opposite.getCenterY());
            }
            return point;
        };
        GraphView.prototype.getVisibleTerminal = function (edge, source) {
            var model = this.graph.getModel();
            var result = Five.Cells.getTerminal(edge, source);
            var best = result;
            while (result != null && result != this.currentRoot) {
                if (!this.graph.isCellVisible(best) || this.isCellCollapsed(result)) {
                    best = result;
                }
                result = Five.Cells.getParent(result);
            }
            if (Five.Cells.getParent(best) == model.getRoot()) {
                best = null;
            }
            return best;
        };
        GraphView.prototype.updateEdgeBounds = function (state) {
            var points = state.absolutePoints;
            var p0 = points[0];
            var pe = points[points.length - 1];
            var dx;
            var dy;
            if (p0.x != pe.x || p0.y != pe.y) {
                dx = pe.x - p0.x;
                dy = pe.y - p0.y;
                state.terminalDistance = Math.sqrt(dx * dx + dy * dy);
            }
            else {
                state.terminalDistance = 0;
            }
            var length = 0;
            var segments = [];
            var pt = p0;
            var minX = pt.x;
            var minY = pt.y;
            var maxX = minX;
            var maxY = minY;
            for (var i = 1; i < points.length; i++) {
                var tmp = points[i];
                if (tmp != null) {
                    dx = pt.x - tmp.x;
                    dy = pt.y - tmp.y;
                    var segment = Math.sqrt(dx * dx + dy * dy);
                    segments.push(segment);
                    length += segment;
                    pt = tmp;
                    minX = Math.min(pt.x, minX);
                    minY = Math.min(pt.y, minY);
                    maxX = Math.max(pt.x, maxX);
                    maxY = Math.max(pt.y, maxY);
                }
            }
            state.length = length;
            state.segments = segments;
            var markerSize = 1;
            state.x = minX;
            state.y = minY;
            state.width = Math.max(markerSize, maxX - minX);
            state.height = Math.max(markerSize, maxY - minY);
        };
        GraphView.prototype.getPoint = function (state, geometry) {
            var x = state.getCenterX();
            var y = state.getCenterY();
            var offset;
            if (state.segments != null && (geometry == null || geometry.relative)) {
                var gx = (geometry != null) ? geometry.x / 2 : 0;
                var pointCount = state.absolutePoints.length;
                var dist = (gx + 0.5) * state.length;
                var segment = state.segments[0];
                var length = 0;
                var index = 1;
                while (dist > length + segment && index < pointCount - 1) {
                    length += segment;
                    segment = state.segments[index++];
                }
                var factor = (segment == 0) ? 0 : (dist - length) / segment;
                var p0 = state.absolutePoints[index - 1];
                var pe = state.absolutePoints[index];
                if (p0 != null && pe != null) {
                    var gy = 0;
                    var offsetX = 0;
                    var offsetY = 0;
                    if (geometry != null) {
                        gy = geometry.y;
                        offset = geometry.offset;
                        if (offset != null) {
                            offsetX = offset.x;
                            offsetY = offset.y;
                        }
                    }
                    var dx = pe.x - p0.x;
                    var dy = pe.y - p0.y;
                    var nx = (segment == 0) ? 0 : dy / segment;
                    var ny = (segment == 0) ? 0 : dx / segment;
                    x = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;
                    y = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;
                }
            }
            else if (geometry != null) {
                offset = geometry.offset;
                if (offset != null) {
                    x += offset.x;
                    y += offset.y;
                }
            }
            return new Five.Point(x, y);
        };
        GraphView.prototype.getRelativePoint = function (edgeState, x, y) {
            var geometry = Five.Cells.getGeometry(edgeState.cell);
            if (geometry != null) {
                var pointCount = edgeState.absolutePoints.length;
                if (geometry.relative && pointCount > 1) {
                    var totalLength = edgeState.length;
                    var segments = edgeState.segments;
                    var p0 = edgeState.absolutePoints[0];
                    var pe = edgeState.absolutePoints[1];
                    var minDist = Five.Utils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);
                    var index = 0;
                    var tmp = 0;
                    var length = 0;
                    for (var i = 2; i < pointCount; i++) {
                        tmp += segments[i - 2];
                        pe = edgeState.absolutePoints[i];
                        var dist = Five.Utils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);
                        if (dist <= minDist) {
                            minDist = dist;
                            index = i - 1;
                            length = tmp;
                        }
                        p0 = pe;
                    }
                    var seg = segments[index];
                    p0 = edgeState.absolutePoints[index];
                    pe = edgeState.absolutePoints[index + 1];
                    var x2 = p0.x;
                    var y2 = p0.y;
                    var x1 = pe.x;
                    var y1 = pe.y;
                    var px = x;
                    var py = y;
                    var xSegment = x2 - x1;
                    var ySegment = y2 - y1;
                    px -= x1;
                    py -= y1;
                    var projlenSq = 0;
                    px = xSegment - px;
                    py = ySegment - py;
                    var dotprod = px * xSegment + py * ySegment;
                    if (dotprod <= 0.0) {
                        projlenSq = 0;
                    }
                    else {
                        projlenSq = dotprod * dotprod
                            / (xSegment * xSegment + ySegment * ySegment);
                    }
                    var projlen = Math.sqrt(projlenSq);
                    if (projlen > seg) {
                        projlen = seg;
                    }
                    var yDistance = Math.sqrt(Five.Utils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y));
                    var direction = Five.Utils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);
                    if (direction == -1) {
                        yDistance = -yDistance;
                    }
                    return new Five.Point(((totalLength / 2 - length - projlen) / totalLength) * -2, yDistance / this.scale);
                }
            }
            return new Five.Point();
        };
        GraphView.prototype.updateEdgeLabelOffset = function (state) {
            var points = state.absolutePoints;
            state.absoluteOffset.x = state.getCenterX();
            state.absoluteOffset.y = state.getCenterY();
            if (points != null && points.length > 0 && state.segments != null) {
                var geometry = this.graph.getCellGeometry(state.cell);
                if (geometry.relative) {
                    var offset = this.getPoint(state, geometry);
                    if (offset != null) {
                        state.absoluteOffset = offset;
                    }
                }
                else {
                    var p0 = points[0];
                    var pe = points[points.length - 1];
                    if (p0 != null && pe != null) {
                        var dx = pe.x - p0.x;
                        var dy = pe.y - p0.y;
                        var x0 = 0;
                        var y0 = 0;
                        var off = geometry.offset;
                        if (off != null) {
                            x0 = off.x;
                            y0 = off.y;
                        }
                        var x = p0.x + dx / 2 + x0 * this.scale;
                        var y = p0.y + dy / 2 + y0 * this.scale;
                        state.absoluteOffset.x = x;
                        state.absoluteOffset.y = y;
                    }
                }
            }
        };
        GraphView.prototype.isRendering = function () {
            return this.rendering;
        };
        GraphView.prototype.setRendering = function (value) {
            this.rendering = value;
        };
        GraphView.prototype.isAllowEval = function () {
            return this.allowEval;
        };
        GraphView.prototype.setAllowEval = function (value) {
            this.allowEval = value;
        };
        GraphView.prototype.getStates = function () {
            return this.states;
        };
        GraphView.prototype.setStates = function (value) {
            this.states = value;
        };
        GraphView.prototype.getCellStates = function (cells) {
            if (cells == null) {
                return this.states.getValues();
            }
            else {
                var result = [];
                for (var i = 0; i < cells.length; i++) {
                    var state = this.getState(cells[i]);
                    if (state != null) {
                        result.push(state);
                    }
                }
                return result;
            }
        };
        GraphView.prototype.removeState = function (cell) {
            var state = null;
            if (cell != null) {
                state = this.states.remove(cell);
                if (state != null) {
                    this.graph.cellRenderer.destroy(state);
                    state.destroy();
                }
            }
            return state;
        };
        GraphView.prototype.createState = function (cell) {
            var state = new Five.CellState(this, cell, this.graph.getCellStyle(cell));
            if (state.view.graph.container != null && state.cell != state.view.currentRoot &&
                (Five.Cells.isVertex(state.cell) || Five.Cells.isEdge(state.cell))) {
                this.graph.cellRenderer.createShape(state);
            }
            return state;
        };
        GraphView.prototype.getCanvas = function () {
            return this.canvas;
        };
        GraphView.prototype.getBackgroundPane = function () {
            return this.backgroundPane;
        };
        GraphView.prototype.getDrawPane = function () {
            return this.drawPane;
        };
        GraphView.prototype.getOverlayPane = function () {
            return this.overlayPane;
        };
        GraphView.prototype.getDecoratorPane = function () {
            return this.decoratorPane;
        };
        GraphView.prototype.isContainerEvent = function (evt) {
            var source = Five.Events.getSource(evt);
            return (this.graph.container.is(source) ||
                source.parentNode == this.backgroundPane ||
                (source.parentNode != null && source.parentNode.parentNode == this.backgroundPane) ||
                source == this.canvas.parentNode ||
                source == this.canvas ||
                source == this.backgroundPane ||
                source == this.drawPane ||
                source == this.overlayPane ||
                source == this.decoratorPane);
        };
        GraphView.prototype.isScrollEvent = function (evt) {
            var totalOffset = this.graph.container.getAbsoluteOffset();
            var pt = new Five.Point(evt.clientX - totalOffset.x, evt.clientY - totalOffset.y);
            var offset = this.graph.container.getOffsetSize();
            var client = this.graph.container.getClientSize();
            var outWidth = offset.x;
            var inWidth = client.x;
            if (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth) {
                return true;
            }
            var outHeight = offset.y;
            var inHeight = client.y;
            if (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight) {
                return true;
            }
            return false;
        };
        GraphView.prototype.init = function () {
            this.installListeners();
            var graph = this.graph;
            if (graph.dialect == Five.Dialect.Svg) {
                this.createSvg();
            }
            else {
                this.createHtml();
            }
        };
        GraphView.prototype.installListeners = function () {
            var _this = this;
            var graph = this.graph;
            var container = graph.container;
            if (container != null) {
                if (Five.Client.isTouch) {
                    Five.Events.addListener(container.eventTarget(), "gesturestart", Five.Utils.bind(this, function (evt) {
                        graph.fireGestureEvent(evt);
                        Five.Events.consume(evt);
                    }));
                    Five.Events.addListener(container.eventTarget(), "gesturechange", Five.Utils.bind(this, function (evt) {
                        graph.fireGestureEvent(evt);
                        Five.Events.consume(evt);
                    }));
                    Five.Events.addListener(container.eventTarget(), "gestureend", Five.Utils.bind(this, function (evt) {
                        graph.fireGestureEvent(evt);
                        Five.Events.consume(evt);
                    }));
                }
                Five.Events.addGestureListeners(container.eventTarget(), function (evt) {
                    if (_this.isContainerEvent(evt) && ((!Five.Client.isIe && !Five.Client.isGc && !Five.Client.isOp && !Five.Client.isSf) || !_this.isScrollEvent(evt))) {
                        graph.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt));
                    }
                }, function (evt) {
                    if (_this.isContainerEvent(evt)) {
                        graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt));
                    }
                }, function (evt) {
                    if (_this.isContainerEvent(evt)) {
                        graph.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(evt));
                    }
                });
                Five.Events.addListener(container.eventTarget(), "dblclick", Five.Utils.bind(this, function (evt) {
                    if (_this.isContainerEvent(evt)) {
                        graph.dblClick(evt);
                    }
                }));
                var getState = function (evt) {
                    var state = null;
                    if (Five.Client.isTouch) {
                        var x = Five.Events.getClientX(evt);
                        var y = Five.Events.getClientY(evt);
                        var pt = container.convertPoint(x, y);
                        state = graph.view.getState(graph.getCellAt(pt.x, pt.y));
                    }
                    return state;
                };
                graph.addMouseListener({
                    mouseDown: function () { return graph.popupMenuHandler.hideMenu(); },
                    mouseMove: function () { },
                    mouseUp: function () { }
                });
                this.moveHandler = Five.Utils.bind(this, function (evt) {
                    if (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover()) {
                        graph.tooltipHandler.hide();
                    }
                    if (_this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&
                        !_this.isContainerEvent(evt) && graph.container.isVisible() && !Five.Events.isConsumed(evt)) {
                        graph.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(evt, getState(evt)));
                    }
                });
                this.endHandler = Five.Utils.bind(this, function (evt) {
                    if (_this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&
                        !_this.isContainerEvent(evt) && graph.container.isVisible()) {
                        graph.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(evt));
                    }
                });
                Five.Events.addGestureListeners(document, null, this.moveHandler, this.endHandler);
            }
        };
        GraphView.prototype.createHtml = function () {
            var _this = this;
            var container = this.graph.container;
            if (container != null) {
                this.canvas = this.createHtmlPane("100%", "100%");
                this.backgroundPane = this.createHtmlPane("1px", "1px");
                this.drawPane = this.createHtmlPane("1px", "1px");
                this.overlayPane = this.createHtmlPane("1px", "1px");
                this.decoratorPane = this.createHtmlPane("1px", "1px");
                this.canvas.appendChild(this.backgroundPane);
                this.canvas.appendChild(this.drawPane);
                this.canvas.appendChild(this.overlayPane);
                this.canvas.appendChild(this.decoratorPane);
                if (Five.Client.isQuirks) {
                    var onResize = function () {
                        var bounds = _this.getGraphBounds();
                        var width = bounds.x + bounds.width + _this.graph.border;
                        var height = bounds.y + bounds.height + _this.graph.border;
                        _this.updateHtmlCanvasSize(width, height);
                    };
                    Five.Events.addListener(window, "resize", onResize);
                }
            }
        };
        GraphView.prototype.updateHtmlCanvasSize = function (width, height) {
            var style = this.canvas.style;
            if (this.graph.container != null) {
                var offset = this.graph.container.getOffsetSize();
                if (offset.x < width) {
                    style.width = width + "px";
                }
                else {
                    style.width = "100%";
                }
                if (offset.y < height) {
                    style.height = height + "px";
                }
                else {
                    style.height = "100%";
                }
            }
        };
        GraphView.prototype.createHtmlPane = function (width, height) {
            var pane = document.createElement("div");
            if (width != null && height != null) {
                pane.style.position = "absolute";
                pane.style.left = "0px";
                pane.style.top = "0px";
                pane.style.width = width;
                pane.style.height = height;
            }
            else {
                pane.style.position = "relative";
            }
            return pane;
        };
        GraphView.createGElement = function (id) {
            var result = document.createElementNS(Five.Constants.nsSvg, "g");
            result.id = id;
            return result;
        };
        GraphView.prototype.createSvg = function () {
            var container = this.graph.container;
            this.canvas = GraphView.createGElement("canvas");
            this.backgroundPane = GraphView.createGElement("backgroundPane");
            this.canvas.appendChild(this.backgroundPane);
            this.drawPane = GraphView.createGElement("drawPane");
            this.canvas.appendChild(this.drawPane);
            this.overlayPane = GraphView.createGElement("overlayPane");
            this.canvas.appendChild(this.overlayPane);
            this.decoratorPane = GraphView.createGElement("decoratorPane");
            this.canvas.appendChild(this.decoratorPane);
            var root = document.createElementNS(Five.Constants.nsSvg, "svg");
            root.style.width = "100%";
            root.style.height = "100%";
            root.style.display = "block";
            root.appendChild(this.canvas);
            if (container != null) {
                container.setCanvas(root);
            }
        };
        GraphView.prototype.destroy = function () {
            var root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;
            if (root == null) {
                root = this.canvas;
            }
            if (root != null && root.parentNode != null) {
                this.clear(this.currentRoot, true);
                Five.Events.removeGestureListeners(document, null, this.moveHandler, this.endHandler);
                Five.Events.release(this.graph.container.eventTarget());
                root.parentNode.removeChild(root);
                this.moveHandler = null;
                this.endHandler = null;
                this.canvas = null;
                this.backgroundPane = null;
                this.drawPane = null;
                this.overlayPane = null;
                this.decoratorPane = null;
            }
        };
        GraphView.emptyPoint = new Five.Point(0, 0);
        return GraphView;
    }());
    Five.GraphView = GraphView;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Guide = (function () {
        function Guide(graph, states) {
            this.graph = graph;
            this.states = null;
            this.horizontal = true;
            this.vertical = true;
            this.guideX = null;
            this.guideY = null;
            this.setStates(states);
        }
        Guide.prototype.setStates = function (states) {
            this.states = states;
        };
        Guide.prototype.isEnabledForEvent = function (evt) {
            return true;
        };
        Guide.prototype.getGuideTolerance = function () {
            return this.graph.gridSize * this.graph.view.scale / 2;
        };
        Guide.prototype.createGuideShape = function (horizontal) {
            var guide = new Five.PolylineShape([], Five.Constants.guideColor, Five.Constants.guideStrokewidth);
            guide.isDashed = true;
            return guide;
        };
        Guide.prototype.move = function (bounds, delta, gridEnabled) {
            var _this = this;
            if (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null) {
                var trx = this.graph.getView().translate;
                var scale = this.graph.getView().scale;
                var dx = delta.x;
                var dy = delta.y;
                var overrideX = false;
                var overrideY = false;
                var tt = this.getGuideTolerance();
                var ttX = tt;
                var ttY = tt;
                var b = bounds.clone();
                b.x += delta.x;
                b.y += delta.y;
                var left = b.x;
                var right = b.x + b.width;
                var center = b.getCenterX();
                var top = b.y;
                var bottom = b.y + b.height;
                var middle = b.getCenterY();
                var snapX = function (x) {
                    x += _this.graph.panDx;
                    var override = false;
                    if (Math.abs(x - center) < ttX) {
                        dx = x - bounds.getCenterX();
                        ttX = Math.abs(x - center);
                        override = true;
                    }
                    else if (Math.abs(x - left) < ttX) {
                        dx = x - bounds.x;
                        ttX = Math.abs(x - left);
                        override = true;
                    }
                    else if (Math.abs(x - right) < ttX) {
                        dx = x - bounds.x - bounds.width;
                        ttX = Math.abs(x - right);
                        override = true;
                    }
                    if (override) {
                        if (_this.guideX == null) {
                            _this.guideX = _this.createGuideShape(true);
                            _this.guideX.dialect = (_this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.Vml : Five.Dialect.Svg;
                            _this.guideX.pointerEvents = false;
                            _this.guideX.init(Five.ElementInitializer(_this.graph.getView().getOverlayPane()));
                        }
                        var c = _this.graph.container;
                        x -= _this.graph.panDx;
                        _this.guideX.points = [new Five.Point(x, -_this.graph.panDy), new Five.Point(x, c.getScroll().height - 3 - _this.graph.panDy)];
                    }
                    overrideX = overrideX || override;
                };
                var snapY = function (y) {
                    y += _this.graph.panDy;
                    var override = false;
                    if (Math.abs(y - middle) < ttY) {
                        dy = y - bounds.getCenterY();
                        ttY = Math.abs(y - middle);
                        override = true;
                    }
                    else if (Math.abs(y - top) < ttY) {
                        dy = y - bounds.y;
                        ttY = Math.abs(y - top);
                        override = true;
                    }
                    else if (Math.abs(y - bottom) < ttY) {
                        dy = y - bounds.y - bounds.height;
                        ttY = Math.abs(y - bottom);
                        override = true;
                    }
                    if (override) {
                        if (_this.guideY == null) {
                            _this.guideY = _this.createGuideShape(false);
                            _this.guideY.dialect = (_this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.Vml : Five.Dialect.Svg;
                            _this.guideY.pointerEvents = false;
                            _this.guideY.init(Five.ElementInitializer(_this.graph.getView().getOverlayPane()));
                        }
                        var c = _this.graph.container;
                        y -= _this.graph.panDy;
                        _this.guideY.points = [new Five.Point(-_this.graph.panDx, y), new Five.Point(c.getScroll().width - 3 - _this.graph.panDx, y)];
                    }
                    overrideY = overrideY || override;
                };
                for (var i = 0; i < this.states.length; i++) {
                    var state = this.states[i];
                    if (state != null) {
                        if (this.horizontal) {
                            snapX.call(this, state.getCenterX());
                            snapX.call(this, state.x);
                            snapX.call(this, state.x + state.width);
                        }
                        if (this.vertical) {
                            snapY.call(this, state.getCenterY());
                            snapY.call(this, state.y);
                            snapY.call(this, state.y + state.height);
                        }
                    }
                }
                if (!overrideX && this.guideX != null) {
                    Five.Utils.nodeStyle(this.guideX.node).visibility = "hidden";
                }
                else if (this.guideX != null) {
                    Five.Utils.nodeStyle(this.guideX.node).visibility = "visible";
                    this.guideX.redraw();
                }
                if (!overrideY && this.guideY != null) {
                    Five.Utils.nodeStyle(this.guideY.node).visibility = "hidden";
                }
                else if (this.guideY != null) {
                    Five.Utils.nodeStyle(this.guideY.node).visibility = "visible";
                    this.guideY.redraw();
                }
                if (gridEnabled) {
                    if (!overrideX) {
                        var tx = bounds.x - (this.graph.snap(bounds.x /
                            scale - trx.x) + trx.x) * scale;
                        dx = this.graph.snap(dx / scale) * scale - tx;
                    }
                    if (!overrideY) {
                        var ty = bounds.y - (this.graph.snap(bounds.y /
                            scale - trx.y) + trx.y) * scale;
                        dy = this.graph.snap(dy / scale) * scale - ty;
                    }
                }
                delta = new Five.Point(dx, dy);
            }
            return delta;
        };
        Guide.prototype.hide = function () {
            if (this.guideX != null) {
                Five.Utils.nodeStyle(this.guideX.node).visibility = "hidden";
            }
            if (this.guideY != null) {
                Five.Utils.nodeStyle(this.guideY.node).visibility = "hidden";
            }
        };
        Guide.prototype.destroy = function () {
            if (this.guideX != null) {
                this.guideX.destroy();
                this.guideX = null;
            }
            if (this.guideY != null) {
                this.guideY.destroy();
                this.guideY = null;
            }
        };
        return Guide;
    }());
    Five.Guide = Guide;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ImageBundle = (function () {
        function ImageBundle(alt) {
            if (alt === void 0) { alt = false; }
            this.alt = null;
            this.alt = alt;
            this.images = {};
        }
        ImageBundle.prototype.putImage = function (key, value, fallback) {
            this.images[key] = { value: value, fallback: fallback };
        };
        ImageBundle.prototype.getImage = function (key) {
            var result = null;
            if (key != null) {
                var img = this.images[key];
                if (img != null) {
                    result = (this.alt) ? img.fallback : img.value;
                }
            }
            return result;
        };
        return ImageBundle;
    }());
    Five.ImageBundle = ImageBundle;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var LayoutCellsEvent = (function (_super) {
        __extends(LayoutCellsEvent, _super);
        function LayoutCellsEvent(cells) {
            var _this = _super.call(this) || this;
            _this.cells = cells;
            return _this;
        }
        return LayoutCellsEvent;
    }(Five.BasicEvent));
    Five.LayoutCellsEvent = LayoutCellsEvent;
    var LayoutManager = (function () {
        function LayoutManager(graph) {
            var _this = this;
            this.bubbling = true;
            this.enabled = true;
            this.onLayoutCells = new Five.EventListeners();
            this.getLayout = function () { return null; };
            this.undoHandler = function (evt) {
                if (_this.isEnabled()) {
                    _this.beforeUndo(evt.edit);
                }
            };
            this.moveHandler = function (e) {
                if (_this.isEnabled()) {
                    _this.cellsMoved(e.cells, e.event);
                }
            };
            this.setGraph(graph);
        }
        LayoutManager.prototype.isEnabled = function () {
            return this.enabled;
        };
        LayoutManager.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        LayoutManager.prototype.isBubbling = function () {
            return this.bubbling;
        };
        LayoutManager.prototype.setBubbling = function (value) {
            this.bubbling = value;
        };
        LayoutManager.prototype.getGraph = function () {
            return this.graph;
        };
        LayoutManager.prototype.setGraph = function (graph) {
            var model;
            if (this.graph != null) {
                model = this.graph.getModel();
                model.onBeforeUndo.remove(this.undoHandler);
                this.graph.onMoveCells.remove(this.moveHandler);
            }
            this.graph = graph;
            if (this.graph != null) {
                model = this.graph.getModel();
                model.onBeforeUndo.add(this.undoHandler);
                this.graph.onMoveCells.add(this.moveHandler);
            }
        };
        LayoutManager.prototype.beforeUndo = function (undoableEdit) {
            var cells = this.getCellsForChanges(undoableEdit.changes);
            var model = this.getGraph().getModel();
            if (this.isBubbling()) {
                var tmp = model.getParents(cells);
                while (tmp.length > 0) {
                    cells = cells.concat(tmp);
                    tmp = model.getParents(tmp);
                }
            }
            this.layoutCells(Five.Utils.sortCells(cells, false));
        };
        LayoutManager.prototype.cellsMoved = function (cells, evt) {
            if (cells != null && evt != null) {
                var point = this.getGraph().container.convertPoint(Five.Events.getClientX(evt), Five.Events.getClientY(evt));
                var model = this.getGraph().getModel();
                for (var i = 0; i < cells.length; i++) {
                    var layout = this.getLayout(Five.Cells.getParent(cells[i]));
                    if (layout != null) {
                        layout.moveCell(cells[i], point.x, point.y);
                    }
                }
            }
        };
        LayoutManager.prototype.getCellsForChanges = function (changes) {
            var result = [];
            var hash = new Object();
            for (var i = 0; i < changes.length; i++) {
                var change = changes[i];
                if (change instanceof Five.RootChange) {
                    return [];
                }
                else {
                    var cells = this.getCellsForChange(change);
                    for (var j = 0; j < cells.length; j++) {
                        if (cells[j] != null) {
                            var id = Five.CellPath.create(cells[j]);
                            if (hash[id] == null) {
                                hash[id] = cells[j];
                                result.push(cells[j]);
                            }
                        }
                    }
                }
            }
            return result;
        };
        LayoutManager.prototype.getCellsForChange = function (change) {
            var model = this.getGraph().getModel();
            if (change instanceof Five.ChildChange) {
                var childChange = change;
                return [childChange.child, childChange.previous, Five.Cells.getParent(childChange.child)];
            }
            else if (change instanceof Five.TerminalChange) {
                return [change.cell, Five.Cells.getParent(change.cell)];
            }
            else if (change instanceof Five.GeometryChange) {
                return [change.cell, Five.Cells.getParent(change.cell)];
            }
            else if (change instanceof Five.VisibleChange) {
                return [change.cell];
            }
            else if (change instanceof Five.StyleChange) {
                return [change.cell];
            }
            return [];
        };
        LayoutManager.prototype.layoutCells = function (cells) {
            if (cells.length > 0) {
                var model = this.getGraph().getModel();
                model.beginUpdate();
                try {
                    var last = null;
                    for (var i = 0; i < cells.length; i++) {
                        if (cells[i] != model.getRoot() && cells[i] != last) {
                            last = cells[i];
                            this.executeLayout(this.getLayout(last), last);
                        }
                    }
                    this.onLayoutCells.fire(new LayoutCellsEvent(cells));
                }
                finally {
                    model.endUpdate();
                }
            }
        };
        LayoutManager.prototype.executeLayout = function (layout, parent) {
            if (layout != null && parent != null) {
                layout.execute(parent);
            }
        };
        LayoutManager.prototype.destroy = function () {
            this.setGraph(null);
        };
        return LayoutManager;
    }());
    Five.LayoutManager = LayoutManager;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Marker = (function () {
        function Marker() {
        }
        Marker.addMarker = function (type, funct) {
            Marker.markers[type] = funct;
        };
        Marker.createMarker = function (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {
            var funct = Marker.markers[type];
            return (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;
        };
        Marker.arrow = function (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {
            var endOffsetX = unitX * sw * 1.118;
            var endOffsetY = unitY * sw * 1.118;
            unitX = unitX * (size + sw);
            unitY = unitY * (size + sw);
            var pt = pe.clone();
            pt.x -= endOffsetX;
            pt.y -= endOffsetY;
            var f = (type != Five.ArrowStyle.Classic) ? 1 : 3 / 4;
            pe.x += -unitX * f - endOffsetX;
            pe.y += -unitY * f - endOffsetY;
            return function () {
                canvas.begin();
                canvas.moveTo(pt.x, pt.y);
                canvas.lineTo(pt.x - unitX - unitY / 2, pt.y - unitY + unitX / 2);
                if (type == Five.ArrowStyle.Classic) {
                    canvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);
                }
                canvas.lineTo(pt.x + unitY / 2 - unitX, pt.y - unitY - unitX / 2);
                canvas.close();
                if (filled) {
                    canvas.fillAndStroke();
                }
                else {
                    canvas.stroke();
                }
            };
        };
        Marker.open = function (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {
            var endOffsetX = unitX * sw * 1.118;
            var endOffsetY = unitY * sw * 1.118;
            unitX = unitX * (size + sw);
            unitY = unitY * (size + sw);
            var pt = pe.clone();
            pt.x -= endOffsetX;
            pt.y -= endOffsetY;
            pe.x += -endOffsetX * 2;
            pe.y += -endOffsetY * 2;
            return function () {
                canvas.begin();
                canvas.moveTo(pt.x - unitX - unitY / 2, pt.y - unitY + unitX / 2);
                canvas.lineTo(pt.x, pt.y);
                canvas.lineTo(pt.x + unitY / 2 - unitX, pt.y - unitY - unitX / 2);
                canvas.stroke();
            };
        };
        Marker.oval = function (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {
            var a = size / 2;
            var pt = pe.clone();
            pe.x -= unitX * a;
            pe.y -= unitY * a;
            return function () {
                canvas.ellipse(pt.x - a, pt.y - a, size, size);
                if (filled) {
                    canvas.fillAndStroke();
                }
                else {
                    canvas.stroke();
                }
            };
        };
        Marker.diamond = function (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {
            var swFactor = (type == Five.ArrowStyle.Diamond) ? 0.7071 : 0.9862;
            var endOffsetX = unitX * sw * swFactor;
            var endOffsetY = unitY * sw * swFactor;
            unitX = unitX * (size + sw);
            unitY = unitY * (size + sw);
            var pt = pe.clone();
            pt.x -= endOffsetX;
            pt.y -= endOffsetY;
            pe.x += -unitX - endOffsetX;
            pe.y += -unitY - endOffsetY;
            var tk = ((type == Five.ArrowStyle.Diamond) ? 2 : 3.4);
            return function () {
                canvas.begin();
                canvas.moveTo(pt.x, pt.y);
                canvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);
                canvas.lineTo(pt.x - unitX, pt.y - unitY);
                canvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);
                canvas.close();
                if (filled) {
                    canvas.fillAndStroke();
                }
                else {
                    canvas.stroke();
                }
            };
        };
        Marker.register = function () {
            Marker.addMarker("classic", Marker.arrow);
            Marker.addMarker("block", Marker.arrow);
            Marker.addMarker("open", Marker.open);
            Marker.addMarker("oval", Marker.oval);
            Marker.addMarker("diamond", Marker.diamond);
            Marker.addMarker("diamondThin", Marker.diamond);
        };
        Marker.markers = {};
        return Marker;
    }());
    Five.Marker = Marker;
    Marker.register();
})(Five || (Five = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var Utils = Five.Utils;
    var Rectangle = Five.Rectangle;
    var Constants = Five.Constants;
    var BasicLayout = Five.BasicLayout;
    var Dictionary = Five.Dictionary;
    var behaviorAction = Five.behaviorAction;
    var KeyCode = Five.KeyCode;
    var KeyModifier = Five.KeyModifier;
    var Point = Five.Point;
    var ShapeStyle = Five.ShapeStyle;
    var Overflow = Five.Overflow;
    var Whitespace = Five.Whitespace;
    var ArrowStyle = Five.ArrowStyle;
    var EdgeKind = Five.EdgeKind;
    var AppliedStyle = Five.AppliedStyle;
    var StringDictionary = Five.StringDictionary;
    var Parameters = (function () {
        function Parameters() {
        }
        return Parameters;
    }());
    var ArrowLink = (function () {
        function ArrowLink() {
        }
        return ArrowLink;
    }());
    var Cloud = (function () {
        function Cloud() {
        }
        return Cloud;
    }());
    var Edge = (function () {
        function Edge() {
        }
        return Edge;
    }());
    CloudDiagram.Edge = Edge;
    var Font = (function () {
        function Font() {
        }
        return Font;
    }());
    CloudDiagram.Font = Font;
    var Hook = (function () {
        function Hook() {
        }
        return Hook;
    }());
    var Icon = (function () {
        function Icon() {
        }
        return Icon;
    }());
    var NodePosition;
    (function (NodePosition) {
        NodePosition[NodePosition["Left"] = 0] = "Left";
        NodePosition[NodePosition["Right"] = 1] = "Right";
    })(NodePosition || (NodePosition = {}));
    var NodeDecarator = (function () {
        function NodeDecarator() {
        }
        return NodeDecarator;
    }());
    var Node = (function () {
        function Node(text, parent, style) {
            this.children_ = [];
            this.text_ = text;
            this.parent_ = parent;
            this.style_ = style;
        }
        Object.defineProperty(Node.prototype, "children", {
            get: function () { return this.children_; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "text", {
            get: function () { return this.text_; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "parent", {
            get: function () { return this.parent_; },
            set: function (value) { this.parent_ = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "style", {
            get: function () { return this.style_; },
            set: function (value) {
                this.style_ = value;
                this.view.setNodeStyle(value);
            },
            enumerable: true,
            configurable: true
        });
        Node.prototype.findChildLink = function (child) {
            for (var i = 0; i < this.children_.length; i++) {
                if (this.children_[i].child === child) {
                    return this.children_[i];
                }
            }
            return null;
        };
        Node.prototype.addChild = function (text, left) {
            var child = new Node(text, this, this.style_);
            this.appendChild(child, left);
            return child;
        };
        Node.prototype.appendChild = function (child, left) {
            this.children_.push({ child: child, left: left, view: null });
            child.parent = this;
        };
        Node.prototype.addChildAfter = function (text, sibling) {
            var child = new Node(text, this, sibling.parent.style_);
            var siblingLink = this.findChildLink(sibling);
            if (!siblingLink)
                throw new Error("Cannot found child");
            var index = this.children.indexOf(siblingLink);
            this.children_.splice(index + 1, 0, { child: child, left: siblingLink.left, view: null });
            return child;
        };
        Node.prototype.removeChild = function (child) {
            var link = this.findChildLink(child);
            this.children.splice(this.children.indexOf(link), 1);
            child.parent = null;
        };
        return Node;
    }());
    var Model = (function () {
        function Model() {
        }
        Object.defineProperty(Model.prototype, "root", {
            get: function () { return this.root_; },
            enumerable: true,
            configurable: true
        });
        Model.prototype.createRoot = function (text) {
            var node = new Node(text, null, null);
            this.root_ = node;
            return node;
        };
        return Model;
    }());
    var MmFileFormat = (function () {
        function MmFileFormat() {
        }
        MmFileFormat.read = function (content) {
            var doc = Utils.parseXml(content);
            var mm = new Model();
            var mapElement = doc.documentElement;
            if (mapElement == null)
                throw new Error("invalid MM file format: no root node");
            if (mapElement.nodeName !== "map")
                throw new Error("invalid MM file format: map root node expected");
            var rootNode = mapElement.firstElementChild;
            if (rootNode != null) {
                if (rootNode.nodeName !== "node")
                    throw new Error("invalid MM file format: first element under the map should be node");
                var root = mm.createRoot(rootNode.getAttribute("TEXT"));
                var appendChildren = function (xmlNode, modelNode) {
                    for (var i = 0; i < xmlNode.childNodes.length; i++) {
                        var xmlChild = xmlNode.childNodes[i];
                        if (xmlChild.nodeName === "node") {
                            var element = xmlChild;
                            var positionText = element.getAttribute("POSITION");
                            var left = null;
                            switch (positionText) {
                                case "right":
                                    left = false;
                                    break;
                                case "left":
                                    left = true;
                                    break;
                                default:
                            }
                            var modelChild = modelNode.addChild(element.getAttribute("TEXT"), left);
                            appendChildren(element, modelChild);
                        }
                    }
                };
                appendChildren(rootNode, root);
            }
            return mm;
        };
        return MmFileFormat;
    }());
    var InternalMindMapFormat = (function () {
        function InternalMindMapFormat() {
        }
        InternalMindMapFormat.exportModel = function (model) {
            var nodes = new Array();
            var links = new Array();
            var nodeStyles = new Array();
            var nodeId = 0;
            var nodeStyleId = 0;
            function saveNode(node) {
                var id = nodeId;
                nodeId++;
                if (node.text)
                    nodes.push({ id: id, text: node.text, styleId: null });
                node.children.forEach(function (c) {
                    var childId = saveNode(c.child);
                    links.push({
                        from: id,
                        to: childId,
                        left: c.left
                    });
                });
                return id;
            }
            saveNode(model.root);
            var serializeModel = {
                version: 0.1,
                nodes: nodes,
                links: links,
                nodeStyles: nodeStyles
            };
            return serializeModel;
        };
        InternalMindMapFormat.importModel = function (dto) {
            var model = new Model();
            var nodeMap = {};
            var dtoMap = {};
            dto.nodes.forEach(function (n) { return dtoMap[n.id] = n; });
            var rootDto = dto.nodes[0];
            var rootModel = model.createRoot(rootDto.text);
            nodeMap[rootDto.id] = rootModel;
            dto.links.forEach(function (l) {
                var toDto = dtoMap[l.to];
                var fromModel = nodeMap[l.from];
                fromModel.addChild(toDto.text, l.left);
            });
            return model;
        };
        return InternalMindMapFormat;
    }());
    var MindMapStyler = (function () {
        function MindMapStyler() {
        }
        MindMapStyler.configurePresenter = function (presenter) {
            var config = presenter.configuration();
            config.setAutoSizeCells(true);
            config.setAutoSizeCellsOnAdd(true);
            config.setResizeContainer(false);
            config.setHtmlLabels(true);
        };
        MindMapStyler.setupStyles = function (styleSheet) {
            var defNodeStyle = styleSheet.getDefaultVertexStyle();
            defNodeStyle.fillColor = "cornsilk";
            defNodeStyle.strokeColor = "BurlyWood";
            defNodeStyle.shape = ShapeStyle.Rectangle;
            defNodeStyle.fontSize = 14;
            defNodeStyle.fontColor = "black";
            defNodeStyle.shadow = true;
            defNodeStyle.rounded = true;
            defNodeStyle.overflow = Overflow.width;
            defNodeStyle.autoSize = true;
            defNodeStyle.whitespace = Whitespace.wrap;
            this.predefinedNodeStyles.put("", defNodeStyle);
            var pinkyStyle = Utils.clone(defNodeStyle);
            pinkyStyle.fillColor = "#FDECDE";
            pinkyStyle.strokeColor = "#F58527";
            var styleName = "Pinky";
            styleSheet.putCellStyle(styleName, pinkyStyle);
            this.predefinedNodeStyles.put(styleName, pinkyStyle);
            var leafStyle = Utils.clone(defNodeStyle);
            leafStyle.fillColor = "#F4F7EC";
            leafStyle.strokeColor = "#9EBD5D";
            styleName = "Leaf";
            this.predefinedNodeStyles.put(styleName, leafStyle);
            styleSheet.putCellStyle(styleName, leafStyle);
            Constants.rectangleRoundingFactor = 0.35;
            Constants.shadowColor = "rgba(204, 204, 204, 0.8)";
            var eStyle = styleSheet.getDefaultEdgeStyle();
            eStyle.strokeColor = "brown";
            eStyle.curved = true;
            eStyle.startArrow = ArrowStyle.None;
            eStyle.endArrow = ArrowStyle.None;
            eStyle.edge = EdgeKind.TopToSide;
        };
        MindMapStyler.defaultNodeSize = new Rectangle(0, 0, 160, 40);
        MindMapStyler.defaultNodeStyle = null;
        MindMapStyler.defaultLinkStyle = null;
        MindMapStyler.predefinedNodeStyles = new StringDictionary();
        return MindMapStyler;
    }());
    var MindmapLayout = (function (_super) {
        __extends(MindmapLayout, _super);
        function MindmapLayout(graph, model) {
            var _this = _super.call(this, graph) || this;
            _this.model = model;
            return _this;
        }
        MindmapLayout.prototype.execute = function (parent) {
            var _this = this;
            if (parent != null) {
                var offset = this.graph.container.getOffsetSize();
                var width = offset.x - 1;
                var height = offset.y - 1;
                this.model.beginUpdate();
                try {
                    var root = (parent.getChildAt(0).semanticObject);
                    var getChildren = function (node, left) { return node.children.filter(function (c) { return node === root ? c.left === left : true; }).map(function (c) { return c.child; }); };
                    var nodeWeights = new Dictionary();
                    var getNodeWeight = function (node, left) {
                        var result = nodeWeights.get(node);
                        if (result == null) {
                            var children = getChildren(node, left);
                            if (children.length == 0)
                                result = node.view.getHeight();
                            else {
                                result = CloudDiagram._.sum(children, function (c) { return getNodeWeight(c, left); }) + (children.length - 1) * MindmapLayout.yOffset;
                            }
                            if (node != root)
                                nodeWeights.put(node, result);
                        }
                        return result;
                    };
                    var treeHeight = CloudDiagram._.max([getNodeWeight(root, false), getNodeWeight(root, true)]);
                    height = CloudDiagram._.max([height, treeHeight]);
                    var geo = root.view.startChangeGeometry();
                    var bounds = geo.getBounds();
                    var dy = height > bounds.height ? height / 2 - bounds.y - bounds.height / 2 : -bounds.y;
                    geo.translate(width / 2 - bounds.x - bounds.width / 2, dy);
                    this.model.commitGeometryChange(geo);
                    var layoutSide = function (left) {
                        var layoutChildren = function (parent, left) {
                            var parentGeo = parent.view.getGeometry().getBounds();
                            var x = left ? parentGeo.x - MindmapLayout.xOffset : parentGeo.x + parentGeo.width + MindmapLayout.xOffset;
                            var children = getChildren(parent, left);
                            if (children.length > 0) {
                                var childrenHeight = getNodeWeight(parent, left);
                                var y = parentGeo.y + parentGeo.height / 2 - childrenHeight / 2;
                                for (var i = 0; i < children.length; i++) {
                                    var child = children[i];
                                    var geo = child.view.startChangeGeometry();
                                    var bounds = geo.getBounds();
                                    y += getNodeWeight(child, left) / 2 - bounds.height / 2;
                                    geo.translate(left ? x - bounds.x - bounds.width : x - bounds.x, y - bounds.y);
                                    _this.model.commitGeometryChange(geo);
                                    y += nodeWeights.get(child) / 2 + bounds.height / 2 + MindmapLayout.yOffset;
                                    layoutChildren(child, left);
                                }
                            }
                        };
                        layoutChildren(root, left);
                    };
                    layoutSide(true);
                    layoutSide(false);
                }
                finally {
                    this.model.endUpdate();
                }
            }
        };
        MindmapLayout.xOffset = 40;
        MindmapLayout.yOffset = 20;
        return MindmapLayout;
    }(BasicLayout));
    function createMindMap() {
        return new MindMapBehavior();
    }
    CloudDiagram.createMindMap = createMindMap;
    var MindMapStyleSelect = (function () {
        function MindMapStyleSelect(styleName, nodeStyle, onSelect) {
            var _this = this;
            this.styleName = styleName;
            this.nodeStyle = nodeStyle;
            this.onSelect = onSelect;
            this.selectedClass = "selected";
            this.root = document.createElement("a");
            this.root.classList.add("style-button");
            var style = this.root.style;
            this.root.onclick = function () { return _this.onClick(); };
            style.backgroundColor = nodeStyle.fillColor;
            style.borderColor = nodeStyle.strokeColor;
            style.color = nodeStyle.strokeColor;
        }
        MindMapStyleSelect.prototype.select = function (value) {
            if (value)
                this.root.classList.add(this.selectedClass);
            else
                this.root.classList.remove(this.selectedClass);
        };
        MindMapStyleSelect.prototype.onClick = function () {
            var wasSelected = this.root.classList.contains(this.selectedClass);
            if (!wasSelected) {
                this.onSelect(this);
            }
        };
        MindMapStyleSelect.prototype.getRoot = function () {
            return this.root;
        };
        return MindMapStyleSelect;
    }());
    var ChangeStyleDialog = (function () {
        function ChangeStyleDialog(factory, presentationModel, selection) {
            var _this = this;
            this.selection = selection;
            this.presentationModel = presentationModel;
            this.container = factory.createOverlay(this);
            var layout = this.container.stackLayout();
            this.items = [];
            var styles = MindMapStyler.predefinedNodeStyles;
            styles.getKeys().forEach(function (s) {
                var select = new MindMapStyleSelect(s, styles.get(s), function (sel) { return _this.onSelect(sel); });
                _this.items.push(select);
                return layout.append(select);
            });
            this.container.setState(CloudDiagram.OverlayState.Hidden);
        }
        ChangeStyleDialog.prototype.onCloseClick = function () {
            this.close();
        };
        ChangeStyleDialog.prototype.close = function () {
            this.selection.removeSelectionListener();
            this.container.setState(CloudDiagram.OverlayState.Hidden);
        };
        ChangeStyleDialog.prototype.snapToNode = function () {
            var _this = this;
            var bounds = this.node.view.getGeometry().getBounds();
            var point = new Point(bounds.x + bounds.width + 30, bounds.y);
            this.container.moveTo(point);
            var initSel = CloudDiagram._.find(this.items, function (s) { return s.nodeStyle == _this.node.style; });
            this.selectSelector(initSel);
        };
        ChangeStyleDialog.prototype.show = function (node) {
            var _this = this;
            this.node = node;
            this.snapToNode();
            this.container.setState(CloudDiagram.OverlayState.Active);
            this.selection.addSelectionListener(function () { return _this.onSelectionChanged(); });
        };
        ChangeStyleDialog.prototype.onSelectionChanged = function () {
            var views = this.selection.getSelection();
            if (views.length != 1) {
                this.close();
            }
            else {
                this.node = (views[0].semanticObject);
                this.snapToNode();
            }
        };
        ChangeStyleDialog.prototype.onSelect = function (sel) {
            this.selectSelector(sel);
            var style = new AppliedStyle(sel.styleName);
            this.presentationModel.changeNodeStyle(this.node.view, style);
        };
        ChangeStyleDialog.prototype.selectSelector = function (sel) {
            this.items.forEach(function (s) {
                s.select(s === sel);
            });
        };
        return ChangeStyleDialog;
    }());
    var MindMapBehavior = (function () {
        function MindMapBehavior() {
            this.nodeSizeRestriction = {
                minHeight: function () { return 40; },
                maxWidth: function () { return 160; }
            };
            this.allowResize = false;
            this.setupActions();
        }
        Object.defineProperty(MindMapBehavior.prototype, "changeStyleDialog", {
            get: function () {
                if (!this.changeStyleDialog_)
                    this.changeStyleDialog_ = new ChangeStyleDialog(this.overlayFactory, this.presenter.getModel(), this.presenter);
                return this.changeStyleDialog_;
            },
            enumerable: true,
            configurable: true
        });
        MindMapBehavior.prototype.canInsertChild = function (sels) {
            var sel = sels.getSelection();
            if (sel && sel.length == 1 && (sel[0].semanticObject instanceof (Node))) {
                return true;
            }
            return false;
        };
        MindMapBehavior.prototype.canInsertSibling = function (sels) {
            var sel = sels.getSelection();
            if (sel && sel.length === 1 && (sel[0].semanticObject instanceof (Node))) {
                return this.model.root !== sel[0].semanticObject;
            }
            return false;
        };
        MindMapBehavior.prototype.canInsertParent = function (sels) {
            var sel = sels.getSelection();
            if (sel && sel.length == 1 && (sel[0].semanticObject instanceof (Node))) {
                return this.model.root !== sel[0].semanticObject;
            }
            return false;
        };
        MindMapBehavior.prototype.canEditCell = function (sels) {
            var sel = sels.getSelection();
            return (sel && sel.length == 1 && (sel[0].semanticObject instanceof (Node)));
        };
        MindMapBehavior.prototype.canChangeStyle = function (sels) {
            var sel = sels.getSelection();
            return (sel && sel.length == 1 && (sel.every(function (s) { return s.semanticObject instanceof (Node); })));
        };
        MindMapBehavior.prototype.canDeleteCells = function (sels) {
            var sel = sels.getSelection();
            if (sel && sel.length == 1 && (sel.every(function (s) { return s.semanticObject instanceof (Node); })))
                return this.model.root !== sel[0].semanticObject;
            return false;
        };
        MindMapBehavior.prototype.insertChild = function (sels) {
            var sel = sels.getSelection();
            var presentationModel = this.presenter.getModel();
            var parent = sel[0].semanticObject;
            presentationModel.beginUpdate();
            try {
                var left = this.model.root == parent ? parent.children.length % 2 === 1 : false;
                var child = parent.addChild("new node", left);
                var newNode = this.createDefaultNodeView(child);
                this.createDefaultLinkView(parent, child);
                this.presenter.setSelection([newNode]);
                this.relayout(this.presenter.getRootParent());
            }
            finally {
                presentationModel.endUpdate();
            }
        };
        MindMapBehavior.prototype.insertParent = function (sels) {
            var sel = sels.getSelection();
            var grandChild = sel[0].semanticObject;
            var parent = grandChild.parent;
            var presentationModel = this.presenter.getModel();
            presentationModel.beginUpdate();
            try {
                var child = parent.addChildAfter("new node", grandChild);
                var newNode = this.createDefaultNodeView(child);
                this.createDefaultLinkView(parent, child);
                this.removeDefaultLinkView(parent, grandChild);
                parent.removeChild(grandChild);
                child.appendChild(grandChild, null);
                this.createDefaultLinkView(child, grandChild);
                this.presenter.setSelection([newNode]);
                this.relayout(this.presenter.getRootParent());
            }
            finally {
                presentationModel.endUpdate();
            }
        };
        MindMapBehavior.prototype.insertSibling = function (sels) {
            var sel = sels.getSelection();
            var presentationModel = this.presenter.getModel();
            var self = sel[0].semanticObject;
            var parent = self.parent;
            presentationModel.beginUpdate();
            try {
                var child = parent.addChildAfter("new node", self);
                var newNode = this.createDefaultNodeView(child);
                this.createDefaultLinkView(parent, child);
                this.presenter.setSelection([newNode]);
                this.relayout(this.presenter.getRootParent());
            }
            finally {
                presentationModel.endUpdate();
            }
        };
        MindMapBehavior.prototype.deleteCells = function (sels) {
            var _this = this;
            var sel = sels.getSelection();
            var presentationModel = this.presenter.getModel();
            presentationModel.beginUpdate();
            try {
                var removeOne = function (node) {
                    var children = node.children;
                    var parent = node.parent;
                    _this.removeDefaultLinkView(parent, node);
                    _this.removeDefaultNodeView(node);
                    parent.removeChild(node);
                    children.forEach(function (c) { return removeOne(c.child); });
                };
                removeOne(sel[0].semanticObject);
                this.relayout(this.presenter.getRootParent());
            }
            finally {
                presentationModel.endUpdate();
            }
        };
        MindMapBehavior.prototype.startCellEdit = function (sels) {
            var sel = sels.getSelection();
            var node = sel[0].semanticObject;
            this.presenter.editText(node.view);
        };
        MindMapBehavior.prototype.changeStyle = function (sels) {
            var sel = sels.getSelection();
            var elem = (sel[0]);
            var node = elem.semanticObject;
            var dialog = this.changeStyleDialog;
            dialog.show(node);
        };
        MindMapBehavior.prototype.setupActions = function () {
            var _this = this;
            this.actions = [
                behaviorAction("Add Child", 1, KeyCode.tab, KeyModifier.none, function (s) { return _this.canInsertChild(s); }, function (s) { return _this.insertChild(s); }),
                behaviorAction("Insert Parent", 1, KeyCode.tab, KeyModifier.shift, function (sel) { return _this.canInsertParent(sel); }, function (sel) { return _this.insertParent(sel); }),
                behaviorAction("Insert Sibling", 1, KeyCode.enter, KeyModifier.none, function (sel) { return _this.canInsertSibling(sel); }, function (sel) { return _this.insertSibling(sel); }),
                behaviorAction("Delete Node", 1, KeyCode.del, KeyModifier.none, function (sel) { return _this.canDeleteCells(sel); }, function (sel) { return _this.deleteCells(sel); }),
                behaviorAction("Change Text", 2, KeyCode.f2, KeyModifier.none, function (sel) { return _this.canEditCell(sel); }, function (sel) { return _this.startCellEdit(sel); }),
                behaviorAction("Change Style", 2, KeyCode.f4, KeyModifier.none, function (sel) { return _this.canChangeStyle(sel); }, function (sel) { return _this.changeStyle(sel); })
            ];
        };
        MindMapBehavior.prototype.setPresentation = function (presenter) {
            this.presenter = presenter;
            MindMapStyler.setupStyles(presenter.getStylesheet());
            MindMapStyler.configurePresenter(presenter);
        };
        MindMapBehavior.prototype.createDefaultNodeView = function (node, cachedFactory) {
            var factory = cachedFactory ? cachedFactory : this.presenter.getFactory();
            var view = factory.insertNode(this.presenter.getRootParent(), node.text, MindMapStyler.defaultNodeSize, new AppliedStyle(MindMapStyler.defaultNodeStyle), false, this.nodeSizeRestriction);
            node.view = view;
            view.semanticObject = node;
            return view;
        };
        MindMapBehavior.prototype.createDefaultLinkView = function (parent, child, cachedFactory) {
            var factory = cachedFactory ? cachedFactory : this.presenter.getFactory();
            var view = factory.insertLink(this.presenter.getRootParent(), null, parent.view, child.view, new AppliedStyle(MindMapStyler.defaultLinkStyle));
            var link = parent.findChildLink(child);
            link.view = view;
            view.semanticObject = link;
            return view;
        };
        MindMapBehavior.prototype.removeDefaultLinkView = function (parent, oldChild) {
            var link = parent.findChildLink(oldChild);
            this.presenter.getFactory().removeLink(link.view);
            link.view = null;
        };
        MindMapBehavior.prototype.removeDefaultNodeView = function (node) {
            this.presenter.getFactory().removeNode(node.view);
            node.view = null;
        };
        MindMapBehavior.prototype.presentNodeTree = function (model, parent, factory) {
            var _this = this;
            var view = this.createDefaultNodeView(model, factory);
            model.children.forEach(function (c) {
                _this.presentNodeTree(c.child, parent, factory);
                _this.createDefaultLinkView(model, c.child);
            });
            return view;
        };
        MindMapBehavior.prototype.relayout = function (parent) {
            var presentationModel = this.presenter.getModel();
            presentationModel.beginUpdate();
            try {
                new MindmapLayout(this.presenter.getGraphForLegacyCode(), presentationModel).execute(parent);
            }
            finally {
                presentationModel.endUpdate();
            }
        };
        MindMapBehavior.prototype.importModel = function (model) {
            var presentationModel = this.presenter.getModel();
            var factory = this.presenter.getFactory();
            presentationModel.beginUpdate();
            try {
                var parent = this.presenter.getRootParent();
                this.model = model;
                this.presentNodeTree(model.root, parent, factory);
                this.relayout(parent);
            }
            finally {
                presentationModel.endUpdate();
            }
        };
        MindMapBehavior.prototype.bootstrap = function () {
            var model = new Model();
            model.createRoot("Root");
            this.importModel(model);
        };
        MindMapBehavior.prototype.getDiagram = function () {
            return InternalMindMapFormat.exportModel(this.model);
        };
        MindMapBehavior.prototype.load = function (mindMapDto) {
            var model = InternalMindMapFormat.importModel(mindMapDto);
            this.importModel(model);
        };
        MindMapBehavior.prototype.setDockPanelFactory = function (dockPanelFactory) {
            this.overlayFactory = dockPanelFactory;
        };
        MindMapBehavior.prototype.menuCaption = function () {
            return "Mind Map";
        };
        return MindMapBehavior;
    }());
})(CloudDiagram || (CloudDiagram = {}));
var Five;
(function (Five) {
    var Morphing = (function (_super) {
        __extends(Morphing, _super);
        function Morphing(graph, steps, ease, delay) {
            if (steps === void 0) { steps = 6; }
            if (ease === void 0) { ease = 1.5; }
            if (delay === void 0) { delay = 20; }
            var _this = _super.call(this, delay) || this;
            _this.graph = graph;
            _this.steps = steps;
            _this.ease = ease;
            _this.step = 0;
            _this.cells = null;
            return _this;
        }
        Morphing.prototype.updateAnimation = function () {
            var move = new CellStatePreview(this.graph);
            if (this.cells != null) {
                for (var i = 0; i < this.cells.length; i++) {
                    this.animateCell(this.cells[i], move, false);
                }
            }
            else {
                this.animateCell(this.graph.getModel().getRoot(), move, true);
            }
            this.show(move);
            if (move.isEmpty() || this.step++ >= this.steps) {
                this.stopAnimation();
            }
        };
        Morphing.prototype.show = function (move) {
            move.show(null);
        };
        Morphing.prototype.animateCell = function (cell, move, recurse) {
            var state = this.graph.getView().getState(cell);
            var delta = null;
            if (state != null) {
                delta = this.getDelta(state);
                if (Five.Cells.isVertex(cell) && (delta.x != 0 || delta.y != 0)) {
                    var translate = this.graph.view.getTranslate();
                    var scale = this.graph.view.getScale();
                    delta.x += translate.x * scale;
                    delta.y += translate.y * scale;
                    move.moveState(state, -delta.x / this.ease, -delta.y / this.ease);
                }
            }
            if (recurse && !this.stopRecursion(state, delta)) {
                var childCount = Five.Cells.getChildCount(cell);
                for (var i = 0; i < childCount; i++) {
                    this.animateCell(Five.Cells.getChildAt(cell, i), move, recurse);
                }
            }
        };
        Morphing.prototype.stopRecursion = function (state, delta) {
            return delta != null && (delta.x != 0 || delta.y != 0);
        };
        Morphing.prototype.getDelta = function (state) {
            var origin = this.getOriginForCell(state.cell);
            var translate = this.graph.getView().getTranslate();
            var scale = this.graph.getView().getScale();
            var x = state.x / scale - translate.x;
            var y = state.y / scale - translate.y;
            return new Five.Point((origin.x - x) * scale, (origin.y - y) * scale);
        };
        Morphing.prototype.getOriginForCell = function (cell) {
            var result = null;
            if (cell != null) {
                var parent = Five.Cells.getParent(cell);
                var geo = this.graph.getCellGeometry(cell);
                result = this.getOriginForCell(parent);
                if (geo != null) {
                    if (geo.relative) {
                        var pgeo = this.graph.getCellGeometry(parent);
                        if (pgeo != null) {
                            result.x += geo.x * pgeo.width;
                            result.y += geo.y * pgeo.height;
                        }
                    }
                    else {
                        result.x += geo.x;
                        result.y += geo.y;
                    }
                }
            }
            if (result == null) {
                var t = this.graph.view.getTranslate();
                result = new Five.Point(-t.x, -t.y);
            }
            return result;
        };
        return Morphing;
    }(Five.Animation));
    Five.Morphing = Morphing;
    var CellStatePreview = (function () {
        function CellStatePreview(graph) {
            this.graph = graph;
            this.count = 0;
            this.deltas = new Five.Dictionary();
        }
        CellStatePreview.prototype.isEmpty = function () {
            return this.count == 0;
        };
        CellStatePreview.prototype.moveState = function (state, dx, dy, add, includeEdges) {
            if (add === void 0) { add = true; }
            if (includeEdges === void 0) { includeEdges = true; }
            var delta = this.deltas.get(state.cell);
            if (delta == null) {
                delta = { point: new Five.Point(dx, dy), state: state };
                this.deltas.put(state.cell, delta);
                this.count++;
            }
            else if (add) {
                delta.point.x += dx;
                delta.point.y += dy;
            }
            else {
                delta.point.x = dx;
                delta.point.y = dy;
            }
            if (includeEdges) {
                this.addEdges(state);
            }
            return delta.point;
        };
        CellStatePreview.prototype.show = function (visitor) {
            var _this = this;
            this.deltas.visit(function (delta) {
                _this.translateState(delta.state, delta.point.x, delta.point.y);
            });
            this.deltas.visit(function (delta) {
                _this.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);
            });
        };
        CellStatePreview.prototype.translateState = function (state, dx, dy) {
            if (state != null) {
                var model = this.graph.getModel();
                if (Five.Cells.isVertex(state.cell)) {
                    state.view.updateCellState(state);
                    var geo = Five.Cells.getGeometry(state.cell);
                    if ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null)) {
                        state.x += dx;
                        state.y += dy;
                    }
                }
                var childCount = Five.Cells.getChildCount(state.cell);
                for (var i = 0; i < childCount; i++) {
                    this.translateState(state.view.getState(Five.Cells.getChildAt(state.cell, i)), dx, dy);
                }
            }
        };
        CellStatePreview.prototype.revalidateState = function (state, dx, dy, visitor) {
            if (state != null) {
                var model = this.graph.getModel();
                if (Five.Cells.isEdge(state.cell)) {
                    state.view.updateCellState(state);
                }
                var geo = this.graph.getCellGeometry(state.cell);
                var pState = state.view.getState(Five.Cells.getParent(state.cell));
                if ((dx != 0 || dy != 0) && geo != null && geo.relative &&
                    Five.Cells.isVertex(state.cell) && (pState == null ||
                    Five.Cells.isVertex(pState.cell) || this.deltas.get(state.cell) != null)) {
                    state.x += dx;
                    state.y += dy;
                }
                this.graph.cellRenderer.redraw(state);
                if (visitor != null) {
                    visitor(state);
                }
                var childCount = Five.Cells.getChildCount(state.cell);
                for (var i = 0; i < childCount; i++) {
                    this.revalidateState(this.graph.view.getState(Five.Cells.getChildAt(state.cell, i)), dx, dy, visitor);
                }
            }
        };
        CellStatePreview.prototype.addEdges = function (state) {
            var model = this.graph.getModel();
            var edgeCount = Five.Cells.getEdgeCount(state.cell);
            for (var i = 0; i < edgeCount; i++) {
                var s = state.view.getState(Five.Cells.getEdgeAt(state.cell, i));
                if (s != null) {
                    this.moveState(s, 0, 0);
                }
            }
        };
        return CellStatePreview;
    }());
})(Five || (Five = {}));
var Five;
(function (Five) {
    var MouseEventContext = (function () {
        function MouseEventContext(evt, state) {
            this.consumed = false;
            this.evt = null;
            this.graphX = null;
            this.graphY = null;
            this.state = null;
            this.evt = evt;
            this.state = state;
        }
        MouseEventContext.prototype.getEvent = function () {
            return this.evt;
        };
        MouseEventContext.prototype.getSource = function () {
            return Five.Events.getSource(this.evt);
        };
        MouseEventContext.prototype.isSource = function (shape) {
            if (shape != null) {
                return Five.Utils.isAncestorNode(shape.node, this.getSource());
            }
            return false;
        };
        MouseEventContext.prototype.getX = function () {
            return Five.Events.getClientX(this.getEvent());
        };
        MouseEventContext.prototype.getY = function () {
            return Five.Events.getClientY(this.getEvent());
        };
        MouseEventContext.prototype.getGraphX = function () {
            return this.graphX;
        };
        MouseEventContext.prototype.getGraphY = function () {
            return this.graphY;
        };
        MouseEventContext.prototype.getState = function () {
            return this.state;
        };
        MouseEventContext.prototype.getCell = function () {
            var state = this.getState();
            if (state != null) {
                return state.cell;
            }
            return null;
        };
        MouseEventContext.prototype.isPopupTrigger = function () {
            return Five.Events.isPopupTrigger(this.getEvent());
        };
        MouseEventContext.prototype.isConsumed = function () {
            return this.consumed;
        };
        MouseEventContext.prototype.consume = function (preventDefault) {
            if (preventDefault === void 0) { preventDefault = true; }
            if (preventDefault && this.evt.preventDefault) {
                this.evt.preventDefault();
            }
            if (Five.Client.isIe) {
                this.evt.returnValue = true;
            }
            this.consumed = true;
        };
        return MouseEventContext;
    }());
    Five.MouseEventContext = MouseEventContext;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Cardinality;
    (function (Cardinality) {
        Cardinality[Cardinality["Zero"] = 0] = "Zero";
        Cardinality[Cardinality["One"] = 1] = "One";
        Cardinality[Cardinality["Two"] = 2] = "Two";
        Cardinality[Cardinality["Three"] = 3] = "Three";
        Cardinality[Cardinality["Four"] = 4] = "Four";
        Cardinality[Cardinality["Five"] = 5] = "Five";
        Cardinality[Cardinality["Six"] = 6] = "Six";
        Cardinality[Cardinality["Seven"] = 7] = "Seven";
        Cardinality[Cardinality["N"] = 8] = "N";
    })(Cardinality = Five.Cardinality || (Five.Cardinality = {}));
    var Multiplicity = (function () {
        function Multiplicity(source, type, attr, value, min, max, validNeighbors, countError, typeError, validNeighborsAllowed) {
            if (min === void 0) { min = Cardinality.Zero; }
            if (max === void 0) { max = Cardinality.N; }
            if (validNeighborsAllowed === void 0) { validNeighborsAllowed = true; }
            this.type = null;
            this.attr = null;
            this.value = null;
            this.source = null;
            this.min = null;
            this.max = null;
            this.validNeighbors = null;
            this.validNeighborsAllowed = true;
            this.countError = null;
            this.typeError = null;
            this.source = source;
            this.type = type;
            this.attr = attr;
            this.value = value;
            this.min = min;
            this.max = max;
            this.validNeighbors = validNeighbors;
            this.countError = Five.Resources.get(countError) || countError;
            this.typeError = Five.Resources.get(typeError) || typeError;
            this.validNeighborsAllowed = validNeighborsAllowed;
        }
        Multiplicity.prototype.check = function (graph, edge, source, target, sourceOut, targetIn) {
            var error = "";
            if ((this.source && this.checkTerminal(graph, source, edge)) ||
                (!this.source && this.checkTerminal(graph, target, edge))) {
                if (this.countError != null &&
                    ((this.source && (this.max == 0 || (sourceOut >= this.max))) ||
                        (!this.source && (this.max == 0 || (targetIn >= this.max))))) {
                    error += this.countError + "\n";
                }
                if (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0) {
                    var isValid = this.checkNeighbors(graph, edge, source, target);
                    if (!isValid) {
                        error += this.typeError + "\n";
                    }
                }
            }
            return (error.length > 0) ? error : null;
        };
        Multiplicity.prototype.checkNeighbors = function (graph, edge, source, target) {
            var sourceValue = Five.Cells.getValue(source);
            var targetValue = Five.Cells.getValue(target);
            var isValid = !this.validNeighborsAllowed;
            var valid = this.validNeighbors;
            for (var j = 0; j < valid.length; j++) {
                if (this.source &&
                    this.checkType(graph, targetValue, valid[j])) {
                    isValid = this.validNeighborsAllowed;
                    break;
                }
                else if (!this.source &&
                    this.checkType(graph, sourceValue, valid[j])) {
                    isValid = this.validNeighborsAllowed;
                    break;
                }
            }
            return isValid;
        };
        Multiplicity.prototype.checkTerminal = function (graph, terminal, edge) {
            var value = Five.Cells.getValue(terminal);
            return this.checkType(graph, value, this.type, this.attr, this.value);
        };
        Multiplicity.prototype.checkType = function (graph, value, type, attr, attrValue) {
            if (value != null) {
                if (!isNaN(value.nodeType)) {
                    return Five.Utils.isNode(value, type, attr, attrValue);
                }
                else {
                    return value.nodeName === type;
                }
            }
            return false;
        };
        return Multiplicity;
    }());
    Five.Multiplicity = Multiplicity;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ObjectIdentity = (function () {
        function ObjectIdentity() {
        }
        ObjectIdentity.get = function (obj) {
            if (typeof (obj) == "object" && obj[ObjectIdentity.fieldName] == null) {
                var ctor = Five.Utils.getFunctionName(obj.constructor);
                obj[ObjectIdentity.fieldName] = ctor + "#" + ObjectIdentity.counter++;
            }
            return obj[ObjectIdentity.fieldName];
        };
        ObjectIdentity.clear = function (obj) {
            if (typeof (obj) == "object") {
                delete obj[ObjectIdentity.fieldName];
            }
        };
        ObjectIdentity.fieldName = "__ObjectId";
        ObjectIdentity.counter = 0;
        ObjectIdentity.nodeCounter = 0;
        return ObjectIdentity;
    }());
    Five.ObjectIdentity = ObjectIdentity;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Outline = (function () {
        function Outline(source, container) {
            this.outline = null;
            this.graphRenderHint = Five.RenderingHint.Faster;
            this.enabled = true;
            this.showViewport = true;
            this.border = 10;
            this.sizerSize = 8;
            this.labelsVisible = false;
            this.updateOnPan = false;
            this.sizerImage = null;
            this.suspended = false;
            this.source = source;
            if (container != null) {
                this.init(container);
            }
        }
        Outline.prototype.createGraph = function (container) {
            var graph = new Five.Graph(container, this.source.config, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());
            graph.foldingEnabled = false;
            graph.autoScroll = false;
            return graph;
        };
        Outline.prototype.init = function (container) {
            var _this = this;
            this.outline = this.createGraph(container);
            var outlineGraphModelChanged = this.outline.graphModelChanged;
            this.outline.graphModelChanged = function (changes) {
                if (!_this.suspended && _this.outline != null) {
                    outlineGraphModelChanged.apply(_this.outline, [changes]);
                }
            };
            this.outline.labelsVisible = this.labelsVisible;
            this.outline.setEnabled(false);
            this.updateHandler = function () {
                if (!_this.suspended && !_this.active) {
                    _this.update();
                }
            };
            this.source.getModel().onChange.add(this.updateHandler);
            this.outline.addMouseListener(this);
            var view = this.source.getView();
            view.onScale.add(this.updateHandler);
            view.onTranslate.add(this.updateHandler);
            view.onScaleAndTranslate.add(this.updateHandler);
            view.onRootChange.add(this.updateHandler);
            Five.Events.addListener(this.source.container.eventTarget(), 'scroll', this.updateHandler);
            this.panHandler = function () {
                if (_this.updateOnPan) {
                    _this.updateHandler();
                }
            };
            this.source.onPan.add(this.panHandler);
            this.refreshHandler = function () {
                _this.outline.setStylesheet(_this.source.getStylesheet());
                _this.outline.refresh();
            };
            this.source.onRefresh.add(this.refreshHandler);
            this.bounds = new Five.Rectangle(0, 0, 0, 0);
            this.selectionBorder = new Five.RectangleShape(this.bounds, null, Five.Constants.outlineColor, Five.Constants.outlineStrokewidth);
            this.selectionBorder.dialect = this.outline.dialect;
            this.selectionBorder.init(Five.ElementInitializer(this.outline.getView().getOverlayPane()));
            var handler = function (evt) {
                var t = Five.Events.getSource(evt);
                var redirect = function (me) {
                    _this.outline.fireMouseEvent(Five.Events.mouseMove, new Five.MouseEventContext(me));
                };
                var redirect2 = function (me) {
                    Five.Events.removeGestureListeners(t, null, redirect, redirect2);
                    _this.outline.fireMouseEvent(Five.Events.mouseUp, new Five.MouseEventContext(me));
                };
                Five.Events.addGestureListeners(t, null, redirect, redirect2);
                _this.outline.fireMouseEvent(Five.Events.mouseDown, new Five.MouseEventContext(evt));
            };
            Five.Events.addGestureListeners(this.selectionBorder.node, handler);
            this.sizer = this.createSizer();
            this.sizer.init(Five.ElementInitializer(this.outline.getView().getOverlayPane()));
            if (this.enabled) {
                this.sizer.nodeStyle().cursor = 'pointer';
            }
            Five.Events.addGestureListeners(this.sizer.node, handler);
            this.selectionBorder.nodeStyle().display = (this.showViewport) ? '' : 'none';
            this.sizer.nodeStyle().display = this.selectionBorder.nodeStyle().display;
            this.selectionBorder.nodeStyle().cursor = 'move';
            this.update(false);
        };
        Outline.prototype.isEnabled = function () {
            return this.enabled;
        };
        Outline.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        Outline.prototype.setZoomEnabled = function (value) {
            this.sizer.nodeStyle().visibility = (value) ? 'visible' : 'hidden';
        };
        Outline.prototype.refresh = function () {
            this.update(true);
        };
        Outline.prototype.createSizer = function () {
            var sizer;
            if (this.sizerImage != null) {
                sizer = new Five.ImageShape(new Five.Rectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);
                sizer.dialect = this.outline.dialect;
                return sizer;
            }
            else {
                sizer = new Five.RectangleShape(new Five.Rectangle(0, 0, this.sizerSize, this.sizerSize), Five.Constants.outlineHandleFillcolor, Five.Constants.outlineHandleStrokecolor);
                sizer.dialect = this.outline.dialect;
                return sizer;
            }
        };
        Outline.prototype.getSourceContainerSize = function () {
            var scroll = this.source.container.getScroll();
            return new Five.Rectangle(0, 0, scroll.width, scroll.height);
        };
        Outline.prototype.getOutlineOffset = function (scale) {
            return null;
        };
        Outline.prototype.getSourceGraphBounds = function () {
            return this.source.getGraphBounds();
        };
        Outline.prototype.update = function (revalidate) {
            if (revalidate === void 0) { revalidate = false; }
            if (this.source != null && this.outline != null) {
                var sourceScale = this.source.view.scale;
                var scaledGraphBounds = this.getSourceGraphBounds();
                var unscaledGraphBounds = new Five.Rectangle(scaledGraphBounds.x / sourceScale + this.source.panDx, scaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale, scaledGraphBounds.height / sourceScale);
                var sourceClient = this.source.container.getClientSize();
                var unscaledFinderBounds = new Five.Rectangle(0, 0, sourceClient.x / sourceScale, sourceClient.y / sourceScale);
                var union = unscaledGraphBounds.clone();
                union.add(unscaledFinderBounds);
                var size = this.getSourceContainerSize();
                var completeWidth = Math.max(size.width / sourceScale, union.width);
                var completeHeight = Math.max(size.height / sourceScale, union.height);
                var outlineClient = this.outline.container.getClientSize();
                var availableWidth = Math.max(0, outlineClient.x - this.border);
                var availableHeight = Math.max(0, outlineClient.y - this.border);
                var outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);
                var scale = Math.floor(outlineScale * 100) / 100;
                if (scale > 0) {
                    if (this.outline.getView().scale != scale) {
                        this.outline.getView().scale = scale;
                        revalidate = true;
                    }
                    var navView = this.outline.getView();
                    if (navView.currentRoot != this.source.getView().currentRoot) {
                        navView.setCurrentRoot(this.source.getView().currentRoot);
                    }
                    var t = this.source.view.translate;
                    var tx = t.x + this.source.panDx;
                    var ty = t.y + this.source.panDy;
                    var off = this.getOutlineOffset(scale);
                    if (off != null) {
                        tx += off.x;
                        ty += off.y;
                    }
                    if (unscaledGraphBounds.x < 0) {
                        tx = tx - unscaledGraphBounds.x;
                    }
                    if (unscaledGraphBounds.y < 0) {
                        ty = ty - unscaledGraphBounds.y;
                    }
                    if (navView.translate.x != tx || navView.translate.y != ty) {
                        navView.translate.x = tx;
                        navView.translate.y = ty;
                        revalidate = true;
                    }
                    var t2 = navView.translate;
                    scale = this.source.getView().scale;
                    var scale2 = scale / navView.scale;
                    var scale3 = 1.0 / navView.scale;
                    this.bounds = new Five.Rectangle((t2.x - t.x - this.source.panDx) / scale3, (t2.y - t.y - this.source.panDy) / scale3, sourceClient.x / scale2, sourceClient.y / scale2);
                    var sourceScroll = this.source.container.getScroll();
                    this.bounds.x += sourceScroll.x * navView.scale / scale;
                    this.bounds.y += sourceScroll.y * navView.scale / scale;
                    var b;
                    b = this.selectionBorder.bounds;
                    if (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height) {
                        this.selectionBorder.bounds = this.bounds;
                        this.selectionBorder.redraw();
                    }
                    b = this.sizer.bounds;
                    var b2 = new Five.Rectangle(this.bounds.x + this.bounds.width - b.width / 2, this.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);
                    if (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height) {
                        this.sizer.bounds = b2;
                        if (this.sizer.nodeStyle().visibility != 'hidden') {
                            this.sizer.redraw();
                        }
                    }
                    if (revalidate) {
                        this.outline.view.revalidate();
                    }
                }
            }
        };
        Outline.prototype.mouseDown = function (sender, me) {
            if (this.enabled && this.showViewport) {
                var tol = (!Five.Events.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;
                var hit = (this.source.allowHandleBoundsCheck && (Five.Client.isIe || tol > 0)) ?
                    new Five.Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;
                this.zoom = me.isSource(this.sizer) || (hit != null && Five.Utils.intersects(this.bounds, hit));
                this.startX = me.getX();
                this.startY = me.getY();
                this.active = true;
                if (this.source.useScrollbarsForPanning && this.source.container.hasScrollbars()) {
                    var sourceScroll = this.source.container.getScroll();
                    this.dx0 = sourceScroll.x;
                    this.dy0 = sourceScroll.y;
                }
                else {
                    this.dx0 = 0;
                    this.dy0 = 0;
                }
            }
            me.consume();
        };
        Outline.prototype.mouseMove = function (sender, me) {
            if (this.active) {
                this.selectionBorder.nodeStyle().display = (this.showViewport) ? '' : 'none';
                this.sizer.nodeStyle().display = this.selectionBorder.nodeStyle().display;
                var delta = this.getTranslateForEvent(me);
                var dx = delta.x;
                var dy = delta.y;
                var bounds = null;
                if (!this.zoom) {
                    var scale = this.outline.getView().scale;
                    bounds = new Five.Rectangle(this.bounds.x + dx, this.bounds.y + dy, this.bounds.width, this.bounds.height);
                    this.selectionBorder.bounds = bounds;
                    this.selectionBorder.redraw();
                    dx /= scale;
                    dx *= this.source.getView().scale;
                    dy /= scale;
                    dy *= this.source.getView().scale;
                    this.source.panGraph(-dx - this.dx0, -dy - this.dy0);
                }
                else {
                    var client = this.source.container.getClientSize();
                    var viewRatio = client.x / client.y;
                    dy = dx / viewRatio;
                    bounds = new Five.Rectangle(this.bounds.x, this.bounds.y, Math.max(1, this.bounds.width + dx), Math.max(1, this.bounds.height + dy));
                    this.selectionBorder.bounds = bounds;
                    this.selectionBorder.redraw();
                }
                var b = this.sizer.bounds;
                this.sizer.bounds = new Five.Rectangle(bounds.x + bounds.width - b.width / 2, bounds.y + bounds.height - b.height / 2, b.width, b.height);
                if (this.sizer.nodeStyle().visibility != 'hidden') {
                    this.sizer.redraw();
                }
                me.consume();
            }
        };
        Outline.prototype.getTranslateForEvent = function (me) {
            return new Five.Point(me.getX() - this.startX, me.getY() - this.startY);
        };
        Outline.prototype.mouseUp = function (sender, me) {
            if (this.active) {
                var delta = this.getTranslateForEvent(me);
                var dx = delta.x;
                var dy = delta.y;
                if (Math.abs(dx) > 0 || Math.abs(dy) > 0) {
                    if (!this.zoom) {
                        if (!this.source.useScrollbarsForPanning || !this.source.container.hasScrollbars()) {
                            this.source.panGraph(0, 0);
                            dx /= this.outline.getView().scale;
                            dy /= this.outline.getView().scale;
                            var t = this.source.getView().translate;
                            this.source.getView().setTranslate(t.x - dx, t.y - dy);
                        }
                    }
                    else {
                        var w = this.selectionBorder.bounds.width;
                        var scale = this.source.getView().scale;
                        this.source.zoomTo(scale - (dx * scale) / w, false);
                    }
                    this.update();
                    me.consume();
                }
                this.active = false;
            }
        };
        Outline.prototype.destroy = function () {
            if (this.source != null) {
                this.source.onPan.remove(this.panHandler);
                this.source.onRefresh.remove(this.refreshHandler);
                this.source.getModel().onChange.remove(this.updateHandler);
                this.source.getView().onScale.remove(this.updateHandler);
                this.source.getView().onTranslate.remove(this.updateHandler);
                this.source.getView().onScaleAndTranslate.remove(this.updateHandler);
                this.source.getView().onRootChange.remove(this.updateHandler);
                Five.Events.addListener(this.source.container.eventTarget(), 'scroll', this.updateHandler);
                this.source = null;
            }
            if (this.outline != null) {
                this.outline.removeMouseListener(this);
                this.outline.destroy();
                this.outline = null;
            }
            if (this.selectionBorder != null) {
                this.selectionBorder.destroy();
                this.selectionBorder = null;
            }
            if (this.sizer != null) {
                this.sizer.destroy();
                this.sizer = null;
            }
        };
        return Outline;
    }());
    Five.Outline = Outline;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var PanningHandler = (function () {
        function PanningHandler(graph) {
            var _this = this;
            this.useLeftButtonForPanning = false;
            this.usePopupTrigger = true;
            this.ignoreCell = false;
            this.previewEnabled = true;
            this.useGrid = false;
            this.panningEnabled = true;
            this.pinchEnabled = true;
            this.maxScale = 8;
            this.minScale = 0.01;
            this.dx = null;
            this.dy = null;
            this.startX = 0;
            this.startY = 0;
            this.initialScale = null;
            this.onPanStart = new Five.EventListeners();
            this.onPan = new Five.EventListeners();
            this.onPanEnd = new Five.EventListeners();
            if (graph != null)
                this.graph = graph;
            this.graph.addMouseListener(this);
            this.forcePanningHandler = function (e) {
                var evtName = e.eventName;
                var me = e.event;
                if (evtName == Five.Events.mouseDown && _this.isForcePanningEvent(me)) {
                    _this.start(me);
                    _this.active = true;
                    _this.onPanStart.fire(new Five.BasicMouseEvent(me));
                    me.consume();
                }
            };
            this.graph.onFireMouse.add(this.forcePanningHandler);
            this.gestureHandler = function (e) {
                if (_this.isPinchEnabled()) {
                    var evt = e.event;
                    if (!Five.Events.isConsumed(evt) && evt.type == "gesturestart") {
                        _this.initialScale = _this.graph.view.scale;
                        if (!_this.active && _this.mouseDownEvent != null) {
                            _this.start(_this.mouseDownEvent);
                            _this.mouseDownEvent = null;
                        }
                    }
                    else if (evt.type == "gestureend" && _this.initialScale == null) {
                        _this.initialScale = null;
                    }
                    if (_this.initialScale != null) {
                        var value = Math.round(_this.initialScale * 100) / 100;
                        if (_this.minScale != null) {
                            value = Math.max(_this.minScale, value);
                        }
                        if (_this.maxScale != null) {
                            value = Math.min(_this.maxScale, value);
                        }
                        if (_this.graph.view.scale != value) {
                            _this.graph.zoomTo(value);
                            Five.Events.consume(evt);
                        }
                    }
                }
            };
            this.graph.onGesture.add(this.gestureHandler);
        }
        PanningHandler.prototype.isActive = function () {
            return this.active || this.initialScale != null;
        };
        PanningHandler.prototype.isPanningEnabled = function () {
            return this.panningEnabled;
        };
        PanningHandler.prototype.setPanningEnabled = function (value) {
            this.panningEnabled = value;
        };
        PanningHandler.prototype.isPinchEnabled = function () {
            return this.pinchEnabled;
        };
        PanningHandler.prototype.setPinchEnabled = function (value) {
            this.pinchEnabled = value;
        };
        PanningHandler.prototype.isPanningTrigger = function (me) {
            var evt = me.getEvent();
            return (this.useLeftButtonForPanning && me.getState() == null &&
                Five.Events.isLeftMouseButton(evt)) || (Five.Events.isMouseControlDown(evt) &&
                Five.Events.isMouseShiftDown(evt)) || (this.usePopupTrigger && Five.Events.isPopupTrigger(evt));
        };
        PanningHandler.prototype.isForcePanningEvent = function (me) {
            return this.ignoreCell || Five.Events.isMultiTouchEvent(me.getEvent());
        };
        PanningHandler.prototype.mouseDown = function (sender, me) {
            this.mouseDownEvent = me;
            if (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me)) {
                this.start(me);
                this.consumePanningTrigger(me);
            }
        };
        PanningHandler.prototype.start = function (me) {
            var scroll = this.graph.container.getScroll();
            this.dx0 = -scroll.x;
            this.dy0 = -scroll.y;
            this.startX = me.getX();
            this.startY = me.getY();
            this.dx = null;
            this.dy = null;
            this.panningTrigger = true;
        };
        PanningHandler.prototype.consumePanningTrigger = function (me) {
            me.consume();
        };
        PanningHandler.prototype.mouseMove = function (sender, me) {
            this.dx = me.getX() - this.startX;
            this.dy = me.getY() - this.startY;
            if (this.active) {
                if (this.previewEnabled) {
                    if (this.useGrid) {
                        this.dx = this.graph.snap(this.dx);
                        this.dy = this.graph.snap(this.dy);
                    }
                    this.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);
                }
                this.onPan.fire(new Five.BasicMouseEvent(me));
            }
            else if (this.panningTrigger) {
                var tmp = this.active;
                this.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;
                if (!tmp && this.active) {
                    this.onPanStart.fire(new Five.BasicMouseEvent(me));
                }
            }
            if (this.active || this.panningTrigger) {
                me.consume();
            }
        };
        PanningHandler.prototype.mouseUp = function (sender, me) {
            if (this.active) {
                if (this.dx != null && this.dy != null) {
                    if (!this.graph.useScrollbarsForPanning || !this.graph.container.hasScrollbars()) {
                        var scale = this.graph.getView().scale;
                        var t = this.graph.getView().translate;
                        this.graph.panGraph(0, 0);
                        this.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);
                    }
                    me.consume();
                }
                this.onPanEnd.fire(new Five.BasicMouseEvent(me));
            }
            this.panningTrigger = false;
            this.mouseDownEvent = null;
            this.active = false;
            this.dx = null;
            this.dy = null;
        };
        PanningHandler.prototype.panGraph = function (dx, dy) {
            this.graph.getView().setTranslate(dx, dy);
        };
        PanningHandler.prototype.destroy = function () {
            this.graph.removeMouseListener(this);
            this.graph.onFireMouse.remove(this.forcePanningHandler);
            this.graph.onGesture.remove(this.gestureHandler);
        };
        return PanningHandler;
    }());
    Five.PanningHandler = PanningHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var PanningManager = (function () {
        function PanningManager(graph) {
            var _this = this;
            this.graph = graph;
            this.damper = 1 / 6;
            this.delay = 10;
            this.handleMouseOut = true;
            this.border = 0;
            this.active = false;
            this.thread = null;
            this.tdx = 0;
            this.tdy = 0;
            this.t0 = new Five.Point(0, 0);
            this.dx = 0;
            this.dy = 0;
            this.scrollbars = false;
            this.scrollLeft = 0;
            this.scrollTop = 0;
            this.mouseListener =
                {
                    mouseDown: function () { },
                    mouseMove: function () { },
                    mouseUp: function () {
                        if (_this.active)
                            _this.stop();
                    }
                };
            graph.addMouseListener(this.mouseListener);
            Five.Events.addListener(document, "mouseup", function () { if (_this.active)
                _this.stop(); });
            this.createThread = function () {
                _this.scrollbars = graph.container.hasScrollbars();
                var scroll = graph.container.getScroll();
                _this.scrollLeft = scroll.x;
                _this.scrollTop = scroll.y;
                return window.setInterval(Five.Utils.bind(_this, function () {
                    _this.tdx -= _this.dx;
                    _this.tdy -= _this.dy;
                    if (_this.scrollbars) {
                        scroll = graph.container.getScroll();
                        var left = -scroll.x - Math.ceil(_this.dx);
                        var top = -scroll.y - Math.ceil(_this.dy);
                        graph.panGraph(left, top);
                        scroll = graph.container.getScroll();
                        graph.panDx = _this.scrollLeft - scroll.x;
                        graph.panDy = _this.scrollTop - scroll.y;
                        graph.onPan.fire();
                    }
                    else {
                        graph.panGraph(_this.getDx(), _this.getDy());
                    }
                }), _this.delay);
            };
        }
        PanningManager.prototype.isActive = function () {
            return this.active;
        };
        PanningManager.prototype.getDx = function () {
            return Math.round(this.tdx);
        };
        PanningManager.prototype.getDy = function () {
            return Math.round(this.tdy);
        };
        PanningManager.prototype.start = function () {
            this.t0.x = this.graph.view.translate.x;
            this.t0.y = this.graph.view.translate.y;
            this.active = true;
        };
        PanningManager.prototype.panTo = function (x, y, w, h) {
            if (w === void 0) { w = 0; }
            if (h === void 0) { h = 0; }
            if (!this.active) {
                this.start();
            }
            var scroll = this.graph.container.getScroll();
            var client = this.graph.container.getClientSize();
            this.scrollLeft = scroll.x;
            this.scrollTop = scroll.y;
            this.dx = x + w - scroll.x - client.x;
            if (this.dx < 0 && Math.abs(this.dx) < this.border) {
                this.dx = this.border + this.dx;
            }
            else if (this.handleMouseOut) {
                this.dx = Math.max(this.dx, 0);
            }
            else {
                this.dx = 0;
            }
            if (this.dx == 0) {
                this.dx = x - scroll.x;
                if (this.dx > 0 && this.dx < this.border) {
                    this.dx = this.dx - this.border;
                }
                else if (this.handleMouseOut) {
                    this.dx = Math.min(0, this.dx);
                }
                else {
                    this.dx = 0;
                }
            }
            this.dy = y + h - scroll.y - client.y;
            if (this.dy < 0 && Math.abs(this.dy) < this.border) {
                this.dy = this.border + this.dy;
            }
            else if (this.handleMouseOut) {
                this.dy = Math.max(this.dy, 0);
            }
            else {
                this.dy = 0;
            }
            if (this.dy == 0) {
                this.dy = y - scroll.y;
                if (this.dy > 0 && this.dy < this.border) {
                    this.dy = this.dy - this.border;
                }
                else if (this.handleMouseOut) {
                    this.dy = Math.min(0, this.dy);
                }
                else {
                    this.dy = 0;
                }
            }
            if (this.dx != 0 || this.dy != 0) {
                this.dx *= this.damper;
                this.dy *= this.damper;
                if (this.thread == null) {
                    this.thread = this.createThread();
                }
            }
            else if (this.thread != null) {
                window.clearInterval(this.thread);
                this.thread = null;
            }
        };
        PanningManager.prototype.stop = function () {
            if (this.active) {
                this.active = false;
                if (this.thread != null) {
                    window.clearInterval(this.thread);
                    this.thread = null;
                }
                this.tdx = 0;
                this.tdy = 0;
                if (!this.scrollbars) {
                    var px = this.graph.panDx;
                    var py = this.graph.panDy;
                    if (px != 0 || py != 0) {
                        this.graph.panGraph(0, 0);
                        this.graph.view.setTranslate(this.t0.x + px / this.graph.view.scale, this.t0.y + py / this.graph.view.scale);
                    }
                }
                else {
                    this.graph.panDx = 0;
                    this.graph.panDy = 0;
                    this.graph.onPan.fire();
                }
            }
        };
        PanningManager.prototype.destroy = function () {
            this.graph.removeMouseListener(this.mouseListener);
        };
        return PanningManager;
    }());
    Five.PanningManager = PanningManager;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Perimeter = (function () {
        function Perimeter() {
        }
        Perimeter.rectanglePerimeter = function (bounds, vertex, next, orthogonal) {
            var cx = bounds.getCenterX();
            var cy = bounds.getCenterY();
            var dx = next.x - cx;
            var dy = next.y - cy;
            var alpha = Math.atan2(dy, dx);
            var p = new Five.Point(0, 0);
            var pi = Math.PI;
            var pi2 = Math.PI / 2;
            var beta = pi2 - alpha;
            var t = Math.atan2(bounds.height, bounds.width);
            if (alpha < -pi + t || alpha > pi - t) {
                p.x = bounds.x;
                p.y = cy - bounds.width * Math.tan(alpha) / 2;
            }
            else if (alpha < -t) {
                p.y = bounds.y;
                p.x = cx - bounds.height * Math.tan(beta) / 2;
            }
            else if (alpha < t) {
                p.x = bounds.x + bounds.width;
                p.y = cy + bounds.width * Math.tan(alpha) / 2;
            }
            else {
                p.y = bounds.y + bounds.height;
                p.x = cx + bounds.height * Math.tan(beta) / 2;
            }
            if (orthogonal) {
                if (next.x >= bounds.x &&
                    next.x <= bounds.x + bounds.width) {
                    p.x = next.x;
                }
                else if (next.y >= bounds.y &&
                    next.y <= bounds.y + bounds.height) {
                    p.y = next.y;
                }
                if (next.x < bounds.x) {
                    p.x = bounds.x;
                }
                else if (next.x > bounds.x + bounds.width) {
                    p.x = bounds.x + bounds.width;
                }
                if (next.y < bounds.y) {
                    p.y = bounds.y;
                }
                else if (next.y > bounds.y + bounds.height) {
                    p.y = bounds.y + bounds.height;
                }
            }
            return p;
        };
        Perimeter.ellipsePerimeter = function (bounds, vertex, next, orthogonal) {
            var x = bounds.x;
            var y = bounds.y;
            var a = bounds.width / 2;
            var b = bounds.height / 2;
            var cx = x + a;
            var cy = y + b;
            var px = next.x;
            var py = next.y;
            var dx = px - cx;
            var dy = py - cy;
            if (dx === 0 && dy !== 0) {
                return new Five.Point(cx, cy + b * dy / Math.abs(dy));
            }
            else if (dx == 0 && dy == 0) {
                return new Five.Point(px, py);
            }
            if (orthogonal) {
                var ty;
                var tx;
                if (py >= y && py <= y + bounds.height) {
                    ty = py - cy;
                    tx = Math.sqrt(a * a * (1 - (ty * ty) / (b * b))) || 0;
                    if (px <= x) {
                        tx = -tx;
                    }
                    return new Five.Point(cx + tx, py);
                }
                if (px >= x && px <= x + bounds.width) {
                    tx = px - cx;
                    ty = Math.sqrt(b * b * (1 - (tx * tx) / (a * a))) || 0;
                    if (py <= y) {
                        ty = -ty;
                    }
                    return new Five.Point(px, cy + ty);
                }
            }
            var epsilon = 0.01;
            if (Math.abs(dx) < epsilon)
                dx = dx < 0 ? -epsilon : epsilon;
            var d = dy / dx;
            var h = cy - d * cx;
            var e = a * a * d * d + b * b;
            var f = -2 * cx * e;
            var g = a * a * d * d * cx * cx +
                b * b * cx * cx -
                a * a * b * b;
            var det = Math.sqrt(f * f - 4 * e * g);
            var xout1 = (-f + det) / (2 * e);
            var xout2 = (-f - det) / (2 * e);
            var yout1 = d * xout1 + h;
            var yout2 = d * xout2 + h;
            var dist1 = Math.sqrt(Math.pow((xout1 - px), 2)
                + Math.pow((yout1 - py), 2));
            var dist2 = Math.sqrt(Math.pow((xout2 - px), 2)
                + Math.pow((yout2 - py), 2));
            var xout = 0;
            var yout = 0;
            if (dist1 < dist2) {
                xout = xout1;
                yout = yout1;
            }
            else {
                xout = xout2;
                yout = yout2;
            }
            return new Five.Point(xout, yout);
        };
        Perimeter.rhombusPerimeter = function (bounds, vertex, next, orthogonal) {
            var x = bounds.x;
            var y = bounds.y;
            var w = bounds.width;
            var h = bounds.height;
            var cx = x + w / 2;
            var cy = y + h / 2;
            var px = next.x;
            var py = next.y;
            if (cx == px) {
                if (cy > py) {
                    return new Five.Point(cx, y);
                }
                else {
                    return new Five.Point(cx, y + h);
                }
            }
            else if (cy == py) {
                if (cx > px) {
                    return new Five.Point(x, cy);
                }
                else {
                    return new Five.Point(x + w, cy);
                }
            }
            var tx = cx;
            var ty = cy;
            if (orthogonal) {
                if (px >= x && px <= x + w) {
                    tx = px;
                }
                else if (py >= y && py <= y + h) {
                    ty = py;
                }
            }
            if (px < cx) {
                if (py < cy) {
                    return Five.Utils.intersection(px, py, tx, ty, cx, y, x, cy);
                }
                else {
                    return Five.Utils.intersection(px, py, tx, ty, cx, y + h, x, cy);
                }
            }
            else if (py < cy) {
                return Five.Utils.intersection(px, py, tx, ty, cx, y, x + w, cy);
            }
            else {
                return Five.Utils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);
            }
        };
        Perimeter.trianglePerimeter = function (bounds, vertex, next, orthogonal) {
            var direction = null;
            if (vertex != null) {
                direction = vertex.style.direction;
            }
            var vertical = direction == Five.Direction.North || direction == Five.Direction.South;
            var x = bounds.x;
            var y = bounds.y;
            var w = bounds.width;
            var h = bounds.height;
            var cx = x + w / 2;
            var cy = y + h / 2;
            var start;
            var corner;
            var end;
            switch (direction) {
                case Five.Direction.East:
                    start = new Five.Point(x, y);
                    corner = new Five.Point(x + w, cy);
                    end = new Five.Point(x, y + h);
                    break;
                case Five.Direction.North:
                    start = end;
                    corner = new Five.Point(cx, y);
                    end = new Five.Point(x + w, y + h);
                    break;
                case Five.Direction.South:
                    corner = new Five.Point(cx, y + h);
                    end = new Five.Point(x + w, y);
                    break;
                case Five.Direction.West:
                    start = new Five.Point(x + w, y);
                    corner = new Five.Point(x, cy);
                    end = new Five.Point(x + w, y + h);
                    break;
            }
            var dx = next.x - cx;
            var dy = next.y - cy;
            var alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);
            var t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);
            var base = false;
            if (direction == Five.Direction.North || direction == Five.Direction.West) {
                base = alpha > -t && alpha < t;
            }
            else {
                base = alpha < -Math.PI + t || alpha > Math.PI - t;
            }
            var result = null;
            if (base) {
                if (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||
                    (!vertical && next.y >= start.y && next.y <= end.y))) {
                    if (vertical) {
                        result = new Five.Point(next.x, start.y);
                    }
                    else {
                        result = new Five.Point(start.x, next.y);
                    }
                }
                else {
                    switch (direction) {
                        case Five.Direction.North:
                            result = new Five.Point(x + w / 2 + h * Math.tan(alpha) / 2, y + h);
                            break;
                        case Five.Direction.South:
                            result = new Five.Point(x + w / 2 - h * Math.tan(alpha) / 2, y);
                            break;
                        case Five.Direction.West:
                            result = new Five.Point(x + w, y + h / 2 + w * Math.tan(alpha) / 2);
                            break;
                        case Five.Direction.East:
                            result = new Five.Point(x, y + h / 2 - w * Math.tan(alpha) / 2);
                            break;
                    }
                }
            }
            else {
                if (orthogonal) {
                    var pt = new Five.Point(cx, cy);
                    if (next.y >= y && next.y <= y + h) {
                        pt.x = (vertical) ? cx : (direction == Five.Direction.West) ? x + w : x;
                        pt.y = next.y;
                    }
                    else if (next.x >= x && next.x <= x + w) {
                        pt.x = next.x;
                        pt.y = (!vertical) ? cy : ((direction == Five.Direction.North) ? y + h : y);
                    }
                    dx = next.x - pt.x;
                    dy = next.y - pt.y;
                    cx = pt.x;
                    cy = pt.y;
                }
                if ((vertical && next.x <= x + w / 2) ||
                    (!vertical && next.y <= y + h / 2)) {
                    result = Five.Utils.intersection(next.x, next.y, cx, cy, start.x, start.y, corner.x, corner.y);
                }
                else {
                    result = Five.Utils.intersection(next.x, next.y, cx, cy, corner.x, corner.y, end.x, end.y);
                }
            }
            if (result == null) {
                result = new Five.Point(cx, cy);
            }
            return result;
        };
        Perimeter.hexagonPerimeter = function (bounds, vertex, next, orthogonal) {
            var x = bounds.x;
            var y = bounds.y;
            var w = bounds.width;
            var h = bounds.height;
            var cx = bounds.getCenterX();
            var cy = bounds.getCenterY();
            var px = next.x;
            var py = next.y;
            var dx = px - cx;
            var dy = py - cy;
            var alpha = -Math.atan2(dy, dx);
            var pi = Math.PI;
            var pi2 = Math.PI / 2;
            var result = new Five.Point(cx, cy);
            var direction = (vertex != null) ? vertex.style.direction || Five.Direction.East : Five.Direction.East;
            var vertical = direction.valueOf() == Five.Direction.North || direction == Five.Direction.South;
            var a = new Five.Point();
            var b = new Five.Point();
            if ((px < x) && (py < y) || (px < x) && (py > y + h)
                || (px > x + w) && (py < y) || (px > x + w) && (py > y + h)) {
                orthogonal = false;
            }
            if (orthogonal) {
                if (vertical) {
                    if (px == cx) {
                        if (py <= y) {
                            return new Five.Point(cx, y);
                        }
                        else if (py >= y + h) {
                            return new Five.Point(cx, y + h);
                        }
                    }
                    else if (px < x) {
                        if (py == y + h / 4) {
                            return new Five.Point(x, y + h / 4);
                        }
                        else if (py == y + 3 * h / 4) {
                            return new Five.Point(x, y + 3 * h / 4);
                        }
                    }
                    else if (px > x + w) {
                        if (py == y + h / 4) {
                            return new Five.Point(x + w, y + h / 4);
                        }
                        else if (py == y + 3 * h / 4) {
                            return new Five.Point(x + w, y + 3 * h / 4);
                        }
                    }
                    else if (px == x) {
                        if (py < cy) {
                            return new Five.Point(x, y + h / 4);
                        }
                        else if (py > cy) {
                            return new Five.Point(x, y + 3 * h / 4);
                        }
                    }
                    else if (px == x + w) {
                        if (py < cy) {
                            return new Five.Point(x + w, y + h / 4);
                        }
                        else if (py > cy) {
                            return new Five.Point(x + w, y + 3 * h / 4);
                        }
                    }
                    if (py == y) {
                        return new Five.Point(cx, y);
                    }
                    else if (py == y + h) {
                        return new Five.Point(cx, y + h);
                    }
                    if (px < cx) {
                        if ((py > y + h / 4) && (py < y + 3 * h / 4)) {
                            a = new Five.Point(x, y);
                            b = new Five.Point(x, y + h);
                        }
                        else if (py < y + h / 4) {
                            a = new Five.Point(x - Math.floor(0.5 * w), y
                                + Math.floor(0.5 * h));
                            b = new Five.Point(x + w, y - Math.floor(0.25 * h));
                        }
                        else if (py > y + 3 * h / 4) {
                            a = new Five.Point(x - Math.floor(0.5 * w), y
                                + Math.floor(0.5 * h));
                            b = new Five.Point(x + w, y + Math.floor(1.25 * h));
                        }
                    }
                    else if (px > cx) {
                        if ((py > y + h / 4) && (py < y + 3 * h / 4)) {
                            a = new Five.Point(x + w, y);
                            b = new Five.Point(x + w, y + h);
                        }
                        else if (py < y + h / 4) {
                            a = new Five.Point(x, y - Math.floor(0.25 * h));
                            b = new Five.Point(x + Math.floor(1.5 * w), y
                                + Math.floor(0.5 * h));
                        }
                        else if (py > y + 3 * h / 4) {
                            a = new Five.Point(x + Math.floor(1.5 * w), y
                                + Math.floor(0.5 * h));
                            b = new Five.Point(x, y + Math.floor(1.25 * h));
                        }
                    }
                }
                else {
                    if (py == cy) {
                        if (px <= x) {
                            return new Five.Point(x, y + h / 2);
                        }
                        else if (px >= x + w) {
                            return new Five.Point(x + w, y + h / 2);
                        }
                    }
                    else if (py < y) {
                        if (px == x + w / 4) {
                            return new Five.Point(x + w / 4, y);
                        }
                        else if (px == x + 3 * w / 4) {
                            return new Five.Point(x + 3 * w / 4, y);
                        }
                    }
                    else if (py > y + h) {
                        if (px == x + w / 4) {
                            return new Five.Point(x + w / 4, y + h);
                        }
                        else if (px == x + 3 * w / 4) {
                            return new Five.Point(x + 3 * w / 4, y + h);
                        }
                    }
                    else if (py == y) {
                        if (px < cx) {
                            return new Five.Point(x + w / 4, y);
                        }
                        else if (px > cx) {
                            return new Five.Point(x + 3 * w / 4, y);
                        }
                    }
                    else if (py == y + h) {
                        if (px < cx) {
                            return new Five.Point(x + w / 4, y + h);
                        }
                        else if (py > cy) {
                            return new Five.Point(x + 3 * w / 4, y + h);
                        }
                    }
                    if (px == x) {
                        return new Five.Point(x, cy);
                    }
                    else if (px == x + w) {
                        return new Five.Point(x + w, cy);
                    }
                    if (py < cy) {
                        if ((px > x + w / 4) && (px < x + 3 * w / 4)) {
                            a = new Five.Point(x, y);
                            b = new Five.Point(x + w, y);
                        }
                        else if (px < x + w / 4) {
                            a = new Five.Point(x - Math.floor(0.25 * w), y + h);
                            b = new Five.Point(x + Math.floor(0.5 * w), y
                                - Math.floor(0.5 * h));
                        }
                        else if (px > x + 3 * w / 4) {
                            a = new Five.Point(x + Math.floor(0.5 * w), y
                                - Math.floor(0.5 * h));
                            b = new Five.Point(x + Math.floor(1.25 * w), y + h);
                        }
                    }
                    else if (py > cy) {
                        if ((px > x + w / 4) && (px < x + 3 * w / 4)) {
                            a = new Five.Point(x, y + h);
                            b = new Five.Point(x + w, y + h);
                        }
                        else if (px < x + w / 4) {
                            a = new Five.Point(x - Math.floor(0.25 * w), y);
                            b = new Five.Point(x + Math.floor(0.5 * w), y
                                + Math.floor(1.5 * h));
                        }
                        else if (px > x + 3 * w / 4) {
                            a = new Five.Point(x + Math.floor(0.5 * w), y
                                + Math.floor(1.5 * h));
                            b = new Five.Point(x + Math.floor(1.25 * w), y);
                        }
                    }
                }
                var tx = cx;
                var ty = cy;
                if (px >= x && px <= x + w) {
                    tx = px;
                    if (py < cy) {
                        ty = y + h;
                    }
                    else {
                        ty = y;
                    }
                }
                else if (py >= y && py <= y + h) {
                    ty = py;
                    if (px < cx) {
                        tx = x + w;
                    }
                    else {
                        tx = x;
                    }
                }
                result = Five.Utils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);
            }
            else {
                var beta;
                if (vertical) {
                    beta = Math.atan2(h / 4, w / 2);
                    if (alpha == beta) {
                        return new Five.Point(x + w, y + Math.floor(0.25 * h));
                    }
                    else if (alpha == pi2) {
                        return new Five.Point(x + Math.floor(0.5 * w), y);
                    }
                    else if (alpha == (pi - beta)) {
                        return new Five.Point(x, y + Math.floor(0.25 * h));
                    }
                    else if (alpha == -beta) {
                        return new Five.Point(x + w, y + Math.floor(0.75 * h));
                    }
                    else if (alpha == (-pi2)) {
                        return new Five.Point(x + Math.floor(0.5 * w), y + h);
                    }
                    else if (alpha == (-pi + beta)) {
                        return new Five.Point(x, y + Math.floor(0.75 * h));
                    }
                    if ((alpha < beta) && (alpha > -beta)) {
                        a = new Five.Point(x + w, y);
                        b = new Five.Point(x + w, y + h);
                    }
                    else if ((alpha > beta) && (alpha < pi2)) {
                        a = new Five.Point(x, y - Math.floor(0.25 * h));
                        b = new Five.Point(x + Math.floor(1.5 * w), y
                            + Math.floor(0.5 * h));
                    }
                    else if ((alpha > pi2) && (alpha < (pi - beta))) {
                        a = new Five.Point(x - Math.floor(0.5 * w), y
                            + Math.floor(0.5 * h));
                        b = new Five.Point(x + w, y - Math.floor(0.25 * h));
                    }
                    else if (((alpha > (pi - beta)) && (alpha <= pi))
                        || ((alpha < (-pi + beta)) && (alpha >= -pi))) {
                        a = new Five.Point(x, y);
                        b = new Five.Point(x, y + h);
                    }
                    else if ((alpha < -beta) && (alpha > -pi2)) {
                        a = new Five.Point(x + Math.floor(1.5 * w), y
                            + Math.floor(0.5 * h));
                        b = new Five.Point(x, y + Math.floor(1.25 * h));
                    }
                    else if ((alpha < -pi2) && (alpha > (-pi + beta))) {
                        a = new Five.Point(x - Math.floor(0.5 * w), y
                            + Math.floor(0.5 * h));
                        b = new Five.Point(x + w, y + Math.floor(1.25 * h));
                    }
                }
                else {
                    beta = Math.atan2(h / 2, w / 4);
                    if (alpha == beta) {
                        return new Five.Point(x + Math.floor(0.75 * w), y);
                    }
                    else if (alpha == (pi - beta)) {
                        return new Five.Point(x + Math.floor(0.25 * w), y);
                    }
                    else if ((alpha == pi) || (alpha == -pi)) {
                        return new Five.Point(x, y + Math.floor(0.5 * h));
                    }
                    else if (alpha == 0) {
                        return new Five.Point(x + w, y + Math.floor(0.5 * h));
                    }
                    else if (alpha == -beta) {
                        return new Five.Point(x + Math.floor(0.75 * w), y + h);
                    }
                    else if (alpha == (-pi + beta)) {
                        return new Five.Point(x + Math.floor(0.25 * w), y + h);
                    }
                    if ((alpha > 0) && (alpha < beta)) {
                        a = new Five.Point(x + Math.floor(0.5 * w), y
                            - Math.floor(0.5 * h));
                        b = new Five.Point(x + Math.floor(1.25 * w), y + h);
                    }
                    else if ((alpha > beta) && (alpha < (pi - beta))) {
                        a = new Five.Point(x, y);
                        b = new Five.Point(x + w, y);
                    }
                    else if ((alpha > (pi - beta)) && (alpha < pi)) {
                        a = new Five.Point(x - Math.floor(0.25 * w), y + h);
                        b = new Five.Point(x + Math.floor(0.5 * w), y
                            - Math.floor(0.5 * h));
                    }
                    else if ((alpha < 0) && (alpha > -beta)) {
                        a = new Five.Point(x + Math.floor(0.5 * w), y
                            + Math.floor(1.5 * h));
                        b = new Five.Point(x + Math.floor(1.25 * w), y);
                    }
                    else if ((alpha < -beta) && (alpha > (-pi + beta))) {
                        a = new Five.Point(x, y + h);
                        b = new Five.Point(x + w, y + h);
                    }
                    else if ((alpha < (-pi + beta)) && (alpha > -pi)) {
                        a = new Five.Point(x - Math.floor(0.25 * w), y);
                        b = new Five.Point(x + Math.floor(0.5 * w), y
                            + Math.floor(1.5 * h));
                    }
                }
                result = Five.Utils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);
            }
            if (result == null) {
                return new Five.Point(cx, cy);
            }
            return result;
        };
        return Perimeter;
    }());
    Five.Perimeter = Perimeter;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var PopupMenu = (function () {
        function PopupMenu(factoryMethod) {
            this.submenuImage = Five.FileStructure.imageBasePath + "/submenu.gif";
            this.zIndex = 10006;
            this.factoryMethod = null;
            this.useLeftButtonForPopup = false;
            this.enabled = true;
            this.itemCount = 0;
            this.autoExpand = false;
            this.smartSeparators = false;
            this.labels = true;
            this.onShow = new Five.EventListeners();
            this.factoryMethod = factoryMethod;
            if (factoryMethod != null) {
                this.init();
            }
        }
        PopupMenu.prototype.init = function () {
            this.table = document.createElement("table");
            this.table.className = "PopupMenu";
            this.tbody = document.createElement("tbody");
            this.table.appendChild(this.tbody);
            this.div = document.createElement("div");
            this.div.className = "mxPopupMenu";
            this.div.style.display = "inline";
            this.div.style.zIndex = String(this.zIndex);
            this.div.appendChild(this.table);
            Five.Events.disableContextMenu(this.div);
        };
        PopupMenu.prototype.isEnabled = function () {
            return this.enabled;
        };
        PopupMenu.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        PopupMenu.prototype.isPopupTrigger = function (me) {
            return me.isPopupTrigger() || (this.useLeftButtonForPopup && Five.Events.isLeftMouseButton(me.getEvent()));
        };
        PopupMenu.prototype.addItem = function (title, image, funct, parent, iconCls, enabled) {
            var _this = this;
            if (enabled === void 0) { enabled = true; }
            parent = parent || this;
            this.itemCount++;
            if (parent.willAddSeparator) {
                if (parent.containsItems) {
                    this.addSeparator(parent, true);
                }
                parent.willAddSeparator = false;
            }
            parent.containsItems = true;
            var tr = document.createElement("tr");
            tr.className = "PopupMenuItem";
            var col1 = document.createElement("td");
            col1.className = "PopupMenuIcon";
            if (image != null) {
                var img = document.createElement("img");
                img.src = image;
                col1.appendChild(img);
            }
            else if (iconCls != null) {
                var div = document.createElement("div");
                div.className = iconCls;
                col1.appendChild(div);
            }
            tr.appendChild(col1);
            if (this.labels) {
                var col2 = document.createElement("td");
                col2.className = "mxPopupMenuItem" +
                    ((enabled != null && !enabled) ? " mxDisabled" : "");
                Five.Utils.write(col2, title);
                col2.align = "left";
                tr.appendChild(col2);
                var col3 = document.createElement("td");
                col3.className = "mxPopupMenuItem" +
                    ((enabled != null && !enabled) ? " mxDisabled" : "");
                col3.style.paddingRight = "6px";
                col3.style.textAlign = "right";
                tr.appendChild(col3);
                if (parent.div == null) {
                    this.createSubmenu(parent);
                }
            }
            parent.tbody.appendChild(tr);
            if (enabled == null || enabled) {
                Five.Events.addGestureListeners(tr, function (evt) {
                    _this.eventReceiver = tr;
                    if (parent.activeRow != tr && parent.activeRow != parent) {
                        if (parent.activeRow != null &&
                            parent.activeRow.div.parentNode != null) {
                            _this.hideSubmenu(parent);
                        }
                        if (tr.div != null) {
                            _this.showSubmenu(parent, tr);
                            parent.activeRow = tr;
                        }
                    }
                    Five.Events.consume(evt);
                }, function () {
                    if (parent.activeRow != tr && parent.activeRow != parent) {
                        if (parent.activeRow != null &&
                            parent.activeRow.div.parentNode != null) {
                            _this.hideSubmenu(parent);
                        }
                        if (_this.autoExpand && tr.div != null) {
                            _this.showSubmenu(parent, tr);
                            parent.activeRow = tr;
                        }
                    }
                    tr.className = "sPopupMenuItemHover";
                }, function (evt) {
                    if (_this.eventReceiver == tr) {
                        if (parent.activeRow != tr) {
                            _this.hideMenu();
                        }
                        if (funct != null) {
                            funct(evt);
                        }
                    }
                    _this.eventReceiver = null;
                    Five.Events.consume(evt);
                });
                Five.Events.addListener(tr, "mouseout", function () { tr.className = "PopupMenuItem"; });
            }
            return tr;
        };
        PopupMenu.prototype.createSubmenu = function (parent) {
            parent.table = document.createElement("table");
            parent.table.className = "mxPopupMenu";
            parent.tbody = document.createElement("tbody");
            parent.table.appendChild(parent.tbody);
            parent.div = document.createElement("div");
            parent.div.className = "mxPopupMenu";
            parent.div.style.position = "absolute";
            parent.div.style.display = "inline";
            parent.div.style.zIndex = this.zIndex;
            parent.div.appendChild(parent.table);
            var img = document.createElement("img");
            img.setAttribute("src", this.submenuImage);
            var td = parent.firstChild.nextSibling.nextSibling;
            td.appendChild(img);
        };
        PopupMenu.prototype.showSubmenu = function (parent, row) {
            if (row.div != null) {
                row.div.style.left = (parent.div.offsetLeft +
                    row.offsetLeft + row.offsetWidth - 1) + "px";
                row.div.style.top = (parent.div.offsetTop + row.offsetTop) + "px";
                document.body.appendChild(row.div);
                var left = parseInt(row.div.offsetLeft);
                var width = parseInt(row.div.offsetWidth);
                var offset = Five.Utils.getDocumentScrollOrigin(document);
                var b = document.body;
                var d = document.documentElement;
                var right = offset.x + (b.clientWidth || d.clientWidth);
                if (left + width > right) {
                    row.div.style.left = (parent.div.offsetLeft - width + ((Five.Client.isIe) ? 6 : -6)) + "px";
                }
                Five.Utils.fit(row.div);
            }
        };
        PopupMenu.prototype.addSeparator = function (parent, force) {
            if (force === void 0) { force = false; }
            parent = parent || this;
            if (this.smartSeparators && !force) {
                parent.willAddSeparator = true;
            }
            else if (parent.tbody != null) {
                parent.willAddSeparator = false;
                var tr = document.createElement("tr");
                var col1 = document.createElement("td");
                col1.className = "mxPopupMenuIcon";
                col1.style.padding = "0 0 0 0px";
                tr.appendChild(col1);
                var col2 = document.createElement("td");
                col2.style.padding = "0 0 0 0px";
                col2.setAttribute("colSpan", "2");
                var hr = document.createElement("hr");
                hr.setAttribute("size", "1");
                col2.appendChild(hr);
                tr.appendChild(col2);
                parent.tbody.appendChild(tr);
            }
        };
        PopupMenu.prototype.popup = function (x, y, cell, evt) {
            if (this.div != null && this.tbody != null && this.factoryMethod != null) {
                this.div.style.left = x + "px";
                this.div.style.top = y + "px";
                while (this.tbody.firstChild != null) {
                    Five.Events.release(this.tbody.firstChild);
                    this.tbody.removeChild(this.tbody.firstChild);
                }
                this.itemCount = 0;
                this.factoryMethod(this, cell, evt);
                if (this.itemCount > 0) {
                    this.showMenu();
                    this.onShow.fire();
                }
            }
        };
        PopupMenu.prototype.isMenuShowing = function () {
            return this.div != null && this.div.parentNode == document.body;
        };
        PopupMenu.prototype.showMenu = function () {
            if (Five.Client.isIe9) {
                this.div.style.filter = "none";
            }
            document.body.appendChild(this.div);
            Five.Utils.fit(this.div);
        };
        PopupMenu.prototype.hideMenu = function () {
            if (this.div != null) {
                if (this.div.parentNode != null) {
                    this.div.parentNode.removeChild(this.div);
                }
                this.hideSubmenu(this);
                this.containsItems = false;
            }
        };
        PopupMenu.prototype.hideSubmenu = function (parent) {
            if (parent.activeRow != null) {
                this.hideSubmenu(parent.activeRow);
                if ((parent.activeRow).div.parentNode != null) {
                    (parent.activeRow).div.parentNode.removeChild((parent.activeRow).div);
                }
                parent.activeRow = null;
            }
        };
        PopupMenu.prototype.destroy = function () {
            if (this.div != null) {
                Five.Events.release(this.div);
                if (this.div.parentNode != null) {
                    this.div.parentNode.removeChild(this.div);
                }
                this.div = null;
            }
        };
        return PopupMenu;
    }());
    Five.PopupMenu = PopupMenu;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var PopupMenuHandler = (function (_super) {
        __extends(PopupMenuHandler, _super);
        function PopupMenuHandler(graph, factoryMethod) {
            var _this = _super.call(this, factoryMethod) || this;
            _this.graph = null;
            _this.selectOnPopup = true;
            _this.clearSelectionOnBackground = true;
            _this.triggerX = null;
            _this.triggerY = null;
            _this.screenX = null;
            _this.screenY = null;
            if (graph != null) {
                _this.graph = graph;
                _this.graph.addMouseListener(_this);
                _this.gestureHandler = Five.Utils.bind(_this, function () {
                    _this.inTolerance = false;
                });
                _this.graph.onGesture.add(_this.gestureHandler);
                _this.init();
            }
            return _this;
        }
        PopupMenuHandler.prototype.init = function () {
            var _this = this;
            _super.prototype.init.call(this);
            Five.Events.addGestureListeners(this.div, Five.Utils.bind(this, function () {
                _this.graph.tooltipHandler.hide();
            }));
        };
        PopupMenuHandler.prototype.isSelectOnPopup = function (me) {
            return this.selectOnPopup;
        };
        PopupMenuHandler.prototype.mouseDown = function (sender, me) {
            if (this.isEnabled() && !Five.Events.isMultiTouchEvent(me.getEvent())) {
                this.hideMenu();
                this.triggerX = me.getGraphX();
                this.triggerY = me.getGraphY();
                this.screenX = me.getEvent().screenX;
                this.screenY = me.getEvent().screenY;
                this.popupTrigger = this.isPopupTrigger(me);
                this.inTolerance = true;
            }
        };
        PopupMenuHandler.prototype.mouseMove = function (sender, me) {
            if (this.inTolerance && this.screenX != null && this.screenY != null) {
                if (Math.abs(me.getEvent().screenX - this.screenX) > this.graph.tolerance ||
                    Math.abs(me.getEvent().screenY - this.screenY) > this.graph.tolerance) {
                    this.inTolerance = false;
                }
            }
        };
        PopupMenuHandler.prototype.mouseUp = function (sender, me) {
            if (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null) {
                var cell = this.getCellForPopupEvent(me);
                if (this.graph.isEnabled() && this.isSelectOnPopup(me) &&
                    cell != null && !this.graph.isCellSelected(cell)) {
                    this.graph.setSelectionCell(cell);
                }
                else if (this.clearSelectionOnBackground && cell == null) {
                    this.graph.clearSelection();
                }
                this.graph.tooltipHandler.hide();
                var origin = Five.Utils.getScrollOrigin();
                this.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());
                me.consume();
            }
            this.popupTrigger = false;
            this.inTolerance = false;
        };
        PopupMenuHandler.prototype.getCellForPopupEvent = function (me) {
            return me.getCell();
        };
        PopupMenuHandler.prototype.destroy = function () {
            this.graph.removeMouseListener(this);
            this.graph.onGesture.remove(this.gestureHandler);
            Five.PopupMenu.prototype.destroy.apply(this);
        };
        return PopupMenuHandler;
    }(Five.PopupMenu));
    Five.PopupMenuHandler = PopupMenuHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    function graphPresenter(graph) {
        return new GraphPresenter(graph);
    }
    Five.graphPresenter = graphPresenter;
    var GraphPresentationModel = (function () {
        function GraphPresentationModel(graph) {
            this.model = graph.model;
        }
        GraphPresentationModel.prototype.beginUpdate = function () {
            this.model.beginUpdate();
        };
        GraphPresentationModel.prototype.endUpdate = function () {
            this.model.endUpdate();
        };
        GraphPresentationModel.prototype.commitGeometryChange = function (change) {
            var changeObj = change;
            this.model.setGeometry(changeObj.cell, changeObj.geometry);
        };
        GraphPresentationModel.prototype.changeNodeStyle = function (presentationNodeElement, appliedStyle) {
            this.beginUpdate();
            this.model.setStyle(presentationNodeElement, appliedStyle);
            this.endUpdate();
        };
        return GraphPresentationModel;
    }());
    function createGeomtryChange(cell) {
        return new PresentationGeometryChange(cell);
    }
    Five.createGeomtryChange = createGeomtryChange;
    var PresentationGeometryChange = (function () {
        function PresentationGeometryChange(cell) {
            this.cell = cell;
            this.geometry = cell.geometry.clone();
        }
        PresentationGeometryChange.prototype.translate = function (dx, dy) {
            this.geometry.translate(dx, dy);
        };
        PresentationGeometryChange.prototype.getBounds = function () {
            return this.geometry.getBounds();
        };
        return PresentationGeometryChange;
    }());
    var GraphPresentationFactory = (function () {
        function GraphPresentationFactory(graph) {
            this.graph = graph;
        }
        GraphPresentationFactory.prototype.insertNode = function (parent, text, bounds, style, relative, cellSizeRestrictions) {
            return this.graph.insertVertex(parent, null, text, bounds, style, relative, cellSizeRestrictions);
        };
        GraphPresentationFactory.prototype.insertLink = function (parent, text, source, target, style) {
            return this.graph.insertEdge(parent, null, text, source, target, style);
        };
        GraphPresentationFactory.prototype.removeLink = function (link) {
            this.graph.removeCells([link]);
        };
        GraphPresentationFactory.prototype.removeNode = function (node) {
            this.graph.removeCells([node]);
        };
        return GraphPresentationFactory;
    }());
    var GraphPresenter = (function () {
        function GraphPresenter(graph) {
            this.graph = graph;
        }
        GraphPresenter.prototype.configuration = function () {
            return new GraphConfiguration(this.graph);
        };
        GraphPresenter.prototype.getStylesheet = function () {
            return this.graph.getStylesheet();
        };
        GraphPresenter.prototype.getModel = function () {
            return new GraphPresentationModel(this.graph);
        };
        GraphPresenter.prototype.getRootParent = function () {
            return this.graph.getDefaultParent();
        };
        GraphPresenter.prototype.getFactory = function () {
            return new GraphPresentationFactory(this.graph);
        };
        GraphPresenter.prototype.getGraphForLegacyCode = function () {
            return this.graph;
        };
        GraphPresenter.prototype.editText = function (node) {
            this.graph.startEditingAtCell(node);
        };
        GraphPresenter.prototype.setSelection = function (nodes) {
            this.graph.setSelectionCells(nodes);
        };
        GraphPresenter.prototype.getSelection = function () {
            return this.graph.getSelectionCells();
        };
        GraphPresenter.prototype.addSelectionListener = function (handler) {
            this.listener = function (e) { return handler(); };
            this.graph.getSelectionModel().onSelectionChange.add(this.listener);
        };
        GraphPresenter.prototype.removeSelectionListener = function () {
            if (this.listener)
                this.graph.getSelectionModel().onSelectionChange.remove(this.listener);
        };
        return GraphPresenter;
    }());
    var GraphConfiguration = (function () {
        function GraphConfiguration(graph) {
            this.graph = graph;
            return;
        }
        GraphConfiguration.prototype.getAutoSizeCells = function () {
            return this.graph.isAutoSizeCells();
        };
        GraphConfiguration.prototype.setAutoSizeCells = function (value) {
            this.graph.setAutoSizeCells(value);
        };
        GraphConfiguration.prototype.getAutoSizeCellsOnAdd = function () {
            return this.graph.autoSizeCellsOnAdd;
        };
        GraphConfiguration.prototype.setAutoSizeCellsOnAdd = function (value) {
            this.graph.autoSizeCellsOnAdd = value;
        };
        GraphConfiguration.prototype.getResizeContainer = function () {
            return this.graph.resizeContainer;
        };
        GraphConfiguration.prototype.setResizeContainer = function (value) {
            this.graph.resizeContainer = value;
        };
        GraphConfiguration.prototype.getHtmlLabels = function () {
            return this.graph.htmlLabels;
        };
        GraphConfiguration.prototype.setHtmlLabels = function (value) {
            this.graph.htmlLabels = value;
        };
        return GraphConfiguration;
    }());
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Rubberband = (function () {
        function Rubberband(graph) {
            var _this = this;
            this.destroyed = false;
            this.defaultOpacity = 20;
            this.enabled = true;
            this.div = null;
            this.sharedDiv = null;
            this.currentX = 0;
            this.currentY = 0;
            if (graph != null) {
                this.graph = graph;
                this.graph.addMouseListener(this);
                this.forceRubberbandHandler = function (e) {
                    var evtName = e.eventName;
                    var me = e.event;
                    if (evtName == Five.Events.mouseDown && _this.isForceRubberbandEvent(me)) {
                        var offset = _this.graph.container.getAbsoluteOffset();
                        var origin = _this.graph.container.getScrollOrigin();
                        origin.x -= offset.x;
                        origin.y -= offset.y;
                        _this.start(me.getX() + origin.x, me.getY() + origin.y);
                        me.consume(false);
                    }
                };
                this.graph.onFireMouse.add(this.forceRubberbandHandler);
                this.panHandler = function () { return _this.repaint(); };
                this.graph.onPan.add(this.panHandler);
                this.gestureHandler = Five.Utils.bind(this, function () {
                    if (this.first != null) {
                        this.reset();
                    }
                });
                this.graph.onGesture.add(this.gestureHandler);
                if (Five.Client.isIe) {
                    Five.Events.addListener(window, "unload", function () { return _this.destroy(); });
                }
            }
        }
        Rubberband.prototype.isEnabled = function () {
            return this.enabled;
        };
        Rubberband.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        Rubberband.prototype.isForceRubberbandEvent = function (me) {
            return Five.Events.isMouseAltDown(me.getEvent());
        };
        Rubberband.prototype.mouseDown = function (sender, me) {
            if (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&
                me.getState() == null && !Five.Events.isMultiTouchEvent(me.getEvent())) {
                var offset = this.graph.container.getAbsoluteOffset();
                var origin = this.graph.container.getScrollOrigin();
                origin.x -= offset.x;
                origin.y -= offset.y;
                this.start(me.getX() + origin.x, me.getY() + origin.y);
                me.consume(false);
            }
        };
        Rubberband.prototype.start = function (x, y) {
            var _this = this;
            this.first = new Five.Point(x, y);
            var container = this.graph.container;
            function createMouseEvent(evt) {
                var me = new Five.MouseEventContext(evt);
                var pt = container.convertPoint(me.getX(), me.getY());
                me.graphX = pt.x;
                me.graphY = pt.y;
                return me;
            }
            ;
            this.dragHandler = Five.Utils.bind(this, function (evt) {
                _this.mouseMove(_this.graph, createMouseEvent(evt));
            });
            this.dropHandler = Five.Utils.bind(this, function (evt) {
                _this.mouseUp(_this.graph, createMouseEvent(evt));
            });
            if (Five.Client.isFf) {
                Five.Events.addGestureListeners(document, null, this.dragHandler, this.dropHandler);
            }
        };
        Rubberband.prototype.mouseMove = function (sender, me) {
            if (!me.isConsumed() && this.first != null) {
                var offset = this.graph.container.getAbsoluteOffset();
                var origin = this.graph.container.getScrollOrigin();
                origin.x -= offset.x;
                origin.y -= offset.y;
                var x = me.getX() + origin.x;
                var y = me.getY() + origin.y;
                var dx = this.first.x - x;
                var dy = this.first.y - y;
                var tol = this.graph.tolerance;
                if (this.div != null || Math.abs(dx) > tol || Math.abs(dy) > tol) {
                    if (this.div == null) {
                        this.div = this.createShape();
                    }
                    Five.Utils.clearSelection();
                    this.update(x, y);
                    me.consume();
                }
            }
        };
        Rubberband.prototype.createShape = function () {
            if (this.sharedDiv == null) {
                this.sharedDiv = document.createElement("div");
                this.sharedDiv.className = "mxRubberband";
                Five.Utils.setOpacity(this.sharedDiv, this.defaultOpacity);
            }
            this.graph.container.setRubberband(this.sharedDiv);
            return this.sharedDiv;
        };
        Rubberband.prototype.mouseUp = function (sender, me) {
            var execute = this.div != null && this.div.style.display != "none";
            this.reset();
            if (execute) {
                var rect = new Five.Rectangle(this.x, this.y, this.width, this.height);
                this.graph.selectRegion(rect, me.getEvent());
                me.consume();
            }
        };
        Rubberband.prototype.reset = function () {
            if (this.div != null) {
                this.div.parentNode.removeChild(this.div);
            }
            Five.Events.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);
            this.dragHandler = null;
            this.dropHandler = null;
            this.currentX = 0;
            this.currentY = 0;
            this.first = null;
            this.div = null;
        };
        Rubberband.prototype.update = function (x, y) {
            this.currentX = x;
            this.currentY = y;
            this.repaint();
        };
        Rubberband.prototype.repaint = function () {
            if (this.div != null) {
                var x = this.currentX - this.graph.panDx;
                var y = this.currentY - this.graph.panDy;
                this.x = Math.min(this.first.x, x);
                this.y = Math.min(this.first.y, y);
                this.width = Math.max(this.first.x, x) - this.x;
                this.height = Math.max(this.first.y, y) - this.y;
                var dx = 0;
                var dy = 0;
                this.div.style.left = (this.x + dx) + "px";
                this.div.style.top = (this.y + dy) + "px";
                this.div.style.width = Math.max(1, this.width) + "px";
                this.div.style.height = Math.max(1, this.height) + "px";
            }
        };
        Rubberband.prototype.destroy = function () {
            if (!this.destroyed) {
                this.destroyed = true;
                this.graph.removeMouseListener(this);
                this.graph.onFireMouse.remove(this.forceRubberbandHandler);
                this.graph.onPan.remove(this.panHandler);
                this.graph.onGesture.remove(this.gestureHandler);
                this.reset();
                if (this.sharedDiv != null) {
                    this.sharedDiv = null;
                }
            }
        };
        return Rubberband;
    }());
    Five.Rubberband = Rubberband;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var CellStateEvent = (function (_super) {
        __extends(CellStateEvent, _super);
        function CellStateEvent(state) {
            var _this = _super.call(this) || this;
            _this.state = state;
            return _this;
        }
        return CellStateEvent;
    }(Five.BasicEvent));
    Five.CellStateEvent = CellStateEvent;
    var SelectionCellsHandler = (function () {
        function SelectionCellsHandler(graph) {
            this.enabled = true;
            this.maxHandlers = 100;
            this.handlers = null;
            this.onAdd = new Five.EventListeners();
            this.onRemove = new Five.EventListeners();
            this.graph = graph;
            this.handlers = new Five.Dictionary();
            this.graph.addMouseListener(this);
            this.refreshHandler = Five.Utils.bind(this, function () {
                if (this.isEnabled()) {
                    this.refresh();
                }
            });
            this.graph.getSelectionModel().onSelectionChange.add(this.refreshHandler);
            this.graph.getModel().onChange.add(this.refreshHandler);
            this.graph.getView().onScale.add(this.refreshHandler);
            this.graph.getView().onTranslate.add(this.refreshHandler);
            this.graph.getView().onScaleAndTranslate.add(this.refreshHandler);
            this.graph.getView().onRootChange.add(this.refreshHandler);
        }
        SelectionCellsHandler.prototype.isEnabled = function () {
            return this.enabled;
        };
        SelectionCellsHandler.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        SelectionCellsHandler.prototype.reset = function () {
            this.handlers.visit(function (handler) { return handler.reset(); });
        };
        SelectionCellsHandler.prototype.refresh = function () {
            var _this = this;
            var oldHandlers = this.handlers;
            this.handlers = new Five.Dictionary();
            var tmp = this.graph.getSelectionCells();
            for (var i = 0; i < tmp.length; i++) {
                var state = this.graph.view.getState(tmp[i]);
                if (state != null) {
                    var handler = oldHandlers.remove(tmp[i]);
                    if (handler != null) {
                        if (handler.state !== state) {
                            handler.destroy();
                            handler = null;
                        }
                        else {
                            if (handler.refresh != null) {
                                handler.refresh();
                            }
                            handler.redraw();
                        }
                    }
                    if (handler == null) {
                        handler = this.graph.createHandler(state);
                        this.onAdd.fire(new CellStateEvent(state));
                    }
                    if (handler != null) {
                        this.handlers.put(tmp[i], handler);
                    }
                }
            }
            oldHandlers.visit(function (handler) {
                _this.onRemove.fire(new CellStateEvent(handler.state));
                handler.destroy();
            });
        };
        SelectionCellsHandler.prototype.mouseDown = function (sender, me) {
            if (this.graph.isEnabled() && this.isEnabled()) {
                this.handlers.visit(function (handler) {
                    handler.mouseDown(sender, me);
                });
            }
        };
        SelectionCellsHandler.prototype.mouseMove = function (sender, me) {
            if (this.graph.isEnabled() && this.isEnabled()) {
                this.handlers.visit(function (handler) {
                    handler.mouseMove(sender, me);
                });
            }
        };
        SelectionCellsHandler.prototype.mouseUp = function (sender, me) {
            if (this.graph.isEnabled() && this.isEnabled()) {
                this.handlers.visit(function (handler) {
                    handler.mouseUp(sender, me);
                });
            }
        };
        SelectionCellsHandler.prototype.destroy = function () {
            this.graph.removeMouseListener(this);
            if (this.refreshHandler != null) {
                this.graph.getSelectionModel().onSelectionChange.remove(this.refreshHandler);
                this.graph.getModel().onChange.remove(this.refreshHandler);
                this.graph.getView().onScale.remove(this.refreshHandler);
                this.graph.getView().onTranslate.remove(this.refreshHandler);
                this.graph.getView().onScaleAndTranslate.remove(this.refreshHandler);
                this.graph.getView().onRootChange.remove(this.refreshHandler);
                this.refreshHandler = null;
            }
        };
        SelectionCellsHandler.prototype.getHandler = function (cell) {
            return this.handlers.get(cell);
        };
        return SelectionCellsHandler;
    }());
    Five.SelectionCellsHandler = SelectionCellsHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var SelectionChange = (function () {
        function SelectionChange(selectionModel, added, removed) {
            this.selectionModel = selectionModel;
            this.added = (added != null) ? added.slice() : null;
            this.removed = (removed != null) ? removed.slice() : null;
        }
        SelectionChange.prototype.execute = function () {
            window.status = Five.Resources.get(this.selectionModel.updatingSelectionResource) || this.selectionModel.updatingSelectionResource;
            var i;
            if (this.removed != null) {
                for (i = 0; i < this.removed.length; i++) {
                    this.selectionModel.cellRemoved(this.removed[i]);
                }
            }
            if (this.added != null) {
                for (i = 0; i < this.added.length; i++) {
                    this.selectionModel.cellAdded(this.added[i]);
                }
            }
            var tmp = this.added;
            this.added = this.removed;
            this.removed = tmp;
            window.status = Five.Resources.get(this.selectionModel.doneResource) || this.selectionModel.doneResource;
            this.selectionModel.onSelectionChange.fire(new Five.SelectionChangeEvent(this.added, this.removed));
        };
        return SelectionChange;
    }());
    Five.SelectionChange = SelectionChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var SessionNotifyEvent = (function (_super) {
        __extends(SessionNotifyEvent, _super);
        function SessionNotifyEvent(url, xml) {
            var _this = _super.call(this) || this;
            _this.url = url;
            _this.xml = xml;
            return _this;
        }
        return SessionNotifyEvent;
    }(Five.BasicEvent));
    Five.SessionNotifyEvent = SessionNotifyEvent;
    var SessionGetEvent = (function (_super) {
        __extends(SessionGetEvent, _super);
        function SessionGetEvent(url, request) {
            var _this = _super.call(this) || this;
            _this.url = url;
            _this.request = request;
            return _this;
        }
        return SessionGetEvent;
    }(Five.BasicEvent));
    Five.SessionGetEvent = SessionGetEvent;
    var SessionReceiveEvent = (function (_super) {
        __extends(SessionReceiveEvent, _super);
        function SessionReceiveEvent(node) {
            var _this = _super.call(this) || this;
            _this.node = node;
            return _this;
        }
        return SessionReceiveEvent;
    }(Five.BasicEvent));
    Five.SessionReceiveEvent = SessionReceiveEvent;
    var SessionDisconnectEvent = (function (_super) {
        __extends(SessionDisconnectEvent, _super);
        function SessionDisconnectEvent(reason) {
            var _this = _super.call(this) || this;
            _this.reason = reason;
            return _this;
        }
        return SessionDisconnectEvent;
    }(Five.BasicEvent));
    Five.SessionDisconnectEvent = SessionDisconnectEvent;
    var Session = (function () {
        function Session(model, urlInit, urlPoll, urlNotify) {
            var _this = this;
            this.model = null;
            this.urlInit = null;
            this.urlPoll = null;
            this.urlNotify = null;
            this.codec = null;
            this.linefeed = '&#xa;';
            this.escapePostData = true;
            this.significantRemoteChanges = true;
            this.sent = 0;
            this.received = 0;
            this.debug = false;
            this.connected = false;
            this.suspended = false;
            this.polling = false;
            this.onConnect = new Five.EventListeners();
            this.onDisconnect = new Five.EventListeners();
            this.onSuspend = new Five.EventListeners();
            this.onResume = new Five.EventListeners();
            this.onSessionNotify = new Five.EventListeners();
            this.onGet = new Five.EventListeners();
            this.onReceive = new Five.EventListeners();
            this.model = model;
            this.urlInit = urlInit;
            this.urlPoll = urlPoll;
            this.urlNotify = urlNotify;
            this.codec = new Five.Codec();
            this.codec.lookup = function (id) { return model.getCell(parseInt(id)); };
            model.onNotify.add(function (e) {
                var edit = e.edit;
                if (edit != null && (_this.debug || (_this.connected && !_this.suspended))) {
                    _this.notify('<edit>' + _this.encodeChanges(edit.changes, edit.undone) + '</edit>');
                }
            });
        }
        Session.prototype.start = function () {
            var _this = this;
            if (this.debug) {
                this.connected = true;
                this.onConnect.fire();
            }
            else if (!this.connected) {
                this.get(this.urlInit, function () {
                    _this.connected = true;
                    _this.onConnect.fire();
                    _this.poll();
                });
            }
        };
        Session.prototype.suspend = function () {
            if (this.connected && !this.suspended) {
                this.suspended = true;
                this.onSuspend.fire();
            }
        };
        Session.prototype.resume = function (type, attr, value) {
            if (this.connected && this.suspended) {
                this.suspended = false;
                this.onResume.fire();
                if (!this.polling) {
                    this.poll();
                }
            }
        };
        Session.prototype.stop = function (reason) {
            if (this.connected) {
                this.connected = false;
            }
            this.onDisconnect.fire(new SessionDisconnectEvent(reason));
        };
        Session.prototype.poll = function () {
            var _this = this;
            if (this.connected &&
                !this.suspended &&
                this.urlPoll != null) {
                this.polling = true;
                this.get(this.urlPoll, function () { return _this.poll(); });
            }
            else {
                this.polling = false;
            }
        };
        Session.prototype.notify = function (xml, onLoad, onError) {
            if (xml != null && xml.length > 0) {
                if (this.urlNotify != null) {
                    xml = '<message><delta>' + xml + '</delta></message>';
                    if (this.escapePostData) {
                        xml = encodeURIComponent(xml);
                    }
                    Five.Utils.post(this.urlNotify, 'xml=' + xml, onLoad, onError);
                }
                this.sent += xml.length;
                this.onSessionNotify.fire(new SessionNotifyEvent(this.urlNotify, xml));
            }
        };
        Session.prototype.get = function (url, onLoad, onError) {
            var _this = this;
            if (typeof (Five.Utils) != 'undefined') {
                var onErrorWrapper = function (ex) {
                    if (onError != null) {
                        onError(ex);
                    }
                    else {
                        _this.stop(ex);
                    }
                };
                Five.Utils.get(url, function (req) {
                    if (typeof (Five.Utils) != 'undefined') {
                        if (req.isReady() && req.getStatus() != 404) {
                            _this.received += req.getText().length;
                            _this.onGet.fire(new SessionGetEvent(url, req));
                            if (_this.isValidResponse(req)) {
                                if (req.getText().length > 0) {
                                    var node = req.getDocumentElement();
                                    if (node == null) {
                                        onErrorWrapper('Invalid response: ' + req.getText());
                                    }
                                    else {
                                        _this.receive(node);
                                    }
                                }
                                if (onLoad != null) {
                                    onLoad(req);
                                }
                            }
                        }
                        else {
                            onErrorWrapper('Response not ready');
                        }
                    }
                }, function () {
                    onErrorWrapper('Transmission error');
                });
            }
        };
        Session.prototype.isValidResponse = function (req) {
            return true;
        };
        Session.prototype.encodeChanges = function (changes, invert) {
            var xml = '';
            var step = (invert) ? -1 : 1;
            var i0 = (invert) ? changes.length - 1 : 0;
            for (var i = i0; i >= 0 && i < changes.length; i += step) {
                var node = this.codec.encode(changes[i]);
                xml += Five.Utils.getXml(node, this.linefeed);
            }
            return xml;
        };
        Session.prototype.receive = function (node) {
            if (node != null && node.nodeType == Five.NodeType.Element) {
                var ns = node.namespaceURI;
                if (ns != null) {
                    this.model.prefix = ns + '-';
                }
                var child = node.firstChild;
                while (child != null) {
                    var name = child.nodeName.toLowerCase();
                    if (name == 'state') {
                        this.processState(child);
                    }
                    else if (name == 'delta') {
                        this.processDelta(child);
                    }
                    child = child.nextSibling;
                }
                this.onResume.fire(new SessionReceiveEvent(node));
            }
        };
        Session.prototype.processState = function (node) {
            var dec = new Five.Codec(node.ownerDocument);
            dec.decode(node.firstChild, this.model);
        };
        Session.prototype.processDelta = function (node) {
            var edit = node.firstChild;
            while (edit != null) {
                if (edit.nodeName == 'edit') {
                    this.processEdit(edit);
                }
                edit = edit.nextSibling;
            }
        };
        Session.prototype.processEdit = function (node) {
            var changes = this.decodeChanges(node);
            if (changes.length > 0) {
                var edit = this.createUndoableEdit(changes);
                this.model.onChange.fire(new Five.ModelChangeEvent(edit, changes));
                this.model.onUndo.fire(new Five.UndoEvent(edit));
            }
        };
        Session.prototype.createUndoableEdit = function (changes) {
            var edit = new Five.UndoableEdit(this.model, this.significantRemoteChanges);
            edit.changes = changes;
            edit.notify = function () {
                if (edit.source.onChange)
                    edit.source.onChange.fire(new Five.ModelChangeEvent(edit, edit.changes));
                if (edit.source.onNotify)
                    edit.source.onNotify.fire(new Five.NotifyEvent(edit, edit.changes));
            };
            return edit;
        };
        Session.prototype.decodeChanges = function (node) {
            this.codec.document = node.ownerDocument;
            var changes = [];
            node = node.firstChild;
            while (node != null) {
                var change = this.decodeChange(node);
                if (change != null) {
                    changes.push(change);
                }
                node = node.nextSibling;
            }
            return changes;
        };
        Session.prototype.decodeChange = function (node) {
            var change = null;
            if (node.nodeType == Five.NodeType.Element) {
                if (node.nodeName == 'RootChange') {
                    var tmp = new Five.Codec(node.ownerDocument);
                    change = tmp.decode(node);
                }
                else {
                    change = this.codec.decode(node);
                }
                if (change != null) {
                    change.model = this.model;
                    change.execute();
                    if (node.nodeName == 'ChildChange' && change.parent == null) {
                        this.cellRemoved(change.child);
                    }
                }
            }
            return change;
        };
        Session.prototype.cellRemoved = function (cell, codec) {
            this.codec.putObject("" + cell.getId(), cell);
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                this.cellRemoved(Five.Cells.getChildAt(cell, i));
            }
        };
        return Session;
    }());
    Five.Session = Session;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var StackLayout = (function (_super) {
        __extends(StackLayout, _super);
        function StackLayout(graph, horizontal, spacing, x0, y0, border) {
            if (horizontal === void 0) { horizontal = true; }
            if (spacing === void 0) { spacing = 0; }
            if (x0 === void 0) { x0 = 0; }
            if (y0 === void 0) { y0 = 0; }
            if (border === void 0) { border = 0; }
            var _this = _super.call(this, graph) || this;
            _this.marginTop = 0;
            _this.marginLeft = 0;
            _this.marginRight = 0;
            _this.marginBottom = 0;
            _this.keepFirstLocation = false;
            _this.fill = false;
            _this.resizeParent = false;
            _this.resizeLast = false;
            _this.wrap = null;
            _this.borderCollapse = true;
            _this.horizontal = horizontal;
            _this.spacing = spacing;
            _this.x0 = x0;
            _this.y0 = y0;
            _this.border = border;
            return _this;
        }
        StackLayout.prototype.isHorizontal = function () {
            return this.horizontal;
        };
        StackLayout.prototype.moveCell = function (cell, x, y) {
            var model = this.graph.getModel();
            var parent = Five.Cells.getParent(cell);
            var horizontal = this.isHorizontal();
            if (cell != null && parent != null) {
                var last = 0;
                var childCount = Five.Cells.getChildCount(parent);
                var value = (horizontal) ? x : y;
                var pstate = this.graph.getView().getState(parent);
                if (pstate != null) {
                    value -= (horizontal) ? pstate.x : pstate.y;
                }
                var i;
                for (i = 0; i < childCount; i++) {
                    var child = Five.Cells.getChildAt(parent, i);
                    if (child != cell) {
                        var bounds = Five.Cells.getGeometry(child);
                        if (bounds != null) {
                            var tmp = (horizontal) ?
                                bounds.x + bounds.width / 2 :
                                bounds.y + bounds.height / 2;
                            if (last < value && tmp > value) {
                                break;
                            }
                            last = tmp;
                        }
                    }
                }
                var idx = parent.getIndex(cell);
                idx = Math.max(0, i - ((i > idx) ? 1 : 0));
                model.add(parent, cell, idx);
            }
        };
        StackLayout.prototype.getParentSize = function (parent) {
            var model = this.graph.getModel();
            var pgeo = Five.Cells.getGeometry(parent);
            if (this.graph.container != null && ((pgeo == null &&
                model.isLayer(parent)) || parent == this.graph.getView().currentRoot)) {
                var offset = this.graph.container.getOffsetSize();
                pgeo = new Five.Geometry(new Five.Rectangle(0, 0, offset.x - 1, offset.y - 1));
            }
            return pgeo;
        };
        StackLayout.prototype.execute = function (parent) {
            if (parent != null) {
                var pgeo = this.getParentSize(parent);
                var horizontal = this.isHorizontal();
                var model = this.graph.getModel();
                var fillValue = null;
                if (pgeo != null) {
                    if (horizontal)
                        fillValue = pgeo.height - this.marginTop - this.marginBottom;
                    else
                        fillValue = pgeo.width - this.marginLeft - this.marginRight;
                }
                fillValue -= 2 * this.spacing + 2 * this.border;
                var x0 = this.x0 + this.border + this.marginLeft;
                var y0 = this.y0 + this.border + this.marginTop;
                if (this.graph.isSwimlane(parent)) {
                    var style = this.graph.getCellStyle(parent);
                    var start = style.startSize || Five.Constants.defaultStartsize;
                    var horz = !style.portrait;
                    if (pgeo != null) {
                        if (horz) {
                            start = Math.min(start, pgeo.height);
                        }
                        else {
                            start = Math.min(start, pgeo.width);
                        }
                    }
                    if (horizontal === horz) {
                        fillValue -= start;
                    }
                    if (horz) {
                        y0 += start;
                    }
                    else {
                        x0 += start;
                    }
                }
                model.beginUpdate();
                try {
                    var tmp = 0;
                    var last = null;
                    var lastValue = 0;
                    var childCount = Five.Cells.getChildCount(parent);
                    for (var i = 0; i < childCount; i++) {
                        var child = Five.Cells.getChildAt(parent, i);
                        if (!this.isVertexIgnored(child) && this.isVertexMovable(child)) {
                            var geo = Five.Cells.getGeometry(child);
                            if (geo != null) {
                                geo = geo.clone();
                                if (this.wrap != null && last != null) {
                                    if ((horizontal && last.x + last.width +
                                        geo.width + 2 * this.spacing > this.wrap) ||
                                        (!horizontal && last.y + last.height +
                                            geo.height + 2 * this.spacing > this.wrap)) {
                                        last = null;
                                        if (horizontal) {
                                            y0 += tmp + this.spacing;
                                        }
                                        else {
                                            x0 += tmp + this.spacing;
                                        }
                                        tmp = 0;
                                    }
                                }
                                tmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);
                                var sw = 0;
                                if (!this.borderCollapse) {
                                    var childStyle = this.graph.getCellStyle(child);
                                    sw = childStyle.strokeWidth || 1;
                                }
                                if (last != null) {
                                    if (horizontal) {
                                        geo.x = lastValue + this.spacing + Math.floor(sw / 2);
                                    }
                                    else {
                                        geo.y = lastValue + this.spacing + Math.floor(sw / 2);
                                    }
                                }
                                else if (!this.keepFirstLocation) {
                                    if (horizontal) {
                                        geo.x = x0;
                                    }
                                    else {
                                        geo.y = y0;
                                    }
                                }
                                if (horizontal) {
                                    geo.y = y0;
                                }
                                else {
                                    geo.x = x0;
                                }
                                if (this.fill && fillValue != null) {
                                    if (horizontal) {
                                        geo.height = fillValue;
                                    }
                                    else {
                                        geo.width = fillValue;
                                    }
                                }
                                this.setChildGeometry(child, geo);
                                last = geo;
                                if (horizontal) {
                                    lastValue = last.x + last.width + Math.floor(sw / 2);
                                }
                                else {
                                    lastValue = last.y + last.height + Math.floor(sw / 2);
                                }
                            }
                        }
                    }
                    if (this.resizeParent && pgeo != null && last != null &&
                        !this.graph.isCellCollapsed(parent)) {
                        this.updateParentGeometry(parent, pgeo, last);
                    }
                    else if (this.resizeLast && pgeo != null && last != null) {
                        if (horizontal) {
                            last.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;
                        }
                        else {
                            last.height = pgeo.height - last.y - this.spacing - this.marginBottom;
                        }
                    }
                }
                finally {
                    model.endUpdate();
                }
            }
        };
        StackLayout.prototype.setChildGeometry = function (child, geo) {
            this.graph.getModel().setGeometry(child, geo);
        };
        StackLayout.prototype.updateParentGeometry = function (parent, pgeo, last) {
            var horizontal = this.isHorizontal();
            var model = this.graph.getModel();
            pgeo = pgeo.clone();
            if (horizontal) {
                pgeo.width = last.x + last.width + this.spacing + this.marginRight;
            }
            else {
                pgeo.height = last.y + last.height + this.spacing + this.marginBottom;
            }
            model.setGeometry(parent, pgeo);
        };
        return StackLayout;
    }(Five.BasicLayout));
    Five.StackLayout = StackLayout;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var Stencil = (function () {
        function Stencil() {
            this.defaultLocalized = false;
            this.desc = null;
            this.constraints = null;
            this.aspect = null;
            this.w0 = 100;
            this.h0 = 100;
            this.bgNode = null;
            this.fgNode = null;
            this.strokewidth = null;
        }
        Stencil.prototype.drawShape = function (canvas, shape, x, y, w, h) {
            this.drawChildren(canvas, shape, x, y, w, h, this.bgNode, false);
            this.drawChildren(canvas, shape, x, y, w, h, this.fgNode, true);
        };
        Stencil.prototype.drawChildren = function (canvas, shape, x, y, w, h, node, disableShadow) {
            if (node != null && w > 0 && h > 0) {
                var direction = shape.style.direction;
                var aspect = this.computeAspect(x, y, w, h, direction);
                var minScale = Math.min(aspect.width, aspect.height);
                var sw = (this.strokewidth === "inherit") ?
                    shape.style.strokeWidth : Number(this.strokewidth) * minScale;
                canvas.setStrokeWidth(sw);
                var tmp = node.firstChild;
                while (tmp != null) {
                    if (tmp.nodeType == Five.NodeType.Element) {
                        this.drawNode(canvas, shape, tmp, aspect, disableShadow);
                    }
                    tmp = tmp.nextSibling;
                }
            }
        };
        Stencil.prototype.drawNode = function (canvas, shape, node, aspect, disableShadow) {
            var name = node.nodeName;
            var x0 = aspect.x;
            var y0 = aspect.y;
            var sx = aspect.width;
            var sy = aspect.height;
            var minScale = Math.min(sx, sy);
            if (name === "save") {
                canvas.save();
            }
            else if (name === "restore") {
                canvas.restore();
            }
            else if (name === "path") {
                canvas.begin();
                var childNode = node.firstChild;
                while (childNode != null) {
                    if (childNode.nodeType === Five.NodeType.Element) {
                        this.drawNode(canvas, shape, childNode, aspect, disableShadow);
                    }
                    childNode = (childNode.nextSibling);
                }
            }
            else if (name === "close") {
                canvas.close();
            }
            else if (name === "move") {
                canvas.moveTo(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy);
            }
            else if (name == "line") {
                canvas.lineTo(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy);
            }
            else if (name == "quad") {
                canvas.quadTo(x0 + Number(node.getAttribute("x1")) * sx, y0 + Number(node.getAttribute("y1")) * sy, x0 + Number(node.getAttribute("x2")) * sx, y0 + Number(node.getAttribute("y2")) * sy);
            }
            else if (name == "curve") {
                canvas.curveTo(x0 + Number(node.getAttribute("x1")) * sx, y0 + Number(node.getAttribute("y1")) * sy, x0 + Number(node.getAttribute("x2")) * sx, y0 + Number(node.getAttribute("y2")) * sy, x0 + Number(node.getAttribute("x3")) * sx, y0 + Number(node.getAttribute("y3")) * sy);
            }
            else if (name == "arc") {
                canvas.arcTo(Number(node.getAttribute("rx")) * sx, Number(node.getAttribute("ry")) * sy, Number(node.getAttribute("x-axis-rotation")), Number(node.getAttribute("large-arc-flag")), Number(node.getAttribute("sweep-flag")), x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy);
            }
            else if (name == "rect") {
                canvas.rect(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy, Number(node.getAttribute("w")) * sx, Number(node.getAttribute("h")) * sy);
            }
            else if (name == "roundrect") {
                var arcsize = Number(node.getAttribute("arcsize"));
                if (arcsize == 0) {
                    arcsize = Five.Constants.rectangleRoundingFactor * 100;
                }
                var w = Number(node.getAttribute("w")) * sx;
                var h = Number(node.getAttribute("h")) * sy;
                var factor = Number(arcsize) / 100;
                var r = Math.min(w * factor, h * factor);
                canvas.roundrect(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy, w, h, r, r);
            }
            else if (name == "ellipse") {
                canvas.ellipse(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy, Number(node.getAttribute("w")) * sx, Number(node.getAttribute("h")) * sy);
            }
            else if (name == "image") {
                var src = this.evaluateAttribute(node, "src", shape);
                canvas.image(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy, Number(node.getAttribute("w")) * sx, Number(node.getAttribute("h")) * sy, src, false, node.getAttribute("flipH") == "1", node.getAttribute("flipV") == "1");
            }
            else if (name == "text") {
                var str = this.evaluateTextAttribute(node, "str", shape);
                var rotation = node.getAttribute("vertical") == "1" ? -90 : 0;
                if (node.getAttribute("align-shape") == "0") {
                    var dr = shape.rotation;
                    var flipH = shape.style.flipH;
                    var flipV = shape.style.flipV;
                    if (flipH && flipV) {
                        rotation -= dr;
                    }
                    else if (flipH || flipV) {
                        rotation += dr;
                    }
                    else {
                        rotation -= dr;
                    }
                }
                rotation -= parseInt(node.getAttribute("rotation"));
                canvas.text(x0 + Number(node.getAttribute("x")) * sx, y0 + Number(node.getAttribute("y")) * sy, 0, 0, str, Five.HorizontalAlign[node.getAttribute("align")] || Five.HorizontalAlign.Left, Five.VerticalAlign[node.getAttribute("valign")] || Five.VerticalAlign.Top, false, "", null, false, rotation);
            }
            else if (name == "include-shape") {
                var stencil = Five.StencilRegistry.getStencil(node.getAttribute("name"));
                if (stencil != null) {
                    var x = x0 + Number(node.getAttribute("x")) * sx;
                    var y = y0 + Number(node.getAttribute("y")) * sy;
                    var w = Number(node.getAttribute("w")) * sx;
                    var h = Number(node.getAttribute("h")) * sy;
                    stencil.drawShape(canvas, shape, x, y, w, h);
                }
            }
            else if (name == "fillstroke") {
                canvas.fillAndStroke();
            }
            else if (name == "fill") {
                canvas.fill();
            }
            else if (name == "stroke") {
                canvas.stroke();
            }
            else if (name == "strokewidth") {
                var s = (node.getAttribute("fixed") == "1") ? 1 : minScale;
                canvas.setStrokeWidth(Number(node.getAttribute("width")) * s);
            }
            else if (name == "dashed") {
                canvas.setDashed(node.getAttribute("dashed") == "1");
            }
            else if (name == "dashpattern") {
                var value = node.getAttribute("pattern");
                if (value != null) {
                    var tmp = value.split(" ");
                    var pat = [];
                    for (var i = 0; i < tmp.length; i++) {
                        if (tmp[i].length > 0) {
                            pat.push(Number(tmp[i]) * minScale);
                        }
                    }
                    value = pat.join(" ");
                    canvas.setDashPattern(value);
                }
            }
            else if (name == "strokecolor") {
                canvas.setStrokeColor(node.getAttribute("color"));
            }
            else if (name == "linecap") {
                canvas.setLineCap(node.getAttribute("cap"));
            }
            else if (name == "linejoin") {
                canvas.setLineJoin(node.getAttribute("join"));
            }
            else if (name == "miterlimit") {
                canvas.setMiterLimit(Number(node.getAttribute("limit")));
            }
            else if (name == "fillcolor") {
                canvas.setFillColor(node.getAttribute("color"));
            }
            else if (name == "alpha") {
                canvas.setAlpha(+node.getAttribute("alpha"));
            }
            else if (name == "fontcolor") {
                canvas.setFontColor(node.getAttribute("color"));
            }
            else if (name == "fontstyle") {
                canvas.setFontStyle(+node.getAttribute("style"));
            }
            else if (name == "fontfamily") {
                canvas.setFontFamily(node.getAttribute("family"));
            }
            else if (name == "fontsize") {
                canvas.setFontSize(Number(node.getAttribute("size")) * minScale);
            }
            if (disableShadow && (name == "fillstroke" || name == "fill" || name == "stroke")) {
                disableShadow = false;
                canvas.setShadow(false);
            }
        };
        Stencil.prototype.computeAspect = function (x, y, w, h, direction) {
            var x0 = x;
            var y0 = y;
            var sx = w / this.w0;
            var sy = h / this.h0;
            var inverse = (direction == Five.Direction.North || direction == Five.Direction.South);
            if (inverse) {
                sy = w / this.h0;
                sx = h / this.w0;
                var delta = (w - h) / 2;
                x0 += delta;
                y0 -= delta;
            }
            if (this.aspect == "fixed") {
                sy = Math.min(sx, sy);
                sx = sy;
                if (inverse) {
                    x0 += (h - this.w0 * sx) / 2;
                    y0 += (w - this.h0 * sy) / 2;
                }
                else {
                    x0 += (w - this.w0 * sx) / 2;
                    y0 += (h - this.h0 * sy) / 2;
                }
            }
            return new Five.Rectangle(x0, y0, sx, sy);
        };
        Stencil.prototype.evaluateAttribute = function (node, attribute, shape) {
            var result = node.getAttribute(attribute);
            if (result == null) {
                var text = Five.Utils.getTextContent(node);
                if (text != null && Stencil.allowEval) {
                    var funct = Five.Utils.eval(text);
                    if (typeof (funct) == "function") {
                        result = funct(shape);
                    }
                }
            }
            return result;
        };
        Stencil.prototype.evaluateTextAttribute = function (node, attribute, state) {
            var result = this.evaluateAttribute(node, attribute, state);
            var loc = node.getAttribute("localized");
            if ((Stencil.defaultLocalized && loc == null) || loc == "1") {
                result = Five.Resources.get(result);
            }
            return result;
        };
        Stencil.allowEval = true;
        Stencil.defaultLocalized = false;
        return Stencil;
    }());
    Five.Stencil = Stencil;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var StencilRegistry = (function () {
        function StencilRegistry() {
        }
        StencilRegistry.addStencil = function (name, stencil) {
            StencilRegistry.stencils[name] = stencil;
        };
        StencilRegistry.getStencil = function (name) {
            return StencilRegistry.stencils[name];
        };
        StencilRegistry.stencils = [];
        return StencilRegistry;
    }());
    Five.StencilRegistry = StencilRegistry;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var StyleChange = (function () {
        function StyleChange(model, cell, style) {
            this.model = model;
            this.cell = cell;
            this.style = style;
            this.previous = style;
        }
        StyleChange.prototype.execute = function () {
            this.style = this.previous;
            this.previous = this.model.styleForCellChanged(this.cell, this.previous);
        };
        return StyleChange;
    }());
    Five.StyleChange = StyleChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var StyleRegistry = (function () {
        function StyleRegistry() {
        }
        StyleRegistry.addEdge = function (kind, style) {
            StyleRegistry.edges[kind] = style;
        };
        StyleRegistry.addPerimeter = function (kind, style) {
            StyleRegistry.perimeters[kind] = style;
        };
        StyleRegistry.getEdge = function (kind) {
            return StyleRegistry.edges[kind];
        };
        StyleRegistry.getPerimeter = function (kind) {
            return StyleRegistry.perimeters[kind];
        };
        StyleRegistry.edges = {};
        StyleRegistry.perimeters = {};
        return StyleRegistry;
    }());
    Five.StyleRegistry = StyleRegistry;
    StyleRegistry.addEdge(Five.EdgeKind.Elbow, Five.EdgeStyle.elbowConnector);
    StyleRegistry.addEdge(Five.EdgeKind.EntityRelation, Five.EdgeStyle.entityRelation);
    StyleRegistry.addEdge(Five.EdgeKind.Loop, Five.EdgeStyle.loop);
    StyleRegistry.addEdge(Five.EdgeKind.Sidetoside, Five.EdgeStyle.sideToSide);
    StyleRegistry.addEdge(Five.EdgeKind.Toptobottom, Five.EdgeStyle.topToBottom);
    StyleRegistry.addEdge(Five.EdgeKind.TopToSide, Five.EdgeStyle.topToSide);
    StyleRegistry.addEdge(Five.EdgeKind.Orthogonal, Five.EdgeStyle.orthConnector);
    StyleRegistry.addEdge(Five.EdgeKind.Segment, Five.EdgeStyle.segmentConnector);
    StyleRegistry.addPerimeter(Five.PerimeterStyle.Ellipse, Five.Perimeter.ellipsePerimeter);
    StyleRegistry.addPerimeter(Five.PerimeterStyle.Rectangle, Five.Perimeter.rectanglePerimeter);
    StyleRegistry.addPerimeter(Five.PerimeterStyle.Rhombus, Five.Perimeter.rhombusPerimeter);
    StyleRegistry.addPerimeter(Five.PerimeterStyle.Triangle, Five.Perimeter.trianglePerimeter);
    StyleRegistry.addPerimeter(Five.PerimeterStyle.Hexagon, Five.Perimeter.hexagonPerimeter);
})(Five || (Five = {}));
var Five;
(function (Five) {
    var SvgCanvas2D = (function (_super) {
        __extends(SvgCanvas2D, _super);
        function SvgCanvas2D(root, styleEnabled) {
            var _this = _super.call(this) || this;
            _this.pointerEvents = true;
            _this.gradients = [];
            _this.defs = null;
            _this.strokeTolerance = 0;
            _this.pointerEventsValue = "all";
            _this.blockImagePointerEvents = false;
            _this.node = null;
            _this.textEnabled = true;
            _this.foEnabled = true;
            _this.fontMetricsPadding = 10;
            _this.lineHeightCorrection = 1.05;
            _this.foAltText = "[Object]";
            _this.matchHtmlAlignment = true;
            _this.refCount = 0;
            _this.root = root;
            _this.styleEnabled = (styleEnabled != null) ? styleEnabled : false;
            var svg = null;
            if (root.ownerDocument != document) {
                var node = root;
                while (node != null && node.nodeName != "svg") {
                    node = node.parentNode;
                }
                svg = node;
            }
            if (svg != null) {
                var tmp = svg.getElementsByTagName("defs");
                if (tmp.length > 0) {
                    _this.defs = svg.getElementsByTagName("defs")[0];
                }
                if (_this.defs == null) {
                    _this.defs = _this.createElement("defs");
                    if (svg.firstChild != null) {
                        svg.insertBefore(_this.defs, svg.firstChild);
                    }
                    else {
                        svg.appendChild(_this.defs);
                    }
                }
                if (_this.styleEnabled) {
                    _this.defs.appendChild(_this.createStyle());
                }
            }
            return _this;
        }
        SvgCanvas2D.prototype.createGElement = function (className) {
            var result = this.createElement("g");
            result.id = className + "#" + Five.ObjectIdentity.nodeCounter++;
            return result;
        };
        SvgCanvas2D.prototype.createElement = function (tagName, namespace) {
            if (namespace === void 0) { namespace = null; }
            if (this.root.ownerDocument.createElementNS != null) {
                return this.root.ownerDocument.createElementNS(namespace || Five.Constants.nsSvg, tagName);
            }
            else {
                var elt = this.root.ownerDocument.createElement(tagName);
                if (namespace != null) {
                    elt.setAttribute("xmlns", namespace);
                }
                return elt;
            }
        };
        SvgCanvas2D.prototype.createStyle = function () {
            var style = this.createElement("style");
            style.setAttribute("type", "text/css");
            Five.Utils.write(style, "svg{font-family:" + Five.Constants.defaultFontFamily +
                ";font-size:" + Five.Constants.defaultFontSize +
                ";fill:none;stroke-miterlimit:10}");
            return style;
        };
        SvgCanvas2D.prototype.createSvgRect = function () {
            return this.createElement("rect");
        };
        SvgCanvas2D.prototype.rect = function (x, y, w, h) {
            var s = this.state;
            var n = this.createSvgRect();
            n.x.baseVal.value = this.format1((x + s.dx) * s.scale);
            n.y.baseVal.value = this.format1((y + s.dy) * s.scale);
            n.width.baseVal.value = this.format1(w * s.scale);
            n.height.baseVal.value = this.format1(h * s.scale);
            this.node = n;
        };
        SvgCanvas2D.prototype.roundrect = function (x, y, w, h, dx, dy) {
            this.rect(x, y, w, h);
            if (dx > 0) {
                this.node.setAttribute("rx", "" + this.format1(dx * this.state.scale));
            }
            if (dy > 0) {
                this.node.setAttribute("ry", "" + this.format1(dy * this.state.scale));
            }
        };
        SvgCanvas2D.prototype.ellipse = function (x, y, w, h) {
            var s = this.state;
            var n = this.createElement("ellipse");
            n.cx.baseVal.value = Math.round((x + w / 2 + s.dx) * s.scale);
            n.cy.baseVal.value = Math.round((y + h / 2 + s.dy) * s.scale);
            n.rx.baseVal.value = w / 2 * s.scale;
            n.ry.baseVal.value = h / 2 * s.scale;
            this.node = n;
        };
        SvgCanvas2D.prototype.image = function (x, y, w, h, src, aspect, flipH, flipV) {
            if (aspect === void 0) { aspect = true; }
            if (flipH === void 0) { flipH = false; }
            if (flipV === void 0) { flipV = false; }
            src = this.converter.convert(src);
            var s = this.state;
            x += s.dx;
            y += s.dy;
            var node = this.createElement("image");
            node.setAttribute("x", "" + this.format1(x * s.scale));
            node.setAttribute("y", "" + this.format1(y * s.scale));
            node.setAttribute("width", "" + this.format1(w * s.scale));
            node.setAttribute("height", "" + this.format1(h * s.scale));
            if (node.setAttributeNS == null) {
                node.setAttribute("xlink:href", src);
            }
            else {
                node.setAttributeNS(Five.Constants.nsXlink, "xlink:href", src);
            }
            if (!aspect) {
                node.setAttribute("preserveAspectRatio", "none");
            }
            if (s.alpha < 1) {
                node.setAttribute("opacity", "" + s.alpha);
            }
            var tr = this.state.transform || "";
            if (flipH || flipV) {
                var sx = 1;
                var sy = 1;
                var dx = 0;
                var dy = 0;
                if (flipH) {
                    sx = -1;
                    dx = -w - 2 * x;
                }
                if (flipV) {
                    sy = -1;
                    dy = -h - 2 * y;
                }
                tr += "scale(" + sx + "," + sy + ")translate(" + dx + "," + dy + ")";
            }
            if (tr.length > 0) {
                node.setAttribute("transform", tr);
            }
            if (!this.pointerEvents) {
                node.setAttribute("pointer-events", "none");
            }
            this.root.appendChild(node);
            if (this.blockImagePointerEvents) {
                node.setAttribute("style", "pointer-events:none");
                node = this.createSvgRect();
                node.setAttribute("visibility", "hidden");
                node.setAttribute("pointer-events", "fill");
                node.setAttribute("x", "" + this.format1(x * s.scale));
                node.setAttribute("y", "" + this.format1(y * s.scale));
                node.setAttribute("width", "" + this.format1(w * s.scale));
                node.setAttribute("height", "" + this.format1(h * s.scale));
                this.root.appendChild(node);
            }
        };
        SvgCanvas2D.prototype.text = function (x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation) {
            if (this.textEnabled && str != null) {
                rotation = (rotation != null) ? rotation : 0;
                var s = this.state;
                x += s.dx;
                y += s.dy;
                if (this.foEnabled && format == "html") {
                    this.foreignObjectText(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, s);
                }
                else {
                    this.plainText(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation);
                }
            }
        };
        SvgCanvas2D.prototype.foreignObjectText = function (x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, s) {
            var style = "vertical-align:top;";
            if (clip) {
                style += "overflow:hidden;max-height:" + Math.round(h) + "px;width:" + Math.round(w) + "px;";
            }
            else if (overflow === Five.Overflow.fill) {
                style += "width:" + Math.round(w) + "px;height:" + Math.round(h) + "px;";
            }
            else if (overflow == Five.Overflow.width) {
                style += "width:" + Math.round(w) + "px;";
                if (h > 0) {
                    style += "max-height:" + Math.round(h) + "px;";
                }
            }
            if (wrap && w > 0) {
                style += "width:" + Math.round(w) + "px;white-space:normal;";
            }
            else {
                style += "white-space:nowrap;";
            }
            var group = this.createGElement("chromeOpacityFix");
            if (s.alpha < 1) {
                group.setAttribute("opacity", "" + s.alpha);
            }
            var fo = this.createElement("foreignObject");
            fo.setAttribute("pointer-events", "all");
            var div = this.createDiv(str, align, valign, style, overflow);
            if (div == null) {
                return;
            }
            group.appendChild(fo);
            this.root.appendChild(group);
            var ow = 0;
            var oh = 0;
            var padX = 2;
            var padY = 2;
            var tmp;
            var ws;
            if (Five.Client.isIe && ((Five.Client.isIe9 || !Five.Client.isIe10) || !Five.Client.isSvg)) {
                var clone = document.createElement("div");
                clone.style.cssText = div.getAttribute("style");
                clone.style.display = (Five.Client.isQuirks) ? "inline" : "inline-block";
                clone.style.position = "absolute";
                clone.style.visibility = "hidden";
                var div2 = document.createElement("div");
                div2.style.display = (Five.Client.isQuirks) ? "inline" : "inline-block";
                div2.innerHTML = (Five.Utils.isNode(str)) ? str.outerHTML : str;
                clone.appendChild(div2);
                document.body.appendChild(clone);
                if (!Five.Client.isIe8Or9 && s.fontBorderColor != null) {
                    padX += 2;
                    padY += 2;
                }
                if (wrap && w > 0) {
                    tmp = div2.offsetWidth;
                    var padDx = 0;
                    if (!clip && this.root.ownerDocument != document) {
                        ws = clone.style.whiteSpace;
                        clone.style.whiteSpace = "nowrap";
                        if (tmp == div2.offsetWidth) {
                            padX += this.fontMetricsPadding;
                        }
                        else if (Five.Client.isIe8Or9) {
                            padDx = -2;
                        }
                        clone.style.whiteSpace = ws;
                    }
                    tmp = tmp + padX;
                    if (clip) {
                        tmp = Math.min(tmp, w);
                    }
                    clone.style.width = tmp + "px";
                    ow = div2.offsetWidth + padX + padDx;
                    oh = div2.offsetHeight + padY;
                    clone.style.display = "inline-block";
                    clone.style.position = "";
                    clone.style.visibility = "";
                    clone.style.width = ow + "px";
                    div.setAttribute("style", clone.style.cssText);
                }
                else {
                    ow = div2.offsetWidth + padX;
                    oh = div2.offsetHeight + padY;
                }
                clone.parentNode.removeChild(clone);
                fo.appendChild(div);
            }
            else {
                if (this.root.ownerDocument != document || Five.Client.isFf) {
                    div.style.visibility = "hidden";
                    document.body.appendChild(div);
                }
                else {
                    fo.appendChild(div);
                }
                var sizeDiv = div;
                if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName === "DIV") {
                    sizeDiv = sizeDiv.firstChild;
                }
                tmp = sizeDiv.offsetWidth;
                if (!clip && wrap && w > 0 && this.root.ownerDocument != document) {
                    ws = div.style.whiteSpace;
                    div.style.whiteSpace = "nowrap";
                    if (tmp == sizeDiv.offsetWidth) {
                        padX += this.fontMetricsPadding;
                    }
                    div.style.whiteSpace = ws;
                }
                ow = tmp + padX;
                if (wrap) {
                    if (clip) {
                        ow = Math.min(ow, w);
                    }
                    div.style.width = ow + "px";
                }
                ow = sizeDiv.offsetWidth + padX;
                oh = sizeDiv.offsetHeight + 2;
                if (div.parentNode != fo) {
                    fo.appendChild(div);
                    div.style.visibility = "";
                }
            }
            if (clip) {
                oh = Math.min(oh, h);
            }
            if (overflow == Five.Overflow.fill) {
                w = Math.max(w, ow);
                h = Math.max(h, oh);
            }
            else if (overflow == Five.Overflow.width) {
                w = Math.max(w, ow);
                h = oh;
            }
            else {
                w = ow;
                h = oh;
            }
            if (s.alpha < 1) {
                group.setAttribute("opacity", "" + s.alpha);
            }
            var dx = 0;
            var dy = 0;
            if (align == Five.HorizontalAlign.Center) {
                dx -= w / 2;
            }
            else if (align == Five.HorizontalAlign.Right) {
                dx -= w;
            }
            x += dx;
            if (valign == Five.VerticalAlign.Middle) {
                dy -= h / 2 - 1;
            }
            else if (valign == Five.VerticalAlign.Bottom) {
                dy -= h - 2;
            }
            y += dy;
            var tr = (s.scale != 1) ? "scale(" + s.scale + ")" : "";
            if (s.rotation != 0 && this.rotateHtml) {
                tr += "rotate(" + (s.rotation) + "," + (w / 2) + "," + (h / 2) + ")";
                var pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale, s.rotation, s.rotationCx, s.rotationCy);
                x = pt.x - w * s.scale / 2;
                y = pt.y - h * s.scale / 2;
            }
            else {
                x *= s.scale;
                y *= s.scale;
            }
            if (rotation != 0) {
                tr += "rotate(" + (rotation) + "," + (-dx) + "," + (-dy) + ")";
            }
            group.setAttribute("transform", "translate(" + Math.round(x) + "," + Math.round(y) + ")" + tr);
            fo.setAttribute("width", "" + Math.round(Math.max(1, w)));
            fo.setAttribute("height", "" + Math.round(Math.max(1, h)));
            if (this.root.ownerDocument != document) {
                var alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);
                if (alt != null) {
                    fo.setAttribute("requiredFeatures", "http://www.w3.org/TR/SVG11/feature#Extensibility");
                    var sw = this.createElement("switch");
                    sw.appendChild(fo);
                    sw.appendChild(alt);
                    group.appendChild(sw);
                }
            }
        };
        SvgCanvas2D.prototype.createDiv = function (str, align, valign, style, overflow) {
            var s = this.state;
            var lh = "" + (Five.Constants.absoluteLineHeight) ? Math.round(s.fontSize * Five.Constants.lineHeight) + "px" : "" + (Five.Constants.lineHeight * this.lineHeightCorrection);
            style = "display:inline-block;font-size:" + Math.round(s.fontSize) + "px;font-family:" + s.fontFamily +
                ";color:" + s.fontColor + ";line-height:" + lh + ";" + style;
            if ((s.fontStyle & Five.FontStyle.Bold) == Five.FontStyle.Bold) {
                style += "font-weight:bold;";
            }
            if ((s.fontStyle & Five.FontStyle.Italic) == Five.FontStyle.Italic) {
                style += "font-style:italic;";
            }
            if ((s.fontStyle & Five.FontStyle.Underline) == Five.FontStyle.Underline) {
                style += "text-decoration:underline;";
            }
            var css = "";
            if (align == Five.HorizontalAlign.Center) {
                style += "text-align:center;";
            }
            else if (align == Five.HorizontalAlign.Right) {
                style += "text-align:right;";
            }
            if (s.fontBackgroundColor != null) {
                css += "background-color:" + s.fontBackgroundColor + ";";
            }
            if (s.fontBorderColor != null) {
                css += "border:1px solid " + s.fontBorderColor + ";";
            }
            var val = str;
            var ta = document.createElement("textarea");
            ta.innerHTML = val.replace(/&lt;/g, "&amp;lt;").replace(/&gt;/g, "&amp;gt;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            val = ta.value;
            if (overflow != Five.Overflow.fill && overflow != Five.Overflow.width) {
                val = "<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display:inline-block;text-align:inherit;text-decoration:inherit;" + css + "\">" + val + "</div>";
            }
            else {
                style += css;
            }
            if (!Five.Client.isIe && !Five.Client.isIe11 && document.createElementNS) {
                var div = document.createElementNS(Five.Constants.nsXhtml, "div");
                div.setAttribute("style", style);
                div.innerHTML = val;
                return div;
            }
            else {
                val = val.replace(/<br>/g, "<br />").replace(/<hr>/g, "<hr />");
                return Five.Utils.parseXml("<div xmlns=\"" + Five.Constants.nsXhtml + "\" style=\"" + style + "\">" + val + "</div>").documentElement;
            }
        };
        SvgCanvas2D.prototype.createAlternateContent = function (fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation) {
            if (this.foAltText != null) {
                var s = this.state;
                var alt = this.createElement("text");
                alt.setAttribute("x", "" + Math.round(w / 2));
                alt.setAttribute("y", "" + Math.round((h + s.fontSize) / 2));
                alt.setAttribute("fill", s.fontColor || "black");
                alt.setAttribute("text-anchor", "middle");
                alt.setAttribute("font-size", Math.round(s.fontSize) + "px");
                alt.setAttribute("font-family", s.fontFamily);
                if ((s.fontStyle & Five.FontStyle.Bold) == Five.FontStyle.Bold) {
                    alt.setAttribute("font-weight", "bold");
                }
                if ((s.fontStyle & Five.FontStyle.Italic) == Five.FontStyle.Italic) {
                    alt.setAttribute("font-style", "italic");
                }
                if ((s.fontStyle & Five.FontStyle.Underline) == Five.FontStyle.Underline) {
                    alt.setAttribute("text-decoration", "underline");
                }
                Five.Utils.write(alt, this.foAltText);
                return alt;
            }
            else {
                return null;
            }
        };
        SvgCanvas2D.prototype.begin = function () {
            _super.prototype.begin.call(this);
            this.node = this.createElement("path");
        };
        SvgCanvas2D.prototype.textFlow = function (myText, textToAppend, maxWidth, x, ddy, justified) {
            var _this = this;
            var dashArray = [];
            var dashFound = true;
            var indexPos = 0;
            var cumulY = 0;
            var checkDashPosition = function (pos) {
                for (var j = 0; j < dashArray.length; j++) {
                    if (dashArray[j] === pos) {
                        return true;
                    }
                }
                return false;
            };
            while (dashFound) {
                var result = myText.indexOf("-", indexPos);
                if (result === -1) {
                    dashFound = false;
                }
                else {
                    dashArray.push(result);
                    indexPos = result + 1;
                }
            }
            var words = myText.split(/[\s-]/);
            var line = "";
            var dy = 0;
            var curNumChars = 0;
            var computedTextLength = 0;
            var myTextNode;
            var tspanEl;
            var addTextSpan = function (text) {
                tspanEl = (_this.createElement("tspan"));
                tspanEl.setAttributeNS(null, "x", String(x));
                tspanEl.setAttributeNS(null, "dy", String(dy));
                myTextNode = document.createTextNode(text);
                tspanEl.appendChild(myTextNode);
                textToAppend.appendChild(tspanEl);
            };
            for (var i = 0; i < words.length; i++) {
                var word = words[i];
                curNumChars += word.length + 1;
                var tempText;
                if (computedTextLength > maxWidth || i == 0) {
                    if (computedTextLength > maxWidth) {
                        tempText = tspanEl.firstChild.nodeValue;
                        tempText = tempText.slice(0, (tempText.length - words[i - 1].length - 2));
                        tspanEl.firstChild.nodeValue = tempText;
                        if (justified) {
                            var nrWords = tempText.split(/\s/).length;
                            computedTextLength = tspanEl.getComputedTextLength();
                            var additionalWordSpacing = (maxWidth - computedTextLength) / (nrWords - 1);
                            tspanEl.setAttributeNS(null, "word-spacing", String(additionalWordSpacing));
                        }
                    }
                    addTextSpan(line);
                    if (checkDashPosition(curNumChars - 1)) {
                        line = word + "-";
                    }
                    else {
                        line = word + " ";
                    }
                    if (i != 0) {
                        line = words[i - 1] + " " + line;
                    }
                    dy = ddy;
                    cumulY += dy;
                }
                else {
                    if (checkDashPosition(curNumChars - 1)) {
                        line += word + "-";
                    }
                    else {
                        line += word + " ";
                    }
                }
                tspanEl.firstChild.nodeValue = line;
                computedTextLength = tspanEl.getComputedTextLength();
                if (i == words.length - 1) {
                    if (computedTextLength > maxWidth) {
                        tempText = tspanEl.firstChild.nodeValue;
                        tspanEl.firstChild.nodeValue = tempText.slice(0, (tempText.length - words[i].length - 1));
                        addTextSpan(words[i]);
                    }
                }
            }
            return cumulY;
        };
        SvgCanvas2D.prototype.plainText = function (x, y, w, h, str, align, valign, wrap, overflow, clip, rotation) {
            rotation = (rotation != null) ? rotation : 0;
            var s = this.state;
            var size = Math.round(s.fontSize);
            var node = this.createGElement("textcontainer");
            var tr = s.transform || "";
            this.updateFont(node);
            if (rotation != 0) {
                tr += "rotate(" + rotation + "," + this.format1(x * s.scale) + "," + this.format1(y * s.scale) + ")";
            }
            var cy;
            if (clip && w > 0 && h > 0) {
                var cx = x;
                cy = y;
                if (align == Five.HorizontalAlign.Center) {
                    cx -= w / 2;
                }
                else if (align == Five.HorizontalAlign.Right) {
                    cx -= w;
                }
                if (overflow != Five.Overflow.fill) {
                    if (valign == Five.VerticalAlign.Middle) {
                        cy -= h / 2;
                    }
                    else if (valign == Five.VerticalAlign.Bottom) {
                        cy -= h;
                    }
                }
                var c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);
                if (this.defs != null) {
                    this.defs.appendChild(c);
                }
                else {
                    this.root.appendChild(c);
                }
                if (!Five.Client.isIe && this.root.ownerDocument == document) {
                    node.setAttribute("clip-path", "url(" + this.getBaseUrl() + "#" + c.getAttribute("id") + ")");
                }
                else {
                    node.setAttribute("clip-path", "url(#" + c.getAttribute("id") + ")");
                }
            }
            var anchor = (align == Five.HorizontalAlign.Right) ? "end" :
                (align == Five.HorizontalAlign.Center) ? "middle" :
                    "start";
            if (anchor != "start") {
                node.setAttribute("text-anchor", anchor);
            }
            if (!this.styleEnabled || size != Five.Constants.defaultFontSize) {
                node.setAttribute("font-size", Math.round(size * s.scale) + "px");
            }
            if (tr.length > 0) {
                node.setAttribute("transform", tr);
            }
            if (s.alpha < 1) {
                node.setAttribute("opacity", "" + s.alpha);
            }
            var text;
            var dy;
            var lh = Math.round(size * Five.Constants.lineHeight);
            if (wrap) {
                text = this.createElement("text");
                node.appendChild(text);
                this.root.appendChild(node);
                var scaledX = Math.round(x * s.scale);
                dy = this.textFlow(str, text, 160, scaledX, lh, false);
                cy = y + size - 1;
                if (valign == Five.VerticalAlign.Middle) {
                    if (overflow == Five.Overflow.fill) {
                        cy -= h / 2;
                    }
                    else {
                        dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(dy, h) : dy) / 2;
                        cy -= dy + 1;
                    }
                }
                else if (valign == Five.VerticalAlign.Bottom) {
                    if (overflow == Five.Overflow.fill) {
                        cy -= h;
                    }
                    else {
                        dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(dy, h) : dy;
                        cy -= dy + 2;
                    }
                }
                var scaledY = Math.round(cy * s.scale);
                text.setAttribute("x", "" + scaledX);
                text.setAttribute("y", "" + scaledY);
            }
            else {
                var lines = str.split("\n");
                var textHeight = size + (lines.length - 1) * lh;
                cy = y + size - 1;
                if (valign == Five.VerticalAlign.Middle) {
                    if (overflow == Five.Overflow.fill) {
                        cy -= h / 2;
                    }
                    else {
                        dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;
                        cy -= dy + 1;
                    }
                }
                else if (valign == Five.VerticalAlign.Bottom) {
                    if (overflow == Five.Overflow.fill) {
                        cy -= h;
                    }
                    else {
                        dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;
                        cy -= dy + 2;
                    }
                }
                for (var i = 0; i < lines.length; i++) {
                    if (lines[i].length > 0 && Five.Utils.trim(lines[i]).length > 0) {
                        text = this.createElement("text");
                        text.setAttribute("x", "" + this.format1(x * s.scale));
                        text.setAttribute("y", "" + this.format1(cy * s.scale));
                        Five.Utils.write(text, lines[i]);
                        node.appendChild(text);
                    }
                    cy += lh;
                }
                this.root.appendChild(node);
                this.addTextBackground(node, str, x, y, w, (overflow == Five.Overflow.fill) ? h : textHeight, align, valign, overflow);
            }
        };
        SvgCanvas2D.prototype.updateFont = function (node) {
            var s = this.state;
            node.setAttribute("fill", s.fontColor);
            if (!this.styleEnabled || s.fontFamily != Five.Constants.defaultFontFamily) {
                node.setAttribute("font-family", s.fontFamily);
            }
            if ((s.fontStyle & Five.FontStyle.Bold) == Five.FontStyle.Bold) {
                node.setAttribute("font-weight", "bold");
            }
            if ((s.fontStyle & Five.FontStyle.Italic) == Five.FontStyle.Italic) {
                node.setAttribute("font-style", "italic");
            }
            if ((s.fontStyle & Five.FontStyle.Underline) == Five.FontStyle.Underline) {
                node.setAttribute("text-decoration", "underline");
            }
        };
        SvgCanvas2D.prototype.createClip = function (x, y, w, h) {
            x = Math.round(x);
            y = Math.round(y);
            w = Math.round(w);
            h = Math.round(h);
            var id = "mx-clip-" + x + "-" + y + "-" + w + "-" + h;
            var counter = 0;
            var tmp = id + "-" + counter;
            while (document.getElementById(tmp) != null) {
                tmp = id + "-" + (++counter);
            }
            var clip = this.createElement("clipPath");
            clip.setAttribute("id", tmp);
            var rect = this.createSvgRect();
            rect.x.baseVal.value = x;
            rect.y.baseVal.value = y;
            rect.width.baseVal.value = w;
            rect.height.baseVal.value = h;
            clip.appendChild(rect);
            return clip;
        };
        SvgCanvas2D.prototype.getBaseUrl = function () {
            var href = window.location.href;
            var hash = href.lastIndexOf("#");
            if (hash > 0) {
                href = href.substring(0, hash);
            }
            return href;
        };
        SvgCanvas2D.prototype.addNode = function (filled, stroked) {
            var node = this.node;
            var s = this.state;
            if (node != null) {
                if (node.nodeName == "path") {
                    if (this.path != null && this.path.length > 0) {
                        node.setAttribute("d", this.path.join(" "));
                    }
                    else {
                        return;
                    }
                }
                if (filled && s.fillColor != null) {
                    this.updateFill();
                }
                else if (!this.styleEnabled) {
                    if (node.nodeName == "ellipse" && Five.Client.isFf) {
                        node.setAttribute("fill", "transparent");
                    }
                    else {
                        node.setAttribute("fill", "none");
                    }
                    filled = false;
                }
                if (stroked && s.strokeColor != null) {
                    this.updateStroke();
                }
                else if (!this.styleEnabled) {
                    node.setAttribute("stroke", "none");
                }
                if (s.transform != null && s.transform.length > 0) {
                    node.setAttribute("transform", s.transform);
                }
                if (s.shadow) {
                    this.root.appendChild(this.createShadow(node));
                }
                if (this.strokeTolerance > 0 && !filled) {
                    this.root.appendChild(this.createTolerance(node));
                }
                if (this.pointerEvents && (node.nodeName != "path" ||
                    this.path[this.path.length - 1] == this.closeOp)) {
                    node.setAttribute("pointer-events", this.pointerEventsValue);
                }
                else if (!this.pointerEvents && this.originalRoot == null) {
                    node.setAttribute("pointer-events", "none");
                }
                this.root.appendChild(node);
            }
        };
        SvgCanvas2D.prototype.updateFill = function () {
            var s = this.state;
            if (s.alpha < 1) {
                this.node.setAttribute("fill-opacity", "" + s.alpha);
            }
            if (s.fillColor != null) {
                if (s.gradientColor != null) {
                    var id = this.getSvgGradient(s.fillColor, s.gradientColor, s.fillAlpha, s.gradientAlpha, s.gradientDirection);
                    if (!Five.Client.isIe && this.root.ownerDocument == document) {
                        this.node.setAttribute("fill", "url(" + this.getBaseUrl() + "#" + id + ")");
                    }
                    else {
                        this.node.setAttribute("fill", "url(#" + id + ")");
                    }
                }
                else {
                    this.node.setAttribute("fill", s.fillColor.toLowerCase());
                }
            }
        };
        SvgCanvas2D.prototype.addTextBackground = function (node, str, x, y, w, h, align, valign, overflow) {
            var s = this.state;
            if (s.fontBackgroundColor != null || s.fontBorderColor != null) {
                var bbox = null;
                if (overflow == Five.Overflow.fill || overflow == Five.Overflow.width) {
                    if (align == Five.HorizontalAlign.Center) {
                        x -= w / 2;
                    }
                    else if (align == Five.HorizontalAlign.Right) {
                        x -= w;
                    }
                    if (valign == Five.VerticalAlign.Middle) {
                        y -= h / 2;
                    }
                    else if (valign == Five.VerticalAlign.Bottom) {
                        y -= h;
                    }
                    bbox = new Five.Rectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);
                }
                else if (node.getBBox != null && this.root.ownerDocument == document) {
                    try {
                        bbox = node.getBBox();
                        var ie = Five.Client.isIe && Five.Client.isSvg;
                        bbox = new Five.Rectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));
                    }
                    catch (e) {
                    }
                }
                else {
                    var div = document.createElement("div");
                    div.style.lineHeight = (Five.Constants.absoluteLineHeight) ? "" + Math.round(s.fontSize * Five.Constants.lineHeight) + "px" : "" + Five.Constants.lineHeight;
                    div.style.fontSize = Math.round(s.fontSize) + "px";
                    div.style.fontFamily = s.fontFamily;
                    div.style.whiteSpace = "nowrap";
                    div.style.position = "absolute";
                    div.style.visibility = "hidden";
                    div.style.display = (Five.Client.isQuirks) ? "inline" : "inline-block";
                    div.style.zoom = "1";
                    if ((s.fontStyle & Five.FontStyle.Bold) == Five.FontStyle.Bold) {
                        div.style.fontWeight = "bold";
                    }
                    if ((s.fontStyle & Five.FontStyle.Italic) == Five.FontStyle.Italic) {
                        div.style.fontStyle = "italic";
                    }
                    str = Five.Utils.htmlEntities(str, false);
                    div.innerHTML = str.replace(/\n/g, "<br/>");
                    document.body.appendChild(div);
                    w = div.offsetWidth;
                    h = div.offsetHeight;
                    div.parentNode.removeChild(div);
                    if (align == Five.HorizontalAlign.Center) {
                        x -= w / 2;
                    }
                    else if (align == Five.HorizontalAlign.Right) {
                        x -= w;
                    }
                    if (valign == Five.VerticalAlign.Middle) {
                        y -= h / 2;
                    }
                    else if (valign == Five.VerticalAlign.Bottom) {
                        y -= h;
                    }
                    bbox = new Five.Rectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);
                }
                if (bbox != null) {
                    var n = this.createSvgRect();
                    n.setAttribute("fill", s.fontBackgroundColor || "none");
                    n.setAttribute("stroke", s.fontBorderColor || "none");
                    n.x.baseVal.value = Math.floor(bbox.x - 1);
                    n.y.baseVal.value = Math.floor(bbox.y - 1);
                    n.width.baseVal.value = Math.ceil(bbox.width + 2);
                    n.height.baseVal.value = Math.ceil(bbox.height);
                    var sw = (s.fontBorderColor != null) ? Math.max(1, this.format1(s.scale)) : 0;
                    n.setAttribute("stroke-width", "" + sw);
                    if (this.root.ownerDocument == document && Five.Utils.mod(sw, 2) == 1) {
                        n.setAttribute("transform", "translate(0.5, 0.5)");
                    }
                    node.insertBefore(n, node.firstChild);
                }
            }
        };
        SvgCanvas2D.prototype.updateStroke = function () {
            var s = this.state;
            this.node.setAttribute("stroke", s.strokeColor.toLowerCase());
            if (s.alpha < 1) {
                this.node.setAttribute("stroke-opacity", "" + s.alpha);
            }
            var sw = this.getCurrentStrokeWidth();
            if (sw !== 1) {
                this.node.setAttribute("stroke-width", "" + sw);
            }
            if (this.node.nodeName == "path") {
                this.updateStrokeAttributes();
            }
            if (s.dashed) {
                this.node.setAttribute("stroke-dasharray", this.createDashPattern(s.strokeWidth * s.scale));
            }
        };
        SvgCanvas2D.prototype.createShadow = function (node) {
            var shadow = node.cloneNode(true);
            var s = this.state;
            if (shadow.getAttribute("fill") != "none") {
                shadow.setAttribute("fill", s.shadowColor);
            }
            if (shadow.getAttribute("stroke") != "none") {
                shadow.setAttribute("stroke", s.shadowColor);
            }
            shadow.setAttribute("transform", "translate(" + this.format1(s.shadowDx * s.scale) + "," + this.format1(s.shadowDy * s.scale) + ")" + (s.transform || ""));
            shadow.setAttribute("opacity", "" + s.shadowAlpha);
            return shadow;
        };
        SvgCanvas2D.prototype.createTolerance = function (node) {
            var tol = node.cloneNode(true);
            var sw = parseFloat(tol.getAttribute("stroke-width") || "1") + this.strokeTolerance;
            tol.setAttribute("pointer-events", "stroke");
            tol.setAttribute("visibility", "hidden");
            tol.removeAttribute("stroke-dasharray");
            tol.setAttribute("stroke-width", String(sw));
            tol.setAttribute("fill", "none");
            tol.setAttribute("stroke", (Five.Client.isOp) ? "none" : "white");
            return tol;
        };
        SvgCanvas2D.prototype.getSvgGradient = function (start, end, alpha1, alpha2, direction) {
            var id = this.createGradientId(start, end, alpha1, alpha2, direction);
            var gradient = this.gradients[id];
            if (gradient == null) {
                var svg = this.root.ownerSVGElement;
                var counter = 0;
                var tmpId = id + "-" + counter;
                if (svg != null) {
                    gradient = svg.getElementById(tmpId);
                    while (gradient != null && gradient.ownerSVGElement != svg) {
                        tmpId = id + "-" + counter++;
                        gradient = svg.getElementById(tmpId);
                    }
                }
                else {
                    tmpId = "id" + (++this.refCount);
                }
                if (gradient == null) {
                    gradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);
                    gradient.setAttribute("id", tmpId);
                    if (this.defs != null) {
                        this.defs.appendChild(gradient);
                    }
                    else {
                        svg.appendChild(gradient);
                    }
                }
                this.gradients[id] = gradient;
            }
            return gradient.getAttribute("id");
        };
        SvgCanvas2D.prototype.getCurrentStrokeWidth = function () {
            return Math.max(1, this.format1(this.state.strokeWidth * this.state.scale));
        };
        SvgCanvas2D.prototype.updateStrokeAttributes = function () {
            var s = this.state;
            if (s.lineJoin != null && s.lineJoin != "miter") {
                this.node.setAttribute("stroke-linejoin", s.lineJoin);
            }
            if (s.lineCap != null) {
                var value = s.lineCap;
                if (value == "flat") {
                    value = "butt";
                }
                if (value != "butt") {
                    this.node.setAttribute("stroke-linecap", value);
                }
            }
            if (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10)) {
                this.node.setAttribute("stroke-miterlimit", "" + s.miterLimit);
            }
        };
        SvgCanvas2D.prototype.createDashPattern = function (scale) {
            var pat = [];
            if (typeof (this.state.dashPattern) === "string") {
                var dash = this.state.dashPattern.split(" ");
                if (dash.length > 0) {
                    for (var i = 0; i < dash.length; i++) {
                        pat[i] = Number(dash[i]) * scale;
                    }
                }
            }
            return pat.join(" ");
        };
        SvgCanvas2D.prototype.createGradientId = function (start, end, alpha1, alpha2, direction) {
            if (start.charAt(0) == "#") {
                start = start.substring(1);
            }
            if (end.charAt(0) == "#") {
                end = end.substring(1);
            }
            start = start.toLowerCase() + "-" + alpha1;
            end = end.toLowerCase() + "-" + alpha2;
            var dir = null;
            if (direction == null || direction == Five.Direction.South) {
                dir = "s";
            }
            else if (direction == Five.Direction.East) {
                dir = "e";
            }
            else {
                var tmp = start;
                start = end;
                end = tmp;
                if (direction == Five.Direction.North) {
                    dir = "s";
                }
                else if (direction == Five.Direction.West) {
                    dir = "e";
                }
            }
            return "mx-gradient-" + start + "-" + end + "-" + dir;
        };
        SvgCanvas2D.prototype.createSvgGradient = function (start, end, alpha1, alpha2, direction) {
            var gradient = this.createElement("linearGradient");
            gradient.x1.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 0);
            gradient.y1.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 0);
            gradient.x2.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 0);
            gradient.y2.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 0);
            switch (direction) {
                case Five.Direction.South:
                default:
                    gradient.y2.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 100);
                    break;
                case Five.Direction.East:
                    gradient.x2.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 100);
                    break;
                case Five.Direction.North:
                    gradient.y1.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 100);
                    break;
                case Five.Direction.West:
                    gradient.x1.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 100);
                    break;
            }
            var stop = this.createElement("stop");
            stop.offset.baseVal = 0;
            stop.style.stopColor = start;
            if (alpha1 < 1)
                stop.style.stopOpacity = "" + alpha1;
            gradient.appendChild(stop);
            stop = this.createElement("stop");
            stop.offset.baseVal = 100;
            stop.style.stopColor = end;
            if (alpha2 < 1)
                stop.style.stopOpacity = "" + alpha2;
            gradient.appendChild(stop);
            return gradient;
        };
        SvgCanvas2D.prototype.fillAndStroke = function () {
            this.addNode(true, true);
        };
        SvgCanvas2D.prototype.fill = function () {
            this.addNode(true, false);
        };
        SvgCanvas2D.prototype.stroke = function () {
            this.addNode(false, true);
        };
        return SvgCanvas2D;
    }(Five.AbstractCanvas2D));
    Five.SvgCanvas2D = SvgCanvas2D;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var SwimlaneManager = (function () {
        function SwimlaneManager(graph, horizontal, addEnabled, resizeEnabled) {
            var _this = this;
            if (horizontal === void 0) { horizontal = true; }
            if (addEnabled === void 0) { addEnabled = true; }
            if (resizeEnabled === void 0) { resizeEnabled = true; }
            this.graph = null;
            this.enabled = true;
            this.horizontal = true;
            this.addEnabled = true;
            this.resizeEnabled = true;
            this.isEnabled = function () { return _this.enabled; };
            this.isHorizontal = function () { return _this.horizontal; };
            this.horizontal = horizontal;
            this.addEnabled = addEnabled;
            this.resizeEnabled = resizeEnabled;
            this.addHandler = function (e) {
                if (_this.isEnabled() && _this.isAddEnabled()) {
                    _this.cellsAdded(e.cells);
                }
            };
            this.resizeHandler = function (e) {
                if (_this.isEnabled() && _this.isResizeEnabled()) {
                    _this.cellsResized(e.cells);
                }
            };
            this.setGraph(graph);
        }
        SwimlaneManager.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        SwimlaneManager.prototype.setHorizontal = function (value) {
            this.horizontal = value;
        };
        SwimlaneManager.prototype.isAddEnabled = function () {
            return this.addEnabled;
        };
        SwimlaneManager.prototype.setAddEnabled = function (value) {
            this.addEnabled = value;
        };
        SwimlaneManager.prototype.isResizeEnabled = function () {
            return this.resizeEnabled;
        };
        SwimlaneManager.prototype.setResizeEnabled = function (value) {
            this.resizeEnabled = value;
        };
        SwimlaneManager.prototype.getGraph = function () {
            return this.graph;
        };
        SwimlaneManager.prototype.setGraph = function (graph) {
            if (this.graph != null) {
                this.graph.onAddCells.remove(this.addHandler);
                this.graph.onCellsResized.remove(this.resizeHandler);
            }
            this.graph = graph;
            if (this.graph != null) {
                this.graph.onAddCells.add(this.addHandler);
                this.graph.onCellsResized.add(this.resizeHandler);
            }
        };
        SwimlaneManager.prototype.isSwimlaneIgnored = function (swimlane) {
            return !this.getGraph().isSwimlane(swimlane);
        };
        SwimlaneManager.prototype.isCellHorizontal = function (cell) {
            if (this.graph.isSwimlane(cell)) {
                var style = this.graph.getCellStyle(cell);
                return !style.portrait;
            }
            return !this.isHorizontal();
        };
        SwimlaneManager.prototype.cellsAdded = function (cells) {
            if (cells != null) {
                var model = this.getGraph().getModel();
                model.beginUpdate();
                try {
                    for (var i = 0; i < cells.length; i++) {
                        if (!this.isSwimlaneIgnored(cells[i])) {
                            this.swimlaneAdded(cells[i]);
                        }
                    }
                }
                finally {
                    model.endUpdate();
                }
            }
        };
        SwimlaneManager.prototype.swimlaneAdded = function (swimlane) {
            var parent = Five.Cells.getParent(swimlane);
            var childCount = Five.Cells.getChildCount(parent);
            var geo = null;
            for (var i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(parent, i);
                if (child != swimlane && !this.isSwimlaneIgnored(child)) {
                    geo = Five.Cells.getGeometry(child);
                    if (geo != null) {
                        break;
                    }
                }
            }
            if (geo != null) {
                var parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;
                this.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);
            }
        };
        SwimlaneManager.prototype.cellsResized = function (cells) {
            if (cells != null) {
                var model = this.getGraph().getModel();
                model.beginUpdate();
                try {
                    for (var i = 0; i < cells.length; i++) {
                        if (!this.isSwimlaneIgnored(cells[i])) {
                            var geo = Five.Cells.getGeometry(cells[i]);
                            if (geo != null) {
                                var size = new Five.Rectangle(0, 0, geo.width, geo.height);
                                var top = cells[i];
                                var current = top;
                                while (current != null) {
                                    top = current;
                                    current = Five.Cells.getParent(current);
                                    var tmp = (this.graph.isSwimlane(current)) ?
                                        this.graph.getStartSize(current) :
                                        new Five.Rectangle();
                                    size.width += tmp.width;
                                    size.height += tmp.height;
                                }
                                var parentHorizontal = this.horizontal;
                                this.resizeSwimlane(top, size.width, size.height, parentHorizontal);
                            }
                        }
                    }
                }
                finally {
                    model.endUpdate();
                }
            }
        };
        SwimlaneManager.prototype.resizeSwimlane = function (swimlane, w, h, parentHorizontal) {
            var model = this.getGraph().getModel();
            model.beginUpdate();
            try {
                var horizontal = this.isCellHorizontal(swimlane);
                if (!this.isSwimlaneIgnored(swimlane)) {
                    var geo = Five.Cells.getGeometry(swimlane);
                    if (geo != null) {
                        if ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w)) {
                            geo = geo.clone();
                            if (parentHorizontal) {
                                geo.height = h;
                            }
                            else {
                                geo.width = w;
                            }
                            model.setGeometry(swimlane, geo);
                        }
                    }
                }
                var tmp = (this.graph.isSwimlane(swimlane)) ?
                    this.graph.getStartSize(swimlane) :
                    new Five.Rectangle();
                w -= tmp.width;
                h -= tmp.height;
                var childCount = Five.Cells.getChildCount(swimlane);
                for (var i = 0; i < childCount; i++) {
                    var child = Five.Cells.getChildAt(swimlane, i);
                    this.resizeSwimlane(child, w, h, horizontal);
                }
            }
            finally {
                model.endUpdate();
            }
        };
        SwimlaneManager.prototype.destroy = function () {
            this.setGraph(null);
        };
        return SwimlaneManager;
    }());
    Five.SwimlaneManager = SwimlaneManager;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var TerminalChange = (function () {
        function TerminalChange(model, cell, terminal, source) {
            this.model = model;
            this.cell = cell;
            this.terminal = terminal;
            this.source = source;
            this.previous = terminal;
        }
        TerminalChange.prototype.execute = function () {
            this.terminal = this.previous;
            this.previous = this.model.terminalForCellChanged(this.cell, this.previous, this.source);
        };
        return TerminalChange;
    }());
    Five.TerminalChange = TerminalChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var TextShape = (function (_super) {
        __extends(TextShape, _super);
        function TextShape(value, bounds, align, valign, color, family, size, fontStyle, spacing, spacingTop, spacingRight, spacingBottom, spacingLeft, horizontal, background, border, wrap, clipped, overflow, labelPadding) {
            if (color === void 0) { color = "black"; }
            if (family === void 0) { family = Five.Constants.defaultFontFamily; }
            if (size === void 0) { size = Five.Constants.defaultFontSize; }
            if (fontStyle === void 0) { fontStyle = Five.Constants.defaultFontstyle; }
            if (spacing === void 0) { spacing = 2; }
            if (spacingTop === void 0) { spacingTop = 0; }
            if (spacingRight === void 0) { spacingRight = 0; }
            if (spacingBottom === void 0) { spacingBottom = 0; }
            if (spacingLeft === void 0) { spacingLeft = 0; }
            if (horizontal === void 0) { horizontal = true; }
            if (wrap === void 0) { wrap = false; }
            if (clipped === void 0) { clipped = false; }
            if (overflow === void 0) { overflow = Five.Overflow.visible; }
            if (labelPadding === void 0) { labelPadding = 0; }
            var _this = _super.call(this) || this;
            _this.value = value;
            _this.align = align;
            _this.valign = valign;
            _this.color = color;
            _this.family = family;
            _this.size = size;
            _this.fontStyle = fontStyle;
            _this.spacingTop = spacingTop;
            _this.spacingRight = spacingRight;
            _this.spacingBottom = spacingBottom;
            _this.spacingLeft = spacingLeft;
            _this.background = background;
            _this.border = border;
            _this.wrap = wrap;
            _this.clipped = clipped;
            _this.overflow = overflow;
            _this.labelPadding = labelPadding;
            _this.replaceLinefeeds = true;
            _this.ignoreClippedStringSize = true;
            _this.ignoreStringSize = false;
            _this.textWidthPadding = 3;
            _this.margin = null;
            _this.baseSpacingTop = 0;
            _this.baseSpacingBottom = 0;
            _this.baseSpacingLeft = 0;
            _this.baseSpacingRight = 0;
            _this._horizontal = true;
            _this.bounds = bounds;
            _this.rotation = 0;
            _this.spacing = spacing;
            _this.horizontal = horizontal,
                _this.updateMargin();
            return _this;
        }
        Object.defineProperty(TextShape.prototype, "horizontal", {
            get: function () {
                return this._horizontal;
            },
            set: function (value) {
                this._horizontal = value;
            },
            enumerable: true,
            configurable: true
        });
        TextShape.prototype.getSvgScreenOffset = function () {
            return 0;
        };
        TextShape.prototype.checkBounds = function () {
            return (this.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&
                !isNaN(this.bounds.width) && !isNaN(this.bounds.height));
        };
        TextShape.prototype.apply = function (state) {
            _super.prototype.apply.call(this, state);
            if (this.style != null) {
                this.fontStyle = this.style.fontSize || this.fontStyle;
                this.family = this.style.fontFamily || this.family;
                this.size = this.style.fontSize || this.size;
                this.color = this.style.fontColor || this.color;
                this.align = this.style.hAlign || this.align;
                this.valign = this.style.vAlign || this.valign;
                this.spacingTop = this.style.spacingTop || this.spacingTop;
                this.spacingRight = this.style.spacingRight || this.spacingRight;
                this.spacingBottom = this.style.spacingBottom || this.spacingBottom;
                this.spacingLeft = this.style.spacingLeft || this.spacingLeft;
                this.horizontal = this.style.portrait == null ? this.horizontal : this.style.portrait;
                this.background = this.style.labelBackgroundColor || this.background;
                this.border = this.style.LabelBorderColor || this.border;
                this.updateMargin();
            }
        };
        TextShape.prototype.updateBoundingBox = function () {
            var node = this.node;
            this.boundingBox = Five.Utils.clone(this.bounds);
            var rot = this.getTextRotation();
            var h = (this.style != null) ? this.style.labelPosition || Five.HorizontalAlign.Center : null;
            var v = (this.style != null) ? this.style.verticalLabelPosition || Five.VerticalAlign.Middle : null;
            if (!this.ignoreStringSize && node != null && this.overflow != Five.Overflow.fill &&
                (!this.clipped || !this.ignoreClippedStringSize || h != Five.HorizontalAlign.Center || v != Five.VerticalAlign.Middle)) {
                var ow = null;
                var oh = null;
                if (node instanceof SVGElement) {
                    if (node.firstChild != null && node.firstChild.firstChild != null && node.firstChild.firstChild.nodeName == "foreignObject") {
                        node = (node.firstChild.firstChild);
                        ow = parseInt(node.getAttribute("width")) * this.scale;
                        oh = parseInt(node.getAttribute("height")) * this.scale;
                    }
                    else {
                        try {
                            var getBBox = node.getBBox;
                            if (typeof getBBox === "function") {
                                var b = getBBox();
                                if (Five.Utils.trim(this.value).length === 0) {
                                    return;
                                }
                                if (b.width == 0 && b.height == 0) {
                                    return;
                                }
                                this.boundingBox = new Five.Rectangle(b.x, b.y, b.width, b.height);
                                rot = 0;
                            }
                        }
                        catch (e) {
                        }
                    }
                }
                else {
                    var td = (this.state != null) ? this.state.view.textDiv : null;
                    if (this.offsetWidth != null && this.offsetHeight != null) {
                        ow = this.offsetWidth * this.scale;
                        oh = this.offsetHeight * this.scale;
                    }
                    else {
                        if (td != null) {
                            this.updateFont(td);
                            this.updateSize(td, false);
                            this.updateInnerHtml(td);
                            node = td;
                        }
                        var elem = node;
                        var sizeDiv = elem;
                        if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == "DIV") {
                            sizeDiv = (sizeDiv.firstChild);
                        }
                        ow = (sizeDiv.offsetWidth + this.textWidthPadding) * this.scale;
                        oh = sizeDiv.offsetHeight * this.scale;
                    }
                }
                if (ow != null && oh != null) {
                    var x0 = this.bounds.x + this.margin.x * ow;
                    var y0 = this.bounds.y + this.margin.y * oh;
                    this.boundingBox = new Five.Rectangle(x0, y0, ow, oh);
                }
            }
            else {
                this.boundingBox.x += this.margin.x * this.boundingBox.width;
                this.boundingBox.y += this.margin.y * this.boundingBox.height;
            }
            if (this.boundingBox != null) {
                if (rot != 0) {
                    var bbox = Five.Utils.getBoundingBox(this.boundingBox, rot);
                    this.boundingBox.x = bbox.x;
                    this.boundingBox.y = bbox.y;
                    if (!Five.Client.isQuirks) {
                        this.boundingBox.width = bbox.width;
                        this.boundingBox.height = bbox.height;
                    }
                }
            }
        };
        TextShape.prototype.getShapeRotation = function () {
            return 0;
        };
        TextShape.prototype.getTextRotation = function () {
            return (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;
        };
        TextShape.prototype.isPaintBoundsInverted = function () {
            return !this.horizontal && this.state != null && Five.Cells.isVertex(this.state.cell);
        };
        TextShape.prototype.configureCanvas = function (c, x, y, w, h) {
            _super.prototype.configureCanvas.call(this, c, x, y, w, h);
            c.setFontColor(this.color);
            c.setFontBackgroundColor(this.background);
            c.setFontBorderColor(this.border);
            c.setFontFamily(this.family);
            c.setFontSize(this.size);
            c.setFontStyle(this.fontStyle);
        };
        TextShape.prototype.paint = function (c) {
            var s = this.scale;
            var x = this.bounds.x / s;
            var y = this.bounds.y / s;
            var w = this.bounds.width / s;
            var h = this.bounds.height / s;
            this.updateTransform(c, x, y, w, h);
            this.configureCanvas(c, x, y, w, h);
            var realHtml = this.dialect == Five.Dialect.StrictHtml;
            var fmt = (realHtml) ? "html" : "";
            var val = this.value;
            val = (this.replaceLinefeeds && fmt == "html") ?
                val.replace(/\n/g, "<br/>") : val;
            c.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt, this.overflow, this.clipped, this.getTextRotation());
        };
        TextShape.prototype.redrawHtmlShape = function () {
            var style = this.nodeStyle();
            if (this.opacity < 1) {
                style.opacity = String(this.opacity);
            }
            else {
                style.opacity = "";
            }
            style.whiteSpace = "normal";
            style.overflow = "";
            style.width = "";
            style.height = "";
            this.updateValue();
            this.updateFont(this.node);
            this.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));
            this.offsetWidth = null;
            this.offsetHeight = null;
            this.updateHtmlTransform();
        };
        TextShape.prototype.updateHtmlTransform = function () {
            var theta = this.getTextRotation();
            var style = this.nodeStyle();
            var dx = this.margin.x;
            var dy = this.margin.y;
            if (theta != 0) {
                Five.Utils.setPrefixedStyle(style, "transformOrigin", (-dx * 100) + "%" + " " + (-dy * 100) + "%");
                Five.Utils.setPrefixedStyle(style, "transform", "translate(" + (dx * 100) + "%" + "," + (dy * 100) + "%)" +
                    "scale(" + this.scale + ") rotate(" + theta + "deg)");
            }
            else {
                Five.Utils.setPrefixedStyle(style, "transformOrigin", "0% 0%");
                Five.Utils.setPrefixedStyle(style, "transform", "scale(" + this.scale + ")" +
                    "translate(" + (dx * 100) + "%" + "," + (dy * 100) + "%)");
            }
            style.left = Math.round(this.bounds.x) + "px";
            style.top = Math.round(this.bounds.y) + "px";
        };
        TextShape.prototype.updateInnerHtml = function (elt) {
            {
                var val = this.value;
                if (this.dialect != Five.Dialect.StrictHtml) {
                    val = Five.Utils.htmlEntities(val, false);
                }
                val = (this.replaceLinefeeds) ? val.replace(/\n/g, "<br/>") : val;
                val = "<div style=\"display:inline-block;_display:inline;\">" + val + "</div>";
                elt.innerHTML = val;
            }
        };
        TextShape.prototype.updateHtmlFilter = function () {
            var style = this.nodeStyle();
            var dx = this.margin.x;
            var dy = this.margin.y;
            var s = this.scale;
            style.filter = "";
            var ow = 0;
            var oh = 0;
            var td = (this.state != null) ? this.state.view.textDiv : null;
            var sizeDiv = this.node;
            var w;
            if (td != null) {
                td.style.overflow = "";
                td.style.height = "";
                td.style.width = "";
                this.updateFont(td);
                this.updateSize(td, false);
                this.updateInnerHtml(td);
                w = Math.round(this.bounds.width / this.scale);
                if (this.wrap && w > 0) {
                    td.style.whiteSpace = "normal";
                    ow = w;
                    if (this.clipped) {
                        ow = Math.min(ow, this.bounds.width);
                    }
                    td.style.width = ow + "px";
                }
                else {
                    td.style.whiteSpace = "nowrap";
                }
                sizeDiv = td;
                if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == "DIV") {
                    sizeDiv = (sizeDiv.firstChild);
                }
                if (!this.clipped && this.wrap && w > 0) {
                    ow = sizeDiv.offsetWidth + this.textWidthPadding;
                    td.style.width = ow + "px";
                }
                oh = sizeDiv.offsetHeight + 2;
                if (Five.Client.isQuirks && this.border != null && this.border != Five.Constants.none) {
                    oh += 3;
                }
            }
            else if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == "DIV") {
                sizeDiv = (sizeDiv.firstChild);
                oh = sizeDiv.offsetHeight;
            }
            ow = sizeDiv.offsetWidth + this.textWidthPadding;
            if (this.clipped) {
                oh = Math.min(oh, this.bounds.height);
            }
            this.offsetWidth = ow;
            this.offsetHeight = oh;
            w = this.bounds.width / s;
            var h = this.bounds.height / s;
            if (Five.Client.isQuirks && (this.clipped || (this.overflow == Five.Overflow.width && h > 0))) {
                h = Math.min(h, oh);
                style.height = Math.round(h) + "px";
            }
            else {
                h = oh;
            }
            if (this.overflow != Five.Overflow.fill && this.overflow != Five.Overflow.width) {
                if (this.clipped) {
                    ow = Math.min(w, ow);
                }
                w = ow;
                if ((Five.Client.isQuirks && this.clipped) || this.wrap) {
                    style.width = Math.round(w) + "px";
                }
            }
            h *= s;
            w *= s;
            var rad = this.getTextRotation() * (Math.PI / 180);
            var realCos = parseFloat(Math.cos(rad).toFixed(8));
            var realSin = parseFloat(Math.sin(-rad).toFixed(8));
            rad %= 2 * Math.PI;
            if (rad < 0) {
                rad += 2 * Math.PI;
            }
            rad %= Math.PI;
            if (rad > Math.PI / 2) {
                rad = Math.PI - rad;
            }
            var cos = Math.cos(rad);
            var sin = Math.sin(-rad);
            var tx = w * -(dx + 0.5);
            var ty = h * -(dy + 0.5);
            var topFix = (h - h * cos + w * sin) / 2 + realSin * tx - realCos * ty;
            var leftFix = (w - w * cos + h * sin) / 2 - realCos * tx - realSin * ty;
            if (rad != 0) {
                style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + realCos + ", M12=" +
                    realSin + ", M21=" + (-realSin) + ", M22=" + realCos + ", sizingMethod='auto expand')";
            }
            style.zoom = s;
            style.left = Math.round(this.bounds.x + leftFix - w / 2) + "px";
            style.top = Math.round(this.bounds.y + topFix - h / 2) + "px";
        };
        TextShape.prototype.updateValue = function () {
            {
                var val = this.value;
                if (this.dialect != Five.Dialect.StrictHtml) {
                    val = Five.Utils.htmlEntities(val, false);
                }
                val = (this.replaceLinefeeds) ? val.replace(/\n/g, "<br/>") : val;
                var bg = (this.background != null && this.background != Five.Constants.none) ? this.background : null;
                var bd = (this.border != null && this.border != Five.Constants.none) ? this.border : null;
                if (this.overflow == Five.Overflow.fill || this.overflow == Five.Overflow.width) {
                    if (bg != null) {
                        this.nodeStyle().backgroundColor = bg;
                    }
                    if (bd != null) {
                        this.nodeStyle().border = "1px solid " + bd;
                    }
                }
                else {
                    var css = "";
                    if (bg != null) {
                        css += "background-color:" + bg + ";";
                    }
                    if (bd != null) {
                        css += "border:1px solid " + bd + ";";
                    }
                    val = "<div style=\"zoom:1;" + css + "display:inline-block;_display:inline;" +
                        "text-decoration:inherit;padding-bottom:1px;padding-right:1px;line-height:" +
                        this.nodeStyle().lineHeight + "\">" + val + "</div>";
                    this.nodeStyle().lineHeight = "";
                }
                this.node.innerHTML = val;
            }
        };
        TextShape.prototype.updateFont = function (node) {
            var style = Five.Utils.nodeStyle(node);
            if (Five.Constants.absoluteLineHeight)
                style.lineHeight = "" + Math.round(this.size * Five.Constants.lineHeight) + "px";
            else
                style.lineHeight = "" + Five.Constants.lineHeight;
            style.fontSize = Math.round(this.size) + "px";
            style.fontFamily = this.family;
            style.verticalAlign = "top";
            style.color = this.color;
            if ((this.fontStyle & Five.FontStyle.Bold) == Five.FontStyle.Bold) {
                style.fontWeight = "bold";
            }
            else {
                style.fontWeight = "";
            }
            if ((this.fontStyle & Five.FontStyle.Italic) == Five.FontStyle.Italic) {
                style.fontStyle = "italic";
            }
            else {
                style.fontStyle = "";
            }
            if ((this.fontStyle & Five.FontStyle.Underline) == Five.FontStyle.Underline) {
                style.textDecoration = "underline";
            }
            else {
                style.textDecoration = "";
            }
            if (this.align == Five.HorizontalAlign.Center) {
                style.textAlign = "center";
            }
            else if (this.align == Five.HorizontalAlign.Right) {
                style.textAlign = "right";
            }
            else {
                style.textAlign = "left";
            }
        };
        TextShape.prototype.updateSize = function (node, enableWrap) {
            var w = Math.round(this.bounds.width / this.scale);
            var h = Math.round(this.bounds.height / this.scale);
            var style = node.style;
            if (this.clipped) {
                style.overflow = "hidden";
                style.width = w + "px";
                if (!Five.Client.isQuirks) {
                    style.maxHeight = h + "px";
                }
            }
            else if (this.overflow == Five.Overflow.fill) {
                style.width = w + "px";
                style.height = h + "px";
            }
            else if (this.overflow == Five.Overflow.width) {
                style.width = w + "px";
                style.maxHeight = h + "px";
            }
            if (this.wrap && w > 0) {
                style.whiteSpace = "normal";
                style.width = w + "px";
                if (enableWrap) {
                    var sizeDiv = node;
                    if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == "DIV") {
                        sizeDiv = sizeDiv.firstChild;
                    }
                    var tmp = sizeDiv.offsetWidth + 3;
                    if (this.clipped) {
                        tmp = Math.min(tmp, w);
                    }
                    style.width = tmp + "px";
                }
            }
            else {
                style.whiteSpace = "nowrap";
            }
        };
        TextShape.prototype.updateMargin = function () {
            this.margin = Five.Utils.getAlignmentAsPoint(this.align, this.valign);
        };
        TextShape.prototype.getSpacing = function () {
            var dx;
            var dy;
            if (this.align == Five.HorizontalAlign.Center) {
                dx = (this.spacingLeft - this.spacingRight) / 2;
            }
            else if (this.align == Five.HorizontalAlign.Right) {
                dx = -this.spacingRight - this.baseSpacingRight;
            }
            else {
                dx = this.spacingLeft + this.baseSpacingLeft;
            }
            if (this.valign == Five.VerticalAlign.Middle) {
                dy = (this.spacingTop - this.spacingBottom) / 2;
            }
            else if (this.valign == Five.VerticalAlign.Bottom) {
                dy = -this.spacingBottom - this.baseSpacingBottom;
                ;
            }
            else {
                dy = this.spacingTop + this.baseSpacingTop;
            }
            return new Five.Point(dx, dy);
        };
        TextShape.factory = function (value, bounds, align, valign, color, family, size, fontStyle, spacing, spacingTop, spacingRight, spacingBottom, spacingLeft, horizontal, background, border, wrap, clipped, overflow, labelPadding) {
            return new TextShape(value, bounds, align, valign, color, family, size, fontStyle, spacing, spacingTop, spacingRight, spacingBottom, spacingLeft, horizontal, background, border, wrap, clipped, overflow, labelPadding);
        };
        TextShape.baseSpacingTop = 0;
        TextShape.baseSpacingBottom = 0;
        TextShape.baseSpacingLeft = 0;
        TextShape.baseSpacingRight = 0;
        TextShape.verticalTextRotation = -90;
        return TextShape;
    }(Five.Shape));
    Five.TextShape = TextShape;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ToolbarSelectEvent = (function (_super) {
        __extends(ToolbarSelectEvent, _super);
        function ToolbarSelectEvent(funct) {
            var _this = _super.call(this) || this;
            _this.funct = funct;
            return _this;
        }
        return ToolbarSelectEvent;
    }(Five.BasicEvent));
    Five.ToolbarSelectEvent = ToolbarSelectEvent;
    var Toolbar = (function () {
        function Toolbar(container) {
            this.container = null;
            this.enabled = true;
            this.noReset = false;
            this.updateDefaultMode = true;
            this.onSelect = new Five.EventListeners();
            this.container = container;
        }
        Toolbar.prototype.addItem = function (title, icon, funct, pressedIcon, style, factoryMethod) {
            var _this = this;
            var img = document.createElement((icon != null) ? 'img' : 'button');
            var initialClassName = style || ((factoryMethod != null) ? 'mxToolbarMode' : 'mxToolbarItem');
            img.className = initialClassName;
            img.setAttribute('src', icon);
            if (title != null) {
                if (icon != null) {
                    img.setAttribute('title', title);
                }
                else {
                    Five.Utils.write(img, title);
                }
            }
            this.container.appendChild(img);
            if (funct != null) {
                Five.Events.addListener(img, 'click', funct);
                if (Five.Client.isTouch) {
                    Five.Events.addListener(img, 'touchend', funct);
                }
            }
            var mouseHandler = function () {
                if (pressedIcon != null) {
                    img.setAttribute('src', icon);
                }
                else {
                    img.style.backgroundColor = '';
                }
            };
            Five.Events.addGestureListeners(img, function (evt) {
                if (pressedIcon != null) {
                    img.setAttribute('src', pressedIcon);
                }
                else {
                    img.style.backgroundColor = 'gray';
                }
                if (factoryMethod != null) {
                    if (_this.menu == null) {
                        _this.menu = new Five.PopupMenu();
                        _this.menu.init();
                    }
                    var last = _this.currentImg;
                    if (_this.menu.isMenuShowing()) {
                        _this.menu.hideMenu();
                    }
                    if (last != img) {
                        _this.currentImg = img;
                        _this.menu.factoryMethod = factoryMethod;
                        var point = new Five.Point(img.offsetLeft, img.offsetTop + img.offsetHeight);
                        _this.menu.popup(point.x, point.y, null, evt);
                        if (_this.menu.isMenuShowing()) {
                            img.className = initialClassName + 'Selected';
                            _this.menu.hideMenu = function () {
                                Five.PopupMenu.prototype.hideMenu.apply(_this);
                                img.className = initialClassName;
                                _this.currentImg = null;
                            };
                        }
                    }
                }
            }, null, mouseHandler);
            Five.Events.addListener(img, 'mouseout', mouseHandler);
            return img;
        };
        Toolbar.prototype.addCombo = function (style) {
            var div = document.createElement('div');
            div.style.display = 'inline';
            div.className = 'ToolbarComboContainer';
            var select = document.createElement('select');
            select.className = style || 'ToolbarCombo';
            div.appendChild(select);
            this.container.appendChild(div);
            return select;
        };
        Toolbar.prototype.addActionCombo = function (title, style) {
            var select = document.createElement('select');
            select.className = style || 'ToolbarCombo';
            this.addOption(select, title, null);
            Five.Events.addListener(select, 'change', function (evt) {
                var value = select.options[select.selectedIndex];
                select.selectedIndex = 0;
            });
            this.container.appendChild(select);
            return select;
        };
        Toolbar.prototype.addOption = function (combo, title, value) {
            var option = document.createElement('option');
            Five.Utils.writeln(option, title);
            option.value = value;
            combo.appendChild(option);
            return option;
        };
        Toolbar.prototype.addSwitchMode = function (title, icon, funct, pressedIcon, style) {
            var _this = this;
            var img = document.createElement('img');
            var imgAttachment = img;
            imgAttachment.initialClassName = style || 'ToolbarMode';
            img.className = imgAttachment.initialClassName;
            img.src = icon;
            imgAttachment.altIcon = pressedIcon;
            if (title != null) {
                img.setAttribute('title', title);
            }
            Five.Events.addListener(img, "click", function () {
                var selAttachment = _this.selectedMode;
                var tmp = selAttachment.altIcon;
                if (tmp != null) {
                    selAttachment.altIcon = _this.selectedMode.getAttribute('src');
                    _this.selectedMode.setAttribute('src', tmp);
                }
                else {
                    _this.selectedMode.className = selAttachment.initialClassName;
                }
                if (_this.updateDefaultMode) {
                    _this.defaultMode = img;
                }
                _this.selectedMode = img;
                tmp = imgAttachment.altIcon;
                if (tmp != null) {
                    imgAttachment.altIcon = img.src;
                    img.src = tmp;
                }
                else {
                    img.className = imgAttachment.initialClassName + 'Selected';
                }
                _this.onSelect.fire(new ToolbarSelectEvent(null));
                funct();
            });
            this.container.appendChild(img);
            if (this.defaultMode == null) {
                this.defaultMode = img;
                this.selectMode(img);
                funct();
            }
            return img;
        };
        Toolbar.prototype.addMode = function (title, icon, funct, pressedIcon, style, toggle) {
            var _this = this;
            toggle = (toggle != null) ? toggle : true;
            var img = document.createElement((icon != null) ? 'img' : 'button');
            var imgAttachment = img;
            imgAttachment.initialClassName = style || 'ToolbarMode';
            img.className = imgAttachment.initialClassName;
            img.setAttribute('src', icon);
            imgAttachment.altIcon = pressedIcon;
            if (title != null) {
                img.setAttribute('title', title);
            }
            if (this.enabled && toggle) {
                Five.Events.addListener(img, 'click', function () {
                    _this.selectMode(img, funct);
                    _this.noReset = false;
                });
                Five.Events.addListener(img, 'dblclick', function () {
                    _this.selectMode(img, funct);
                    _this.noReset = true;
                });
                if (this.defaultMode == null) {
                    this.defaultMode = img;
                    this.defaultFunction = funct;
                    this.selectMode(img, funct);
                }
            }
            this.container.appendChild(img);
            return img;
        };
        Toolbar.prototype.selectMode = function (domNode, funct) {
            if (this.selectedMode != domNode) {
                var tmp;
                var selAttachment;
                if (this.selectedMode != null) {
                    selAttachment = this.selectedMode;
                    tmp = selAttachment.altIcon;
                    if (tmp != null) {
                        selAttachment.altIcon = this.selectedMode.getAttribute('src');
                        this.selectedMode.setAttribute('src', tmp);
                    }
                    else {
                        this.selectedMode.className = selAttachment.initialClassName;
                    }
                }
                this.selectedMode = domNode;
                selAttachment = this.selectedMode;
                tmp = selAttachment.altIcon;
                if (tmp != null) {
                    selAttachment.altIcon = this.selectedMode.getAttribute('src');
                    this.selectedMode.setAttribute('src', tmp);
                }
                else {
                    this.selectedMode.className = selAttachment.initialClassName + 'Selected';
                }
                this.onSelect.fire(new ToolbarSelectEvent(funct));
            }
        };
        Toolbar.prototype.resetMode = function (forced) {
            if ((forced || !this.noReset) && this.selectedMode != this.defaultMode) {
                this.selectMode(this.defaultMode, this.defaultFunction);
            }
        };
        Toolbar.prototype.addSeparator = function (icon) {
            return this.addItem(null, icon, null);
        };
        Toolbar.prototype.addBreak = function () {
            Five.Utils.br(this.container);
        };
        Toolbar.prototype.addLine = function () {
            var hr = document.createElement('hr');
            hr.style.marginRight = '6px';
            hr.setAttribute('size', '1');
            this.container.appendChild(hr);
        };
        Toolbar.prototype.destroy = function () {
            Five.Events.release(this.container);
            this.container = null;
            this.defaultMode = null;
            this.defaultFunction = null;
            this.selectedMode = null;
            if (this.menu != null) {
                this.menu.destroy();
            }
        };
        return Toolbar;
    }());
    Five.Toolbar = Toolbar;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var TooltipHandler = (function () {
        function TooltipHandler(graph, delay) {
            if (delay === void 0) { delay = 500; }
            this.graph = null;
            this.delay = null;
            this.zIndex = 10005;
            this.ignoreTouchEvents = true;
            this.hideOnHover = false;
            this.destroyed = false;
            this.enabled = true;
            if (graph != null)
                this.graph = graph;
            this.delay = delay;
            this.graph.addMouseListener(this);
        }
        TooltipHandler.prototype.isEnabled = function () {
            return this.enabled;
        };
        TooltipHandler.prototype.setEnabled = function (enabled) {
            this.enabled = enabled;
        };
        TooltipHandler.prototype.isHideOnHover = function () {
            return this.hideOnHover;
        };
        TooltipHandler.prototype.setHideOnHover = function (value) {
            this.hideOnHover = value;
        };
        TooltipHandler.prototype.init = function () {
            var _this = this;
            if (document.body != null) {
                this.div = document.createElement("div");
                this.div.className = "mxTooltip";
                this.div.style.visibility = "hidden";
                document.body.appendChild(this.div);
                Five.Events.addGestureListeners(this.div, Five.Utils.bind(this, function () { _this.hideTooltip(); }));
            }
        };
        TooltipHandler.prototype.mouseDown = function (sender, me) {
            this.reset(me, false);
            this.hideTooltip();
        };
        TooltipHandler.prototype.mouseMove = function (sender, me) {
            if (me.getX() != this.lastX || me.getY() != this.lastY) {
                this.reset(me, true);
                if (this.isHideOnHover() || me.getState() != this.state || (me.getSource() != this.node &&
                    (!this.stateSource || (me.getState() != null && this.stateSource ==
                        (me.isSource(me.getState().shape) || !me.isSource(me.getState().text)))))) {
                    this.hideTooltip();
                }
            }
            this.lastX = me.getX();
            this.lastY = me.getY();
        };
        TooltipHandler.prototype.mouseUp = function (sender, me) {
            this.reset(me, true);
            this.hideTooltip();
        };
        TooltipHandler.prototype.resetTimer = function () {
            if (this.thread != null) {
                window.clearTimeout(this.thread);
                this.thread = null;
            }
        };
        TooltipHandler.prototype.reset = function (me, restart) {
            var _this = this;
            if (!this.ignoreTouchEvents || Five.Events.isMouseEvent(me.getEvent())) {
                this.resetTimer();
                if (restart && this.isEnabled() && me.getState() != null && (this.div == null ||
                    this.div.style.visibility == "hidden")) {
                    var state = me.getState();
                    var node = me.getSource();
                    var x = me.getX();
                    var y = me.getY();
                    var stateSource = me.isSource(state.shape) || me.isSource(state.text);
                    this.thread = window.setTimeout(Five.Utils.bind(this, function () {
                        if (!_this.graph.isEditing() && !_this.graph.popupMenuHandler.isMenuShowing() && !_this.graph.isMouseDown) {
                            var tip = _this.graph.getTooltip(state, node, x, y);
                            _this.show(tip, x, y);
                            _this.state = state;
                            _this.node = node;
                            _this.stateSource = stateSource;
                        }
                    }), this.delay);
                }
            }
        };
        TooltipHandler.prototype.hide = function () {
            this.resetTimer();
            this.hideTooltip();
        };
        TooltipHandler.prototype.hideTooltip = function () {
            if (this.div != null) {
                this.div.style.visibility = "hidden";
            }
        };
        TooltipHandler.prototype.show = function (tip, x, y) {
            if (!this.destroyed && tip != null && tip.length > 0) {
                if (this.div == null) {
                    this.init();
                }
                var origin = Five.Utils.getScrollOrigin();
                this.div.style.zIndex = String(this.zIndex);
                this.div.style.left = (x + origin.x) + "px";
                this.div.style.top = (y + Five.Constants.tooltipVerticalOffset + origin.y) + "px";
                this.div.innerHTML = tip.replace(/\n/g, "<br>");
                this.div.style.visibility = "";
                Five.Utils.fit(this.div);
            }
        };
        TooltipHandler.prototype.destroy = function () {
            if (!this.destroyed) {
                this.graph.removeMouseListener(this);
                Five.Events.release(this.div);
                if (this.div != null && this.div.parentNode != null) {
                    this.div.parentNode.removeChild(this.div);
                }
                this.destroyed = true;
                this.div = null;
            }
        };
        return TooltipHandler;
    }());
    Five.TooltipHandler = TooltipHandler;
})(Five || (Five = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var Uml;
    (function (Uml) {
        var Constants = Five.Constants;
        var Rectangle = Five.Rectangle;
        var ShapeStyle = Five.ShapeStyle;
        var Overflow = Five.Overflow;
        var Whitespace = Five.Whitespace;
        var AppliedStyle = Five.AppliedStyle;
        var behaviorAction = Five.behaviorAction;
        var KeyCode = Five.KeyCode;
        var KeyModifier = Five.KeyModifier;
        var Utils = Five.Utils;
        var Node = (function () {
            function Node(text) {
                this._text = text;
            }
            Object.defineProperty(Node.prototype, "text", {
                get: function () { return this._text; },
                enumerable: true,
                configurable: true
            });
            return Node;
        }());
        var InitialNode = (function (_super) {
            __extends(InitialNode, _super);
            function InitialNode() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return InitialNode;
        }(Node));
        var Edge = (function () {
            function Edge() {
            }
            return Edge;
        }());
        var Package = (function () {
            function Package() {
                this.packages = [];
                this.elements = [];
                this.edges = [];
            }
            Package.prototype.createInitial = function (text) {
                return new InitialNode(text);
            };
            return Package;
        }());
        var Activity = (function (_super) {
            __extends(Activity, _super);
            function Activity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return Activity;
        }(Node));
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return Model;
        }(Package));
        var Adaptor = (function () {
            function Adaptor(graph, mindmap) {
                this.graph = graph;
                this.mindmap = mindmap;
                this.cellNodeMap = {};
                this.nodeSizeRestriction = {
                    minHeight: function () { return 40; },
                    maxWidth: function () { return 160; }
                };
                graph.setAutoSizeCells(true);
                graph.autoSizeCellsOnAdd = true;
                graph.htmlLabels = true;
            }
            Adaptor.prototype.createStyles = function (styleSheet) {
                Constants.rectangleRoundingFactor = 0.35;
                Constants.shadowColor = "rgba(204, 204, 204, 0.8)";
                var vStyle = styleSheet.getDefaultVertexStyle();
                vStyle.shape = ShapeStyle.Rectangle;
                vStyle.fontSize = 14;
                vStyle.fontColor = "black";
                vStyle.strokeColor = "BurlyWood";
                vStyle.fillColor = "cornsilk";
                vStyle.shadow = true;
                vStyle.rounded = true;
                vStyle.overflow = Overflow.width;
                vStyle.autoSize = true;
                vStyle.whitespace = Whitespace.wrap;
                var eStyle = styleSheet.getDefaultEdgeStyle();
                eStyle.strokeColor = "brown";
            };
            Adaptor.prototype.renderNode = function (node, parent) {
                return null;
            };
            Adaptor.prototype.render = function () {
                this.createStyles(this.graph.getStylesheet());
                var parent = this.graph.getDefaultParent();
            };
            Adaptor.rootStyleName = "mmRoot";
            Adaptor.childLinkStyleName = "mmChildLink";
            return Adaptor;
        }());
        function createActivity() {
            return new ActivityBehavior();
        }
        Uml.createActivity = createActivity;
        var ActivityBehavior = (function () {
            function ActivityBehavior() {
                this.nodeSizeRestriction = {
                    minHeight: function () { return 10; }
                };
                this.allowResize = false;
                this.setupActions();
            }
            ActivityBehavior.prototype.setupActions = function () {
                var _this = this;
                this.actions = [
                    behaviorAction("Add Start", 1, KeyCode.tab, KeyModifier.none, function () { return true; }, function (s) { return _this.insertStart(s); })
                ];
            };
            ActivityBehavior.prototype.setPresentation = function (presenter) {
                this.presenter = presenter;
                ActivityStyler.setupStyles(presenter.getStylesheet());
                ActivityStyler.configurePresenter(presenter);
            };
            ActivityBehavior.prototype.bootstrap = function () {
                var model = new Model();
                model.createInitial("Start");
                this.importModel(model);
            };
            ActivityBehavior.prototype.resolveDefaultStyle = function (node) {
                if (node instanceof InitialNode)
                    return ActivityStyler.initialStyle;
                return ActivityStyler.defaultStyle;
            };
            ActivityBehavior.prototype.createDefaultNodeView = function (node, cachedFactory) {
                var factory = cachedFactory ? cachedFactory : this.presenter.getFactory();
                var view = factory.insertNode(this.presenter.getRootParent(), node.text, ActivityStyler.defaultNodeSize, new AppliedStyle(this.resolveDefaultStyle(node)), false, this.nodeSizeRestriction);
                node.view = view;
                view.semanticObject = node;
                return view;
            };
            ActivityBehavior.prototype.presentElement = function (model, parent, factory) {
                var view = this.createDefaultNodeView(model, factory);
                return view;
            };
            ActivityBehavior.prototype.PresentPackage = function (pack, parent, factory) {
                var _this = this;
                pack.elements.forEach(function (e) {
                    _this.presentElement(e, parent, factory);
                });
                pack.edges.forEach(function (e) {
                    _this.createDefaultLinkView(e, e.source, e.target);
                });
            };
            ActivityBehavior.prototype.importModel = function (model) {
                var presentationModel = this.presenter.getModel();
                var factory = this.presenter.getFactory();
                presentationModel.beginUpdate();
                try {
                    var parent = this.presenter.getRootParent();
                    this.model = model;
                    this.PresentPackage(model, parent, factory);
                }
                finally {
                    presentationModel.endUpdate();
                }
            };
            ActivityBehavior.prototype.createDefaultLinkView = function (edge, source, target, cachedFactory) {
                var factory = cachedFactory ? cachedFactory : this.presenter.getFactory();
                var view = factory.insertLink(this.presenter.getRootParent(), null, source.view, target.view, new AppliedStyle(ActivityStyler.defaultLinkStyle));
                edge.view = view;
                view.semanticObject = edge;
                return view;
            };
            ActivityBehavior.prototype.getDiagram = function () {
                return null;
            };
            ActivityBehavior.prototype.load = function (mindMapDto) {
            };
            ActivityBehavior.prototype.setDockPanelFactory = function (dockPanelFactory) {
                this.dockPanelFactory = dockPanelFactory;
            };
            ActivityBehavior.prototype.insertStart = function (presentationSelection) {
                var presentationModel = this.presenter.getModel();
                presentationModel.beginUpdate();
                try {
                    var model = new InitialNode("start");
                    var view = this.createDefaultNodeView(model);
                    this.presenter.setSelection([view]);
                }
                finally {
                    presentationModel.endUpdate();
                }
            };
            ActivityBehavior.prototype.menuCaption = function () {
                return "Activity";
            };
            return ActivityBehavior;
        }());
        var ActivityStyler = (function () {
            function ActivityStyler() {
            }
            ActivityStyler.configurePresenter = function (presenter) {
                var config = presenter.configuration();
                config.setAutoSizeCells(true);
                config.setAutoSizeCellsOnAdd(true);
                config.setResizeContainer(false);
                config.setHtmlLabels(true);
            };
            ActivityStyler.setupStyles = function (styleSheet) {
                var defNodeStyle = styleSheet.getDefaultVertexStyle();
                defNodeStyle.fillColor = "cornsilk";
                defNodeStyle.strokeColor = "BurlyWood";
                defNodeStyle.shape = ShapeStyle.Rectangle;
                defNodeStyle.fontSize = 14;
                defNodeStyle.fontColor = "black";
                defNodeStyle.shadow = true;
                defNodeStyle.rounded = true;
                defNodeStyle.overflow = Overflow.width;
                defNodeStyle.autoSize = true;
                defNodeStyle.whitespace = Whitespace.wrap;
                var initialStyle = Utils.clone(defNodeStyle);
                initialStyle.shape = ShapeStyle.Ellipse;
                initialStyle.entryX = 100;
                styleSheet.putCellStyle(this.initialStyle, initialStyle);
            };
            ActivityStyler.defaultNodeSize = new Rectangle(0, 0, 160, 40);
            ActivityStyler.defaultStyle = null;
            ActivityStyler.defaultLinkStyle = null;
            ActivityStyler.initialStyle = "initial";
            return ActivityStyler;
        }());
    })(Uml = CloudDiagram.Uml || (CloudDiagram.Uml = {}));
})(CloudDiagram || (CloudDiagram = {}));
var Five;
(function (Five) {
    var UndoManager = (function () {
        function UndoManager(size) {
            if (size === void 0) { size = 100; }
            this.onClear = new Five.EventListeners();
            this.onUndo = new Five.EventListeners();
            this.onRedo = new Five.EventListeners();
            this.history = null;
            this.indexOfNextAdd = 0;
            this.size = size;
            this.clear();
        }
        UndoManager.prototype.isEmpty = function () {
            return this.history.length == 0;
        };
        UndoManager.prototype.clear = function () {
            this.history = [];
            this.indexOfNextAdd = 0;
            this.onClear.fire();
        };
        UndoManager.prototype.canUndo = function () {
            return this.indexOfNextAdd > 0;
        };
        UndoManager.prototype.undo = function () {
            while (this.indexOfNextAdd > 0) {
                var edit = this.history[--this.indexOfNextAdd];
                edit.undo();
                if (edit.isSignificant()) {
                    this.onUndo.fire(new Five.UndoEvent(edit));
                    break;
                }
            }
        };
        UndoManager.prototype.canRedo = function () {
            return this.indexOfNextAdd < this.history.length;
        };
        UndoManager.prototype.redo = function () {
            var n = this.history.length;
            while (this.indexOfNextAdd < n) {
                var edit = this.history[this.indexOfNextAdd++];
                edit.redo();
                if (edit.isSignificant()) {
                    this.onRedo.fire(new Five.UndoEvent(edit));
                    break;
                }
            }
        };
        UndoManager.prototype.undoableEditHappened = function (undoableEdit) {
            this.trim();
            if (this.size > 0 &&
                this.size == this.history.length) {
                this.history.shift();
            }
            this.history.push(undoableEdit);
            this.indexOfNextAdd = this.history.length;
        };
        UndoManager.prototype.trim = function () {
            if (this.history.length > this.indexOfNextAdd) {
                var edits = this.history.splice(this.indexOfNextAdd, this.history.length - this.indexOfNextAdd);
                for (var i = 0; i < edits.length; i++) {
                    edits[i].die();
                }
            }
        };
        return UndoManager;
    }());
    Five.UndoManager = UndoManager;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var UrlConverter = (function () {
        function UrlConverter() {
            this.enabled = true;
            this.baseUrl = null;
            this.baseDomain = null;
        }
        UrlConverter.prototype.updateBaseUrl = function () {
            this.baseDomain = location.protocol + "//" + location.host;
            this.baseUrl = this.baseDomain + location.pathname;
            var tmp = this.baseUrl.lastIndexOf("/");
            if (tmp > 0) {
                this.baseUrl = this.baseUrl.substring(0, tmp + 1);
            }
        };
        UrlConverter.prototype.isEnabled = function () {
            return this.enabled;
        };
        UrlConverter.prototype.setEnabled = function (value) {
            this.enabled = value;
        };
        UrlConverter.prototype.getBaseUrl = function () {
            return this.baseUrl;
        };
        UrlConverter.prototype.setBaseUrl = function (value) {
            this.baseUrl = value;
        };
        UrlConverter.prototype.getBaseDomain = function () {
            return this.baseDomain;
        };
        UrlConverter.prototype.setBaseDomain = function (value) {
            this.baseDomain = value;
        };
        UrlConverter.prototype.isRelativeUrl = function (url) {
            return url.substring(0, 2) != "//" && url.substring(0, 7) != "http://" && url.substring(0, 8) != "https://" && url.substring(0, 10) != "data:image";
        };
        UrlConverter.prototype.convert = function (url) {
            if (this.isEnabled() && this.isRelativeUrl(url)) {
                if (this.getBaseUrl() == null) {
                    this.updateBaseUrl();
                }
                if (url.charAt(0) == "/") {
                    url = this.getBaseDomain() + url;
                }
                else {
                    url = this.getBaseUrl() + url;
                }
            }
            return url;
        };
        return UrlConverter;
    }());
    Five.UrlConverter = UrlConverter;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var ValueChange = (function () {
        function ValueChange(model, cell, value) {
            this.model = model;
            this.cell = cell;
            this.value = value;
            this.previous = value;
        }
        ValueChange.prototype.execute = function () {
            this.value = this.previous;
            this.previous = this.model.valueForCellChanged(this.cell, this.previous);
        };
        return ValueChange;
    }());
    Five.ValueChange = ValueChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var VertexHandler = (function () {
        function VertexHandler(state, nodeSelConfig, selHandleConfig) {
            var _this = this;
            this.nodeSelConfig = nodeSelConfig;
            this.selHandleConfig = selHandleConfig;
            this.graph = null;
            this.state = null;
            this.singleSizer = false;
            this._index = null;
            this.allowHandleBoundsCheck = true;
            this.handleImage = null;
            this.tolerance = 0;
            this.rotationEnabled = false;
            this.rotationRaster = true;
            this.rotationCursor = "crosshair";
            this.livePreview = false;
            this.manageSizers = false;
            this.constrainGroupByChildren = false;
            this.rotationHandleVSpacing = -16;
            this.horizontalOffset = 0;
            this.verticalOffset = 0;
            if (state != null) {
                this.state = state;
                this.init();
                this.escapeHandler = Five.Utils.bind(this, function () {
                    if (_this.livePreview) {
                        _this.state.view.graph.cellRenderer.redraw(_this.state, true);
                        _this.state.view.invalidate(_this.state.cell);
                        _this.state.invalid = false;
                        _this.state.view.validate();
                    }
                    _this.reset();
                });
                this.state.view.graph.onEscape.add(this.escapeHandler);
            }
        }
        Object.defineProperty(VertexHandler.prototype, "index", {
            get: function () {
                return this._index;
            },
            set: function (value) {
                this._index = value;
            },
            enumerable: true,
            configurable: true
        });
        VertexHandler.prototype.init = function () {
            var _this = this;
            this.graph = this.state.view.graph;
            this.selectionBounds = this.getSelectionBounds(this.state);
            this.bounds = new Five.Rectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);
            this.selectionBorder = this.createSelectionShape(this.bounds);
            this.selectionBorder.dialect = Five.Dialect.Svg;
            this.selectionBorder.pointerEvents = false;
            this.selectionBorder.rotation = this.state.style.rotation;
            this.selectionBorder.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
            Five.Events.redirectMouseEvents(this.selectionBorder.node, this.graph, function () { return _this.state; });
            if (this.graph.isCellMovable(this.state.cell)) {
                Five.Utils.nodeStyle(this.selectionBorder.node).cursor = Five.Constants.cursorMovableVertex;
            }
            if (Five.GraphHandler.maxCells <= 0 || this.graph.getSelectionCount() < Five.GraphHandler.maxCells) {
                var resizable = this.graph.isCellResizable(this.state.cell);
                this.sizers = [];
                if (resizable || (this.graph.isLabelMovable(this.state.cell) &&
                    this.state.width >= 2 && this.state.height >= 2)) {
                    var i = 0;
                    if (resizable) {
                        if (!this.singleSizer) {
                            this.sizers.push(this.createSizer("nw-resize", i++));
                            this.sizers.push(this.createSizer("n-resize", i++));
                            this.sizers.push(this.createSizer("ne-resize", i++));
                            this.sizers.push(this.createSizer("w-resize", i++));
                            this.sizers.push(this.createSizer("e-resize", i++));
                            this.sizers.push(this.createSizer("sw-resize", i++));
                            this.sizers.push(this.createSizer("s-resize", i++));
                        }
                        this.sizers.push(this.createSizer("se-resize", i++));
                    }
                    var geo = Five.Cells.getGeometry(this.state.cell);
                    if (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&
                        this.graph.isLabelMovable(this.state.cell)) {
                        this.labelShape = this.createSizer(Five.Constants.cursorLabelHandle, Five.EventHandle.Label, Five.Constants.labelHandleSize, Five.Constants.labelHandleFillcolor);
                        this.sizers.push(this.labelShape);
                    }
                }
                else if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&
                    this.state.width < 2 && this.state.height < 2) {
                    this.labelShape = this.createSizer(Five.Constants.cursorMovableVertex, null, null, Five.Constants.labelHandleFillcolor);
                    this.sizers.push(this.labelShape);
                }
            }
            if (this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&
                (Five.GraphHandler.maxCells <= 0 || this.graph.getSelectionCount() < Five.GraphHandler.maxCells) &&
                this.state.width > 2 && this.state.height > 2) {
                this.rotationShape = this.createSizer(this.rotationCursor, Five.EventHandle.Rotation, this.selHandleConfig.size + 3, this.selHandleConfig.fillColor);
                this.sizers.push(this.rotationShape);
            }
            this.redraw();
            if (this.constrainGroupByChildren) {
                this.updateMinBounds();
            }
        };
        VertexHandler.prototype.createCustomHandles = function () {
            return null;
        };
        VertexHandler.prototype.isConstrainedEvent = function (me) {
            return Five.Events.isMouseShiftDown(me.getEvent()) || this.state.style[Five.Constants.styleAspect] == "fixed";
        };
        VertexHandler.prototype.updateMinBounds = function () {
            var children = this.graph.getChildCells(this.state.cell);
            if (children.length > 0) {
                this.minBounds = this.graph.view.getBounds(children);
                if (this.minBounds != null) {
                    var s = this.state.view.scale;
                    var t = this.state.view.translate;
                    this.minBounds.x -= this.state.x;
                    this.minBounds.y -= this.state.y;
                    this.minBounds.x /= s;
                    this.minBounds.y /= s;
                    this.minBounds.width /= s;
                    this.minBounds.height /= s;
                    this.x0 = this.state.x / s - t.x;
                    this.y0 = this.state.y / s - t.y;
                }
            }
        };
        VertexHandler.prototype.getSelectionBounds = function (state) {
            return new Five.Rectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));
        };
        VertexHandler.prototype.createSelectionShape = function (bounds) {
            if (this.nodeSelConfig.strokeWidth > 1) {
                bounds = bounds.clone();
                bounds.grow(this.nodeSelConfig.strokeWidth - 1);
            }
            var shape = new Five.RectangleShape(bounds, null, this.nodeSelConfig.color);
            shape.strokewidth = this.nodeSelConfig.strokeWidth;
            shape.isDashed = this.nodeSelConfig.dashed;
            return shape;
        };
        VertexHandler.prototype.createSizer = function (cursor, index, size, fillColor) {
            var _this = this;
            size = size || this.selHandleConfig.size;
            var bounds = new Five.Rectangle(0, 0, size, size);
            var sizer = this.createSizerShape(bounds, index, fillColor);
            if (sizer.isHtmlAllowed() && this.state.text != null && this.graph.container.is(this.state.text.node.parentNode)) {
                sizer.bounds.height -= 1;
                sizer.bounds.width -= 1;
                sizer.dialect = Five.Dialect.StrictHtml;
                sizer.init(this.graph.container);
            }
            else {
                sizer.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.MixedHtml : Five.Dialect.Svg;
                sizer.init(Five.ElementInitializer(this.graph.getView().getOverlayPane()));
            }
            Five.Events.redirectMouseEvents(sizer.node, this.graph, function () { return _this.state; });
            if (this.graph.isEnabled()) {
                Five.Utils.nodeStyle(sizer.node).cursor = cursor;
            }
            if (!this.isSizerVisible(index)) {
                Five.Utils.nodeStyle(sizer.node).visibility = "hidden";
            }
            return sizer;
        };
        VertexHandler.prototype.isSizerVisible = function (index) {
            return true;
        };
        VertexHandler.prototype.createSizerShape = function (bounds, index, fillColor) {
            if (this.handleImage != null) {
                bounds = new Five.Rectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);
                var shape = new Five.ImageShape(bounds, this.handleImage.src);
                shape.preserveImageAspect = false;
                return shape;
            }
            else if (index == Five.EventHandle.Rotation) {
                return new Five.EllipseShape(bounds, fillColor || this.selHandleConfig.fillColor, this.selHandleConfig.strokeColor);
            }
            else {
                return new Five.RectangleShape(bounds, fillColor || this.selHandleConfig.fillColor, this.selHandleConfig.strokeColor);
            }
        };
        VertexHandler.prototype.moveSizerTo = function (shape, x, y) {
            if (shape != null) {
                shape.bounds.x = Math.round(x - shape.bounds.width / 2);
                shape.bounds.y = Math.round(y - shape.bounds.height / 2);
                if (shape.node != null && Five.Utils.nodeStyle(shape.node).display != "none") {
                    shape.redraw();
                }
            }
        };
        VertexHandler.prototype.getHandleForEvent = function (me) {
            var tol = (!Five.Events.isMouseEvent(me.getEvent())) ? this.tolerance : 1;
            var hit = (this.allowHandleBoundsCheck && (Five.Client.isIe || tol > 0)) ?
                new Five.Rectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;
            var minDistSq = null;
            function checkShape(shape) {
                if (shape != null && (me.isSource(shape) || (hit != null && Five.Utils.intersects(shape.bounds, hit) &&
                    Five.Utils.nodeStyle(shape.node).display != "none" && Five.Utils.nodeStyle(shape.node).visibility != "hidden"))) {
                    var dx = me.getGraphX() - shape.bounds.getCenterX();
                    var dy = me.getGraphY() - shape.bounds.getCenterY();
                    var tmp = dx * dx + dy * dy;
                    if (minDistSq == null || tmp <= minDistSq) {
                        minDistSq = tmp;
                        return true;
                    }
                }
                return false;
            }
            if (checkShape(this.rotationShape)) {
                return Five.EventHandle.Rotation;
            }
            else if (checkShape(this.labelShape)) {
                return Five.EventHandle.Label;
            }
            if (this.sizers != null) {
                for (var i = 0; i < this.sizers.length; i++) {
                    if (checkShape(this.sizers[i])) {
                        return i;
                    }
                }
            }
            return null;
        };
        VertexHandler.prototype.mouseDown = function (sender, me) {
            var tol = (!Five.Events.isMouseEvent(me.getEvent())) ? this.tolerance : 0;
            if (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state)) {
                var handle = this.getHandleForEvent(me);
                if (handle != null) {
                    this.start(me.getGraphX(), me.getGraphY(), handle);
                    me.consume();
                }
            }
        };
        VertexHandler.prototype.isLivePreviewBorder = function () {
            return this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;
        };
        VertexHandler.prototype.start = function (x, y, index) {
            this.inTolerance = true;
            this.childOffsetX = 0;
            this.childOffsetY = 0;
            this.index = index;
            this.startX = x;
            this.startY = y;
            var parent = Five.Cells.getParent(this.state.cell);
            if (this.state.view.currentRoot != parent && (Five.Cells.isVertex(parent) || Five.Cells.isEdge(parent))) {
                this.parentState = this.state.view.graph.view.getState(parent);
            }
            Five.Utils.nodeStyle(this.selectionBorder.node).display = (index == Five.EventHandle.Rotation) ? "inline" : "none";
            if (!this.livePreview || this.isLivePreviewBorder()) {
                this.preview = this.createSelectionShape(this.bounds);
                if (!(Five.Client.isSvg && this.state.style.rotation != 0) &&
                    this.state.text != null && this.graph.container.is(this.state.text.node.parentNode)) {
                    this.preview.dialect = Five.Dialect.StrictHtml;
                    this.preview.init(this.graph.container);
                }
                else {
                    this.preview.dialect = (this.graph.dialect != Five.Dialect.Svg) ? Five.Dialect.Vml : Five.Dialect.Svg;
                    this.preview.init(Five.ElementInitializer(this.graph.view.getOverlayPane()));
                }
            }
            if (this.livePreview) {
                this.hideSizers();
                if (index == Five.EventHandle.Rotation) {
                    Five.Utils.nodeStyle(this.rotationShape.node).display = "";
                }
                else if (this.sizers != null && this.sizers[index] != null) {
                    Five.Utils.nodeStyle(this.sizers[index].node).display = "";
                }
                var edges = this.graph.getEdges(this.state.cell);
                this.edgeHandlers = [];
                for (var i = 0; i < edges.length; i++) {
                    var handler = this.graph.selectionCellsHandler.getHandler(edges[i]);
                    if (handler != null) {
                        this.edgeHandlers.push(handler);
                    }
                }
            }
        };
        VertexHandler.prototype.hideSizers = function () {
            if (this.sizers != null) {
                for (var i = 0; i < this.sizers.length; i++) {
                    Five.Utils.nodeStyle(this.sizers[i].node).display = "none";
                }
            }
        };
        VertexHandler.prototype.checkTolerance = function (me) {
            if (this.inTolerance && this.startX != null && this.startY != null) {
                if (Five.Events.isMouseEvent(me.getEvent()) ||
                    Math.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||
                    Math.abs(me.getGraphY() - this.startY) > this.graph.tolerance) {
                    this.inTolerance = false;
                }
            }
        };
        VertexHandler.prototype.updateHint = function (me) { };
        VertexHandler.prototype.removeHint = function () { };
        VertexHandler.prototype.roundAngle = function (angle) {
            return Math.round(angle);
        };
        VertexHandler.prototype.roundLength = function (length) {
            return Math.round(length);
        };
        VertexHandler.prototype.rotateOnMove = function (point, me) {
            var dx = this.state.x + this.state.width / 2 - point.x;
            var dy = this.state.y + this.state.height / 2 - point.y;
            this.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);
            if (dx > 0) {
                this.currentAlpha -= 180;
            }
            if (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent())) {
                var cx = point.x - this.state.getCenterX();
                var cy = point.y - this.state.getCenterY();
                var dist = Math.abs(Math.sqrt(cx * cx + cy * cy) - this.state.height / 2 - 20);
                var raster = Math.max(1, 5 * Math.min(3, Math.max(0, Math.round(80 / Math.abs(dist)))));
                this.currentAlpha = Math.round(this.currentAlpha / raster) * raster;
            }
            else {
                this.currentAlpha = this.roundAngle(this.currentAlpha);
            }
            this.selectionBorder.rotation = this.currentAlpha;
            this.selectionBorder.redraw();
            if (this.livePreview) {
                this.redrawHandles();
            }
        };
        VertexHandler.prototype.mouseMove = function (sender, me) {
            if (!me.isConsumed() && this.index != null) {
                this.checkTolerance(me);
                if (!this.inTolerance) {
                    var point = new Five.Point(me.getGraphX(), me.getGraphY());
                    var gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());
                    var scale = this.graph.view.scale;
                    var tr = this.graph.view.translate;
                    if (this.index == Five.EventHandle.Label) {
                        if (gridEnabled) {
                            point.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;
                            point.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;
                        }
                        this.moveSizerTo(this.sizers[this.sizers.length - 1], point.x, point.y);
                    }
                    else if (this.index == Five.EventHandle.Rotation) {
                        this.rotateOnMove(point, me);
                    }
                    else {
                        var alpha = Five.Utils.toRadians(this.state.style.rotation);
                        var cos = Math.cos(-alpha);
                        var sin = Math.sin(-alpha);
                        var ct = new Five.Point(this.state.getCenterX(), this.state.getCenterY());
                        var dx = point.x - this.startX;
                        var dy = point.y - this.startY;
                        var tx = cos * dx - sin * dy;
                        var ty = sin * dx + cos * dy;
                        dx = tx;
                        dy = ty;
                        var geo = this.graph.getCellGeometry(this.state.cell);
                        this.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index, gridEnabled, 1, new Five.Point(0, 0), this.isConstrainedEvent(me));
                        this.bounds = new Five.Rectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +
                            (this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +
                            (this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);
                        if (geo.relative && this.parentState != null) {
                            this.bounds.x += this.state.x - this.parentState.x;
                            this.bounds.y += this.state.y - this.parentState.y;
                        }
                        cos = Math.cos(alpha);
                        sin = Math.sin(alpha);
                        var c2 = new Five.Point(this.bounds.getCenterX(), this.bounds.getCenterY());
                        dx = c2.x - ct.x;
                        dy = c2.y - ct.y;
                        var dx2 = cos * dx - sin * dy;
                        var dy2 = sin * dx + cos * dy;
                        var dx3 = dx2 - dx;
                        var dy3 = dy2 - dy;
                        var dx4 = this.bounds.x - this.state.x;
                        var dy4 = this.bounds.y - this.state.y;
                        var dx5 = cos * dx4 - sin * dy4;
                        var dy5 = sin * dx4 + cos * dy4;
                        this.bounds.x += dx3;
                        this.bounds.y += dy3;
                        this.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);
                        this.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);
                        this.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);
                        this.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);
                        if (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0)) {
                            this.childOffsetX = this.state.x - this.bounds.x + dx5;
                            this.childOffsetY = this.state.y - this.bounds.y + dy5;
                        }
                        else {
                            this.childOffsetX = 0;
                            this.childOffsetY = 0;
                        }
                        if (this.livePreview) {
                            var tmp = new Five.Rectangle(this.state.x, this.state.y, this.state.width, this.state.height);
                            var orig = this.state.origin;
                            this.state.x = this.bounds.x;
                            this.state.y = this.bounds.y;
                            this.state.origin = new Five.Point(this.state.x / scale - tr.x, this.state.y / scale - tr.y);
                            this.state.width = this.bounds.width;
                            this.state.height = this.bounds.height;
                            var off = this.state.absoluteOffset;
                            off = new Five.Point(off.x, off.y);
                            this.state.absoluteOffset.x = 0;
                            this.state.absoluteOffset.y = 0;
                            if (geo != null) {
                                var offset = geo.offset || new Five.Point(0, 0);
                                if (offset != null && !geo.relative) {
                                    this.state.absoluteOffset.x = this.state.view.scale * offset.x;
                                    this.state.absoluteOffset.y = this.state.view.scale * offset.y;
                                }
                                this.state.view.updateVertexLabelOffset(this.state);
                            }
                            this.state.view.graph.cellRenderer.redraw(this.state, true);
                            this.state.view.invalidate(this.state.cell);
                            this.state.invalid = false;
                            this.state.view.validate();
                            this.redrawHandles();
                            this.state.x = tmp.x;
                            this.state.y = tmp.y;
                            this.state.width = tmp.width;
                            this.state.height = tmp.height;
                            this.state.origin = orig;
                            this.state.absoluteOffset = off;
                        }
                        if (this.preview != null) {
                            this.drawPreview();
                        }
                    }
                    this.updateHint(me);
                }
                me.consume();
            }
            else if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null) {
                me.consume(false);
            }
        };
        VertexHandler.prototype.mouseUp = function (sender, me) {
            if (this.index != null && this.state != null) {
                var point = new Five.Point(me.getGraphX(), me.getGraphY());
                this.graph.getModel().beginUpdate();
                try {
                    var rotation = this.state.style.rotation;
                    if (this.index == Five.EventHandle.Rotation) {
                        if (this.currentAlpha != null) {
                            var delta = this.currentAlpha - rotation;
                            if (delta != 0) {
                                this.rotateCell(this.state.cell, delta, null);
                            }
                        }
                    }
                    else {
                        var gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());
                        var alpha = Five.Utils.toRadians(rotation);
                        var cos = Math.cos(-alpha);
                        var sin = Math.sin(-alpha);
                        var dx = point.x - this.startX;
                        var dy = point.y - this.startY;
                        var tx = cos * dx - sin * dy;
                        var ty = sin * dx + cos * dy;
                        dx = tx;
                        dy = ty;
                        var s = this.graph.view.scale;
                        var recurse = this.isRecursiveResize(this.state, me);
                        this.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s), this.index, gridEnabled, this.isConstrainedEvent(me), recurse);
                    }
                }
                finally {
                    this.graph.getModel().endUpdate();
                }
                me.consume();
                this.reset();
            }
        };
        VertexHandler.prototype.isRecursiveResize = function (state, me) {
            return this.graph.isRecursiveResize(this.state);
        };
        VertexHandler.prototype.rotateCell = function (cell, angle, parent) {
            if (angle != 0) {
                var model = this.graph.getModel();
                if (Five.Cells.isVertex(cell) || Five.Cells.isEdge(cell)) {
                    if (!Five.Cells.isEdge(cell)) {
                        var state = this.graph.view.getState(cell);
                        var style = (state != null) ? state.style : this.graph.getCellStyle(cell);
                        if (style != null) {
                            var total = style.rotation + angle;
                            this.graph.setCellStyles(function (s) { return s.rotation = total; }, [cell]);
                        }
                    }
                    var geo = this.graph.getCellGeometry(cell);
                    if (geo != null) {
                        var pgeo = this.graph.getCellGeometry(parent);
                        if (pgeo != null && !Five.Cells.isEdge(parent)) {
                            geo = geo.clone();
                            geo.rotate(angle, new Five.Point(pgeo.width / 2, pgeo.height / 2));
                            model.setGeometry(cell, geo);
                        }
                        if ((Five.Cells.isVertex(cell) && !geo.relative) || Five.Cells.isEdge(cell)) {
                            var childCount = Five.Cells.getChildCount(cell);
                            for (var i = 0; i < childCount; i++) {
                                this.rotateCell(Five.Cells.getChildAt(cell, i), angle, cell);
                            }
                        }
                    }
                }
            }
        };
        VertexHandler.prototype.reset = function () {
            if (this.sizers != null && this.index != null && this.sizers[this.index] != null) {
                var style = Five.Utils.nodeStyle(this.sizers[this.index].node);
                if (style.display == "none") {
                    style.display = "";
                }
            }
            this.currentAlpha = null;
            this.inTolerance = null;
            this.index = null;
            if (this.preview != null) {
                this.preview.destroy();
                this.preview = null;
            }
            if (this.selectionBorder != null) {
                Five.Utils.nodeStyle(this.selectionBorder.node).display = "inline";
                this.selectionBounds = this.getSelectionBounds(this.state);
                this.bounds = new Five.Rectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);
                this.drawPreview();
            }
            if (this.livePreview && this.sizers != null) {
                for (var i = 0; i < this.sizers.length; i++) {
                    if (this.sizers[i] != null) {
                        Five.Utils.nodeStyle(this.sizers[i].node).display = "";
                    }
                }
            }
            this.removeHint();
            this.redrawHandles();
            this.edgeHandlers = null;
            this.unscaledBounds = null;
        };
        VertexHandler.prototype.resizeCell = function (cell, dx, dy, index, gridEnabled, constrained, recurse) {
            var geo = Five.Cells.getGeometry(cell);
            if (geo != null) {
                var scale;
                if (index == Five.Events.labelHandle) {
                    scale = this.graph.view.scale;
                    dx = Math.round((this.labelShape.bounds.getCenterX() - this.startX) / scale);
                    dy = Math.round((this.labelShape.bounds.getCenterY() - this.startY) / scale);
                    geo = geo.clone();
                    if (geo.offset == null) {
                        geo.offset = new Five.Point(dx, dy);
                    }
                    else {
                        geo.offset.x += dx;
                        geo.offset.y += dy;
                    }
                    this.graph.model.setGeometry(cell, geo);
                }
                else if (this.unscaledBounds != null) {
                    scale = this.graph.view.scale;
                    if (this.childOffsetX != 0 || this.childOffsetY != 0) {
                        this.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));
                    }
                    this.graph.resizeCell(cell, this.unscaledBounds, recurse);
                }
            }
        };
        VertexHandler.prototype.moveChildren = function (cell, dx, dy) {
            var model = this.graph.getModel();
            var childCount = Five.Cells.getChildCount(cell);
            for (var i = 0; i < childCount; i++) {
                var child = Five.Cells.getChildAt(cell, i);
                var geo = this.graph.getCellGeometry(child);
                if (geo != null) {
                    geo = geo.clone();
                    geo.translate(dx, dy);
                    model.setGeometry(child, geo);
                }
            }
        };
        VertexHandler.prototype.union = function (bounds, dx, dy, index, gridEnabled, scale, tr, constrained) {
            if (this.singleSizer) {
                var x = bounds.x + bounds.width + dx;
                var y = bounds.y + bounds.height + dy;
                if (gridEnabled) {
                    x = this.graph.snap(x / scale) * scale;
                    y = this.graph.snap(y / scale) * scale;
                }
                var rect = new Five.Rectangle(bounds.x, bounds.y, 0, 0);
                rect.add(new Five.Rectangle(x, y, 0, 0));
                return rect;
            }
            else {
                var left = bounds.x - tr.x * scale;
                var right = left + bounds.width;
                var top = bounds.y - tr.y * scale;
                var bottom = top + bounds.height;
                if (index > 4) {
                    bottom = bottom + dy;
                    if (gridEnabled) {
                        bottom = this.graph.snap(bottom / scale) * scale;
                    }
                }
                else if (index < 3) {
                    top = top + dy;
                    if (gridEnabled) {
                        top = this.graph.snap(top / scale) * scale;
                    }
                }
                if (index == 0 || index == 3 || index == 5) {
                    left += dx;
                    if (gridEnabled) {
                        left = this.graph.snap(left / scale) * scale;
                    }
                }
                else if (index == 2 || index == 4 || index == 7) {
                    right += dx;
                    if (gridEnabled) {
                        right = this.graph.snap(right / scale) * scale;
                    }
                }
                var width = right - left;
                var height = bottom - top;
                if (constrained) {
                    var geo = this.graph.getCellGeometry(this.state.cell);
                    if (geo != null) {
                        var aspect = geo.width / geo.height;
                        if (index == 1 || index == 2 || index == 7 || index == 6) {
                            width = height * aspect;
                        }
                        else {
                            height = width / aspect;
                        }
                        if (index == 0) {
                            left = right - width;
                            top = bottom - height;
                        }
                    }
                }
                if (width < 0) {
                    left += width;
                    width = Math.abs(width);
                }
                if (height < 0) {
                    top += height;
                    height = Math.abs(height);
                }
                var result = new Five.Rectangle(left + tr.x * scale, top + tr.y * scale, width, height);
                if (this.minBounds != null) {
                    result.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +
                        Math.max(0, this.x0 * scale - result.x));
                    result.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +
                        Math.max(0, this.y0 * scale - result.y));
                }
                return result;
            }
        };
        VertexHandler.prototype.redraw = function () {
            this.selectionBounds = this.getSelectionBounds(this.state);
            this.bounds = new Five.Rectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);
            this.redrawHandles();
            this.drawPreview();
        };
        VertexHandler.prototype.redrawHandles = function () {
            this.horizontalOffset = 0;
            this.verticalOffset = 0;
            var s = this.bounds;
            var alpha;
            var cos;
            var sin;
            var ct;
            var pt;
            if (this.sizers != null) {
                if (this.index == null && this.manageSizers && this.sizers.length > 1) {
                    var tol = this.tolerance;
                    if (s.width < 2 * this.sizers[0].bounds.width - 2 + 2 * tol) {
                        Five.Utils.nodeStyle(this.sizers[1].node).display = "none";
                        Five.Utils.nodeStyle(this.sizers[6].node).display = "none";
                    }
                    else {
                        Five.Utils.nodeStyle(this.sizers[1].node).display = "";
                        Five.Utils.nodeStyle(this.sizers[6].node).display = "";
                    }
                    if (s.height < 2 * this.sizers[0].bounds.height - 2 + 2 * tol) {
                        Five.Utils.nodeStyle(this.sizers[3].node).display = "none";
                        Five.Utils.nodeStyle(this.sizers[4].node).display = "none";
                    }
                    else {
                        Five.Utils.nodeStyle(this.sizers[3].node).display = "";
                        Five.Utils.nodeStyle(this.sizers[4].node).display = "";
                    }
                    if (s.width < 2 * this.sizers[0].bounds.width - 2 + 3 * tol ||
                        s.height < 2 * this.sizers[0].bounds.height - 2 + 3 * tol) {
                        s = new Five.Rectangle(s.x, s.y, s.width, s.height);
                        tol /= 2;
                        this.horizontalOffset = this.sizers[0].bounds.width + tol;
                        this.verticalOffset = this.sizers[0].bounds.height + tol;
                        s.x -= this.horizontalOffset / 2;
                        s.width += this.horizontalOffset;
                        s.y -= this.verticalOffset / 2;
                        s.height += this.verticalOffset;
                    }
                }
                var r = s.x + s.width;
                var b = s.y + s.height;
                if (this.singleSizer) {
                    this.moveSizerTo(this.sizers[0], r, b);
                }
                else {
                    var cx = s.x + s.width / 2;
                    var cy = s.y + s.height / 2;
                    if (this.sizers.length > 1) {
                        var crs = ["nw-resize", "n-resize", "ne-resize", "e-resize", "se-resize", "s-resize", "sw-resize", "w-resize"];
                        alpha = Five.Utils.toRadians(this.state.style.rotation);
                        cos = Math.cos(alpha);
                        sin = Math.sin(alpha);
                        var da = Math.round(alpha * 4 / Math.PI);
                        ct = new Five.Point(s.getCenterX(), s.getCenterY());
                        pt = Five.Utils.getRotatedPoint(new Five.Point(s.x, s.y), cos, sin, ct);
                        this.moveSizerTo(this.sizers[0], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[0].node).cursor = crs[Five.Utils.mod(0 + da, crs.length)];
                        pt.x = cx;
                        pt.y = s.y;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[1], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[1].node).cursor = crs[Five.Utils.mod(1 + da, crs.length)];
                        pt.x = r;
                        pt.y = s.y;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[2], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[2].node).cursor = crs[Five.Utils.mod(2 + da, crs.length)];
                        pt.x = s.x;
                        pt.y = cy;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[3], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[3].node).cursor = crs[Five.Utils.mod(7 + da, crs.length)];
                        pt.x = r;
                        pt.y = cy;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[4], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[4].node).cursor = crs[Five.Utils.mod(3 + da, crs.length)];
                        pt.x = s.x;
                        pt.y = b;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[5], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[5].node).cursor = crs[Five.Utils.mod(6 + da, crs.length)];
                        pt.x = cx;
                        pt.y = b;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[6], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[6].node).cursor = crs[Five.Utils.mod(5 + da, crs.length)];
                        pt.x = r;
                        pt.y = b;
                        pt = Five.Utils.getRotatedPoint(pt, cos, sin, ct);
                        this.moveSizerTo(this.sizers[7], pt.x, pt.y);
                        Five.Utils.nodeStyle(this.sizers[7].node).cursor = crs[Five.Utils.mod(4 + da, crs.length)];
                        this.moveSizerTo(this.sizers[8], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);
                    }
                    else if (this.state.width >= 2 && this.state.height >= 2) {
                        this.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);
                    }
                    else {
                        this.moveSizerTo(this.sizers[0], s.x, s.y);
                    }
                }
            }
            if (this.rotationShape != null) {
                alpha = Five.Utils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style.rotation);
                cos = Math.cos(alpha);
                sin = Math.sin(alpha);
                ct = new Five.Point(this.state.getCenterX(), this.state.getCenterY());
                pt = Five.Utils.getRotatedPoint(new Five.Point(s.x + s.width / 2, s.y + this.rotationHandleVSpacing), cos, sin, ct);
                if (this.rotationShape.node != null) {
                    this.moveSizerTo(this.rotationShape, pt.x, pt.y);
                }
            }
            if (this.selectionBorder != null) {
                this.selectionBorder.rotation = this.state.style.rotation;
            }
            if (this.edgeHandlers != null) {
                for (var i = 0; i < this.edgeHandlers.length; i++) {
                    this.edgeHandlers[i].redraw();
                }
            }
        };
        VertexHandler.prototype.drawPreview = function () {
            if (this.preview != null) {
                this.preview.bounds = this.bounds;
                if (this.graph.container.is(this.preview.node.parentNode)) {
                    this.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);
                    this.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);
                }
                this.preview.rotation = this.state.style.rotation;
                this.preview.redraw();
            }
            this.selectionBorder.bounds = this.bounds;
            this.selectionBorder.redraw();
        };
        VertexHandler.prototype.destroy = function () {
            if (this.escapeHandler != null) {
                this.state.view.graph.onEscape.remove(this.escapeHandler);
                this.escapeHandler = null;
            }
            if (this.preview != null) {
                this.preview.destroy();
                this.preview = null;
            }
            this.selectionBorder.destroy();
            this.selectionBorder = null;
            this.labelShape = null;
            this.removeHint();
            if (this.sizers != null) {
                for (var i = 0; i < this.sizers.length; i++) {
                    this.sizers[i].destroy();
                }
                this.sizers = null;
            }
        };
        return VertexHandler;
    }());
    Five.VertexHandler = VertexHandler;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var VisibleChange = (function () {
        function VisibleChange(model, cell, visible) {
            this.model = model;
            this.cell = cell;
            this.visible = visible;
            this.previous = visible;
        }
        VisibleChange.prototype.execute = function () {
            this.visible = this.previous;
            this.previous = this.model.visibleStateForCellChanged(this.cell, this.previous);
        };
        return VisibleChange;
    }());
    Five.VisibleChange = VisibleChange;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var WindowActivateEvent = (function (_super) {
        __extends(WindowActivateEvent, _super);
        function WindowActivateEvent(previousWindow) {
            var _this = _super.call(this) || this;
            _this.previousWindow = previousWindow;
            return _this;
        }
        return WindowActivateEvent;
    }(Five.BasicEvent));
    Five.WindowActivateEvent = WindowActivateEvent;
    var WindowResizeEvent = (function (_super) {
        __extends(WindowResizeEvent, _super);
        function WindowResizeEvent(event) {
            var _this = _super.call(this) || this;
            _this.event = event;
            return _this;
        }
        return WindowResizeEvent;
    }(Five.BasicEvent));
    Five.WindowResizeEvent = WindowResizeEvent;
    var Window = (function () {
        function Window(title, content, x, y, width, height, minimizable, movable, replaceNode, style) {
            if (minimizable === void 0) { minimizable = true; }
            if (movable === void 0) { movable = true; }
            this.closeImage = Five.FileStructure.imageBasePath + "/close.gif";
            this.minimizeImage = Five.FileStructure.imageBasePath + "/minimize.gif";
            this.normalizeImage = Five.FileStructure.imageBasePath + "/normalize.gif";
            this.maximizeImage = Five.FileStructure.imageBasePath + "/maximize.gif";
            this.resizeImage = Five.FileStructure.imageBasePath + "/resize.gif";
            this.visible = false;
            this.minimumSize = new Five.Rectangle(0, 0, 50, 40);
            this.destroyOnClose = true;
            this.contentHeightCorrection = 2;
            this.title = null;
            this.content = null;
            this.onActivate = new Five.EventListeners();
            this.onBeforeResize = new Five.EventListeners();
            this.onResize = new Five.EventListeners();
            this.onAfterResize = new Five.EventListeners();
            this.onBeforeMove = new Five.EventListeners();
            this.onMove = new Five.EventListeners();
            this.onAfterMove = new Five.EventListeners();
            this.onMinimize = new Five.EventListeners();
            this.onMaximize = new Five.EventListeners();
            this.onNormalize = new Five.EventListeners();
            this.onClose = new Five.EventListeners();
            this.onShow = new Five.EventListeners();
            this.onHide = new Five.EventListeners();
            this.onDestroy = new Five.EventListeners();
            if (content != null) {
                this.content = content;
                this.init(x, y, width, height, style);
                this.installMaximizeHandler();
                this.installMinimizeHandler();
                this.installCloseHandler();
                this.setMinimizable(minimizable);
                this.setTitle(title);
                if (movable) {
                    this.installMoveHandler();
                }
                if (replaceNode != null && replaceNode.parentNode != null) {
                    replaceNode.parentNode.replaceChild(this.div, replaceNode);
                }
                else {
                    document.body.appendChild(this.div);
                }
            }
        }
        Window.prototype.init = function (x, y, width, height, style) {
            var _this = this;
            style = (style != null) ? style : "Window";
            this.div = document.createElement("div");
            this.div.className = style;
            this.div.style.left = x + "px";
            this.div.style.top = y + "px";
            this.table = document.createElement("table");
            this.table.className = style;
            if (Five.Client.isPointer) {
                this.div.style.msTouchAction = "none";
            }
            if (width != null) {
                if (!Five.Client.isQuirks) {
                    this.div.style.width = width + "px";
                }
                this.table.style.width = width + "px";
            }
            if (height != null) {
                if (!Five.Client.isQuirks) {
                    this.div.style.height = height + "px";
                }
                this.table.style.height = height + "px";
            }
            var tbody = document.createElement("tbody");
            var tr = document.createElement("tr");
            this.title = document.createElement("td");
            this.title.className = style + "Title";
            tr.appendChild(this.title);
            tbody.appendChild(tr);
            tr = document.createElement("tr");
            this.td = document.createElement("td");
            this.td.className = style + "Pane";
            this.contentWrapper = document.createElement("div");
            this.contentWrapper.className = style + "Pane";
            this.contentWrapper.style.width = "100%";
            this.contentWrapper.appendChild(this.content);
            if (Five.Client.isQuirks || this.content.nodeName.toUpperCase() != "DIV") {
                this.contentWrapper.style.height = "100%";
            }
            this.td.appendChild(this.contentWrapper);
            tr.appendChild(this.td);
            tbody.appendChild(tr);
            this.table.appendChild(tbody);
            this.div.appendChild(this.table);
            var activator = function () { return _this.activate(); };
            Five.Events.addGestureListeners(this.title, activator);
            Five.Events.addGestureListeners(this.table, activator);
            this.hide();
        };
        Window.prototype.setTitle = function (title) {
            var child = this.title.firstChild;
            while (child != null) {
                var next = child.nextSibling;
                if (child.nodeType == Five.NodeType.Text) {
                    child.parentNode.removeChild(child);
                }
                child = next;
            }
            Five.Utils.write(this.title, title || "");
        };
        Window.prototype.setScrollable = function (scrollable) {
            if (navigator.userAgent.indexOf("Presto/2.5") < 0) {
                if (scrollable) {
                    this.contentWrapper.style.overflow = "auto";
                }
                else {
                    this.contentWrapper.style.overflow = "hidden";
                }
            }
        };
        Window.prototype.activate = function () {
            if (Window.activeWindow != this) {
                var style = Five.Utils.getCurrentStyle(this.getElement());
                var index = (style != null) ? style.zIndex : 3;
                if (Window.activeWindow) {
                    var elt = Window.activeWindow.getElement();
                    if (elt != null && elt.style != null) {
                        elt.style.zIndex = index;
                    }
                }
                var previousWindow = Window.activeWindow;
                this.getElement().style.zIndex = "" + (parseInt(index) + 1);
                Window.activeWindow = this;
                this.onActivate.fire(new WindowActivateEvent(previousWindow));
            }
        };
        Window.prototype.getElement = function () {
            return this.div;
        };
        Window.prototype.fit = function () {
            Five.Utils.fit(this.div);
        };
        Window.prototype.isResizable = function () {
            if (this.resize != null) {
                return this.resize.style.display != "none";
            }
            return false;
        };
        Window.prototype.setResizable = function (resizable) {
            var _this = this;
            if (resizable) {
                if (this.resize == null) {
                    this.resize = document.createElement("img");
                    this.resize.style.position = "absolute";
                    this.resize.style.bottom = "2px";
                    this.resize.style.right = "2px";
                    this.resize.setAttribute("src", Five.FileStructure.imageBasePath + "/resize.gif");
                    this.resize.style.cursor = "nw-resize";
                    var startX = null;
                    var startY = null;
                    var width = null;
                    var height = null;
                    var dragHandler = function (evt) {
                        if (startX != null && startY != null) {
                            var dx = Five.Events.getClientX(evt) - startX;
                            var dy = Five.Events.getClientY(evt) - startY;
                            _this.setSize(width + dx, height + dy);
                            _this.onResize.fire(new WindowResizeEvent(evt));
                            Five.Events.consume(evt);
                        }
                    };
                    var dropHandler = function (evt) {
                        if (startX != null && startY != null) {
                            startX = null;
                            startY = null;
                            Five.Events.removeGestureListeners(document, null, dragHandler, dropHandler);
                            _this.onAfterResize.fire(new WindowResizeEvent(evt));
                            Five.Events.consume(evt);
                        }
                    };
                    var start = function (evt) {
                        _this.activate();
                        startX = Five.Events.getClientX(evt);
                        startY = Five.Events.getClientY(evt);
                        width = _this.div.offsetWidth;
                        height = _this.div.offsetHeight;
                        Five.Events.addGestureListeners(document, null, dragHandler, dropHandler);
                        _this.onBeforeResize.fire(new WindowResizeEvent(evt));
                        Five.Events.consume(evt);
                    };
                    Five.Events.addGestureListeners(this.resize, start, dragHandler, dropHandler);
                    this.div.appendChild(this.resize);
                }
                else {
                    this.resize.style.display = "inline";
                }
            }
            else if (this.resize != null) {
                this.resize.style.display = "none";
            }
        };
        Window.prototype.setSize = function (width, height) {
            width = Math.max(this.minimumSize.width, width);
            height = Math.max(this.minimumSize.height, height);
            if (!Five.Client.isQuirks) {
                this.div.style.width = width + "px";
                this.div.style.height = height + "px";
            }
            this.table.style.width = width + "px";
            this.table.style.height = height + "px";
            if (!Five.Client.isQuirks) {
                this.contentWrapper.style.height = (this.div.offsetHeight - this.title.offsetHeight - this.contentHeightCorrection) + "px";
            }
        };
        Window.prototype.setMinimizable = function (minimizable) {
            this.minimize.style.display = (minimizable) ? "" : "none";
        };
        Window.prototype.getMinimumSize = function () {
            return new Five.Rectangle(0, 0, 0, this.title.offsetHeight);
        };
        Window.prototype.installMinimizeHandler = function () {
            var _this = this;
            this.minimize = document.createElement("img");
            this.minimize.src = this.minimizeImage;
            this.minimize.align = "right";
            this.minimize.title = "Minimize";
            this.minimize.style.cursor = "pointer";
            this.minimize.style.marginRight = "1px";
            this.minimize.style.display = "none";
            this.title.appendChild(this.minimize);
            var minimized = false;
            var maxDisplay = null;
            var height = null;
            var funct = function (evt) {
                _this.activate();
                if (!minimized) {
                    minimized = true;
                    _this.minimize.src = _this.normalizeImage;
                    _this.minimize.title = "Normalize";
                    _this.contentWrapper.style.display = "none";
                    maxDisplay = _this.maximize.style.display;
                    _this.maximize.style.display = "none";
                    height = _this.table.style.height;
                    var minSize = _this.getMinimumSize();
                    if (minSize.height > 0) {
                        if (!Five.Client.isQuirks) {
                            _this.div.style.height = minSize.height + "px";
                        }
                        _this.table.style.height = minSize.height + "px";
                    }
                    if (minSize.width > 0) {
                        if (!Five.Client.isQuirks) {
                            _this.div.style.width = minSize.width + "px";
                        }
                        _this.table.style.width = minSize.width + "px";
                    }
                    if (_this.resize != null) {
                        _this.resize.style.visibility = "hidden";
                    }
                    _this.onMinimize.fire(new WindowResizeEvent(evt));
                }
                else {
                    minimized = false;
                    _this.minimize.src = _this.minimizeImage;
                    _this.minimize.title = "Minimize";
                    _this.contentWrapper.style.display = "";
                    _this.maximize.style.display = maxDisplay;
                    if (!Five.Client.isQuirks) {
                        _this.div.style.height = height;
                    }
                    _this.table.style.height = height;
                    if (_this.resize != null) {
                        _this.resize.style.visibility = "";
                    }
                    _this.onNormalize.fire(new WindowResizeEvent(evt));
                }
                Five.Events.consume(evt);
            };
            Five.Events.addGestureListeners(this.minimize, funct);
        };
        Window.prototype.setMaximizable = function (maximizable) {
            this.maximize.style.display = (maximizable) ? "" : "none";
        };
        Window.prototype.installMaximizeHandler = function () {
            var _this = this;
            this.maximize = document.createElement("img");
            this.maximize.src = this.maximizeImage;
            this.maximize.align = "right";
            this.maximize.title = "Maximize";
            this.maximize.style.cursor = "default";
            this.maximize.style.marginLeft = "1px";
            this.maximize.style.cursor = "pointer";
            this.maximize.style.display = "none";
            this.title.appendChild(this.maximize);
            var maximized = false;
            var x = null;
            var y = null;
            var height = null;
            var width = null;
            var funct = function (evt) {
                _this.activate();
                if (_this.maximize.style.display != "none") {
                    var style;
                    if (!maximized) {
                        maximized = true;
                        _this.maximize.setAttribute("src", _this.normalizeImage);
                        _this.maximize.setAttribute("title", "Normalize");
                        _this.contentWrapper.style.display = "";
                        _this.minimize.style.visibility = "hidden";
                        x = parseInt(_this.div.style.left);
                        y = parseInt(_this.div.style.top);
                        height = _this.table.style.height;
                        width = _this.table.style.width;
                        _this.div.style.left = "0px";
                        _this.div.style.top = "0px";
                        var docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);
                        if (!Five.Client.isQuirks) {
                            _this.div.style.width = (document.body.clientWidth - 2) + "px";
                            _this.div.style.height = (docHeight - 2) + "px";
                        }
                        _this.table.style.width = (document.body.clientWidth - 2) + "px";
                        _this.table.style.height = (docHeight - 2) + "px";
                        if (_this.resize != null) {
                            _this.resize.style.visibility = "hidden";
                        }
                        if (!Five.Client.isQuirks) {
                            style = Five.Utils.getCurrentStyle(_this.contentWrapper);
                            if (style.overflow == "auto" || _this.resize != null) {
                                _this.contentWrapper.style.height = (_this.div.offsetHeight -
                                    _this.title.offsetHeight - _this.contentHeightCorrection) + "px";
                            }
                        }
                        _this.onMaximize.fire(new WindowResizeEvent(evt));
                    }
                    else {
                        maximized = false;
                        _this.maximize.setAttribute("src", _this.maximizeImage);
                        _this.maximize.setAttribute("title", "Maximize");
                        _this.contentWrapper.style.display = "";
                        _this.minimize.style.visibility = "";
                        _this.div.style.left = x + "px";
                        _this.div.style.top = y + "px";
                        if (!Five.Client.isQuirks) {
                            _this.div.style.height = height;
                            _this.div.style.width = width;
                            style = Five.Utils.getCurrentStyle(_this.contentWrapper);
                            if (style.overflow == "auto" || _this.resize != null) {
                                _this.contentWrapper.style.height = (_this.div.offsetHeight -
                                    _this.title.offsetHeight - _this.contentHeightCorrection) + "px";
                            }
                        }
                        _this.table.style.height = height;
                        _this.table.style.width = width;
                        if (_this.resize != null) {
                            _this.resize.style.visibility = "";
                        }
                        _this.onNormalize.fire(new WindowResizeEvent(evt));
                    }
                    Five.Events.consume(evt);
                }
            };
            Five.Events.addGestureListeners(this.maximize, funct);
            Five.Events.addListener(this.title, "dblclick", funct);
        };
        Window.prototype.installMoveHandler = function () {
            var _this = this;
            this.title.style.cursor = "move";
            Five.Events.addGestureListeners(this.title, function (evt) {
                var startX = Five.Events.getClientX(evt);
                var startY = Five.Events.getClientY(evt);
                var x = _this.getX();
                var y = _this.getY();
                var dragHandler = function (evt1) {
                    var dx = Five.Events.getClientX(evt1) - startX;
                    var dy = Five.Events.getClientY(evt1) - startY;
                    _this.setLocation(x + dx, y + dy);
                    _this.onMove.fire(new WindowResizeEvent(evt));
                    Five.Events.consume(evt);
                };
                var dropHandler = function (evt1) {
                    Five.Events.removeGestureListeners(document, null, dragHandler, dropHandler);
                    _this.onAfterResize.fire(new WindowResizeEvent(evt1));
                    Five.Events.consume(evt1);
                };
                Five.Events.addGestureListeners(document, null, dragHandler, dropHandler);
                _this.onBeforeMove.fire(new WindowResizeEvent(evt));
                Five.Events.consume(evt);
            });
            if (Five.Client.isPointer) {
                this.title.style.msTouchAction = "none";
            }
        };
        Window.prototype.setLocation = function (x, y) {
            this.div.style.left = x + "px";
            this.div.style.top = y + "px";
        };
        Window.prototype.getX = function () {
            return parseInt(this.div.style.left);
        };
        Window.prototype.getY = function () {
            return parseInt(this.div.style.top);
        };
        Window.prototype.installCloseHandler = function () {
            var _this = this;
            this.closeImg = document.createElement("img");
            this.closeImg.src = this.closeImage;
            this.closeImg.align = "right";
            this.closeImg.title = "Close";
            this.closeImg.style.marginLeft = "2px";
            this.closeImg.style.cursor = "pointer";
            this.closeImg.style.display = "none";
            this.title.insertBefore(this.closeImg, this.title.firstChild);
            Five.Events.addGestureListeners(this.closeImg, function (evt) {
                _this.onClose.fire();
                if (_this.destroyOnClose) {
                    _this.destroy();
                }
                else {
                    _this.setVisible(false);
                }
                Five.Events.consume(evt);
            });
        };
        Window.prototype.setImage = function (image) {
            this.image = document.createElement("img");
            this.image.src = image;
            this.image.align = "left";
            this.image.style.marginRight = "4px";
            this.image.style.marginLeft = "0px";
            this.image.style.marginTop = "-2px";
            this.title.insertBefore(this.image, this.title.firstChild);
        };
        Window.prototype.setClosable = function (closable) {
            this.closeImg.style.display = (closable) ? "" : "none";
        };
        Window.prototype.isVisible = function () {
            if (this.div != null) {
                return this.div.style.display != "none";
            }
            return false;
        };
        Window.prototype.setVisible = function (visible) {
            if (this.div != null && this.isVisible() != visible) {
                if (visible) {
                    this.show();
                }
                else {
                    this.hide();
                }
            }
        };
        Window.prototype.show = function () {
            this.div.style.display = "";
            this.activate();
            var style = Five.Utils.getCurrentStyle(this.contentWrapper);
            if (!Five.Client.isQuirks && (style.overflow == "auto" || this.resize != null)) {
                this.contentWrapper.style.height = (this.div.offsetHeight -
                    this.title.offsetHeight - this.contentHeightCorrection) + "px";
            }
            this.onShow.fire();
        };
        Window.prototype.hide = function () {
            this.div.style.display = "none";
            this.onHide.fire();
        };
        Window.prototype.destroy = function () {
            this.onDestroy.fire();
            if (this.div != null) {
                Five.Events.release(this.div);
                this.div.parentNode.removeChild(this.div);
                this.div = null;
            }
            this.title = null;
            this.content = null;
            this.contentWrapper = null;
        };
        Window.activeWindow = null;
        return Window;
    }());
    Five.Window = Window;
})(Five || (Five = {}));
var Five;
(function (Five) {
    var XmlRequest = (function () {
        function XmlRequest(url, params, method, async, username, password) {
            if (method === void 0) { method = "POST"; }
            if (async === void 0) { async = true; }
            this.binary = false;
            this.withCredentials = false;
            this.request = null;
            this.decodeSimulateValues = false;
            this.url = url;
            this.params = params;
            this.method = method;
            this.async = async;
            this.username = username;
            this.password = password;
        }
        XmlRequest.prototype.isBinary = function () {
            return this.binary;
        };
        XmlRequest.prototype.setBinary = function (value) {
            this.binary = value;
        };
        XmlRequest.prototype.getText = function () {
            return this.request.responseText;
        };
        XmlRequest.prototype.isReady = function () {
            return this.request.readyState == 4;
        };
        XmlRequest.prototype.getDocumentElement = function () {
            var doc = this.getXml();
            if (doc != null) {
                return doc.documentElement;
            }
            return null;
        };
        XmlRequest.prototype.getXml = function () {
            var xml = this.request.responseXML;
            if (Five.Client.isIe9 || xml == null || xml.documentElement == null) {
                xml = Five.Utils.parseXml(this.request.responseText);
            }
            return xml;
        };
        XmlRequest.prototype.getStatus = function () {
            return this.request.status;
        };
        XmlRequest.prototype.create = function () {
            var req = new XMLHttpRequest();
            if (this.isBinary() && req.overrideMimeType) {
                req.overrideMimeType('text/plain; charset=x-user-defined');
            }
            return req;
        };
        XmlRequest.prototype.send = function (onload, onerror) {
            var _this = this;
            this.request = this.create();
            if (this.request != null) {
                if (onload != null) {
                    this.request.onreadystatechange = function () {
                        if (_this.isReady()) {
                            onload(_this);
                            _this.request.onreadystatechange = null;
                        }
                    };
                }
                this.request.open(this.method, this.url, this.async, this.username, this.password);
                this.setRequestHeaders(this.request, this.params);
                if (this.withCredentials) {
                    this.request.withCredentials = true;
                }
                this.request.send(this.params);
            }
        };
        XmlRequest.prototype.setRequestHeaders = function (request, params) {
            if (params != null) {
                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            }
        };
        XmlRequest.prototype.simulate = function (doc, target) {
            doc = doc || document;
            var old = null;
            if (doc == document) {
                old = window.onbeforeunload;
                window.onbeforeunload = null;
            }
            var form = doc.createElement('form');
            form.setAttribute('method', this.method);
            form.setAttribute('action', this.url);
            if (target != null) {
                form.target = target;
            }
            form.style.display = 'none';
            form.style.visibility = 'hidden';
            var pars = (this.params.indexOf('&') > 0) ? this.params.split('&') : this.params.split(null);
            for (var i = 0; i < pars.length; i++) {
                var pos = pars[i].indexOf('=');
                if (pos > 0) {
                    var name = pars[i].substring(0, pos);
                    var value = pars[i].substring(pos + 1);
                    if (this.decodeSimulateValues) {
                        value = decodeURIComponent(value);
                    }
                    var textarea = doc.createElement('textarea');
                    textarea.setAttribute('name', name);
                    Five.Utils.write(textarea, value);
                    form.appendChild(textarea);
                }
            }
            doc.body.appendChild(form);
            form.submit();
            doc.body.removeChild(form);
            if (old != null) {
                window.onbeforeunload = old;
            }
        };
        return XmlRequest;
    }());
    Five.XmlRequest = XmlRequest;
})(Five || (Five = {}));
var CloudDiagram;
(function (CloudDiagram) {
    var _ = (function () {
        function _() {
        }
        _.isObject = function (obj) {
            var type = typeof obj;
            return type === 'function' || type === 'object' && !!obj;
        };
        _.allKeys = function (obj) {
            if (!_.isObject(obj))
                return [];
            var keys = [];
            for (var key in obj)
                keys.push(key);
            return keys;
        };
        _.has = function (obj, key) {
            return obj != null && _.hasOwnProperty.call(obj, key);
        };
        _.keys = function (obj) {
            if (!_.isObject(obj))
                return [];
            if (_.nativeKeys)
                return Object.keys(obj);
            var keys = [];
            for (var key in obj)
                if (_.has(obj, key))
                    keys.push(key);
            return keys;
        };
        _.createAssigner = function (keysFunc, undefinedOnly) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            return function (obj) {
                var length = arguments.length;
                if (length < 2 || obj == null)
                    return obj;
                for (var index = 1; index < length; index++) {
                    var source = arguments[index], keys = keysFunc(source), l = keys.length;
                    for (var i = 0; i < l; i++) {
                        var key = keys[i];
                        if (!undefinedOnly || obj[key] === void 0)
                            obj[key] = source[key];
                    }
                }
                return obj;
            };
        };
        _.sum = function (arr, func) {
            if (arr && arr.length)
                return arr.reduce(function (result, elem) { return result + (func(elem)); }, 0);
            return 0;
        };
        _.clone = function (obj) {
            if (!_.isObject(obj))
                return obj;
            return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };
        _.optimizeCb = function (func, context, argCount) {
            if (context === void 0)
                return func;
            switch (argCount == null ? 3 : argCount) {
                case 1:
                    return function (value) { return func.call(context, value); };
                case 2:
                    return function (value, other) { return func.call(context, value, other); };
                case 3:
                    return function (value, index, collection) { return func.call(context, value, index, collection); };
                case 4:
                    return function (accumulator, value, index, collection) { return func.call(context, accumulator, value, index, collection); };
            }
            return func.apply(context, arguments);
        };
        _.identity = function (value) {
            return value;
        };
        _.isFunction = function (obj) {
            return typeof obj == 'function' || false;
        };
        _.isMatch = function (object, attrs) {
            var keys = _.keys(attrs), length = keys.length;
            if (object == null)
                return !length;
            var obj = Object(object);
            for (var i = 0; i < length; i++) {
                var key = keys[i];
                if (attrs[key] !== obj[key] || !(key in obj))
                    return false;
            }
            return true;
        };
        _.matcher = function (attrs) {
            attrs = _.extendOwn({}, attrs);
            return function (obj) { return _.isMatch(obj, attrs); };
        };
        _.property = function (key) {
            return function (obj) { return (obj == null ? void 0 : obj[key]); };
        };
        _.cb = function (value, context, argCount) {
            if (value == null)
                return _.identity;
            if (_.isFunction(value))
                return this.optimizeCb(value, context, argCount);
            if (_.isObject(value))
                return _.matcher(value);
            return _.property(value);
        };
        _.isArrayLike = function (collection) {
            var length = collection && collection.length;
            return typeof length == 'number' && length >= 0 && length <= _.MAX_ARRAY_INDEX;
        };
        _.each = function (obj, iteratee, context) {
            iteratee = _.optimizeCb(iteratee, context);
            var i, length;
            if (_.isArrayLike(obj)) {
                for (i = 0, length = obj.length; i < length; i++) {
                    iteratee(obj[i], i, obj);
                }
            }
            else {
                var keys = _.keys(obj);
                for (i = 0, length = keys.length; i < length; i++) {
                    iteratee(obj[keys[i]], keys[i], obj);
                }
            }
            return obj;
        };
        _.isArguments = function (obj) {
            return _.has(obj, 'callee');
        };
        _.flatten = function (input, shallow, strict, startIndex) {
            var output = [], idx = 0;
            for (var i = startIndex || 0, length = input && input.length; i < length; i++) {
                var value = input[i];
                if (this.isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                    if (!shallow)
                        value = this.flatten(value, shallow, strict);
                    var j = 0, len = value.length;
                    output.length += len;
                    while (j < len) {
                        output[idx++] = value[j++];
                    }
                }
                else if (!strict) {
                    output[idx++] = value;
                }
            }
            return output;
        };
        _.filter = function (obj, predicate, context) {
            var results = [];
            predicate = this.cb(predicate, context);
            _.each(obj, function (value, index, list) {
                if (predicate(value, index, list))
                    results.push(value);
            });
            return results;
        };
        _.values = function (obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var values = Array(length);
            for (var i = 0; i < length; i++) {
                values[i] = obj[keys[i]];
            }
            return values;
        };
        _.sortedIndex = function (array, obj, iteratee, context) {
            iteratee = this.cb(iteratee, context, 1);
            var value = iteratee(obj);
            var low = 0, high = array.length;
            while (low < high) {
                var mid = Math.floor((low + high) / 2);
                if (iteratee(array[mid]) < value)
                    low = mid + 1;
                else
                    high = mid;
            }
            return low;
        };
        _.createIndexFinder = function (dir) {
            var _this = this;
            return function (array, predicate, context) {
                predicate = _this.cb(predicate, context);
                var length = array != null && array.length;
                var index = dir > 0 ? 0 : length - 1;
                for (; index >= 0 && index < length; index += dir) {
                    if (predicate(array[index], index, array))
                        return index;
                }
                return -1;
            };
        };
        _.isNumber = function (obj) {
            return toString.call(obj) === '[object Number]';
        };
        _.isString = function (obj) {
            return toString.call(obj) === '[object String]';
        };
        _.isNaN = function (obj) {
            return _.isNumber(obj) && obj !== +obj;
        };
        _.indexOf = function (array, item, isSorted) {
            var i = 0, length = array && array.length;
            if (typeof isSorted == 'number') {
                i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
            }
            else if (isSorted && length) {
                i = this.sortedIndex(array, item);
                return array[i] === item ? i : -1;
            }
            if (item !== item) {
                return _.findIndex(array.slice(i), _.isNaN);
            }
            for (; i < length; i++)
                if (array[i] === item)
                    return i;
            return -1;
        };
        _.contains = function (obj, target) {
            if (!this.isArrayLike(obj))
                obj = _.values(obj);
            return _.indexOf(obj, target) >= 0;
        };
        _.difference = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var rest = this.flatten(arguments, true, true, 1);
            return _.filter(args, function (value) { return (!_.contains(rest, value)); });
        };
        _.findKey = function (obj, predicate, context) {
            predicate = this.cb(predicate, context);
            var keys = _.keys(obj), key;
            for (var i = 0, length = keys.length; i < length; i++) {
                key = keys[i];
                if (predicate(obj[key], key, obj))
                    return key;
            }
            return null;
        };
        _.find = function (list, predicate) {
            var length = list.length >>> 0;
            for (var i = 0; i < length; i++) {
                var value = list[i];
                if (predicate(value)) {
                    return value;
                }
            }
            return undefined;
        };
        _.size = function (obj) {
            if (obj == null)
                return 0;
            return this.isArrayLike(obj) ? obj.length : _.keys(obj).length;
        };
        _.negate = function (predicate) {
            return function () { return !predicate.apply(null, arguments); };
        };
        _.reject = function (obj, predicate, context) {
            return _.filter(obj, _.negate(this.cb(predicate)), context);
        };
        _.eq = function (a, b, aStack, bStack) {
            if (a === b)
                return a !== 0 || 1 / a === 1 / b;
            if (a == null || b == null)
                return a === b;
            var className = toString.call(a);
            if (className !== toString.call(b))
                return false;
            switch (className) {
                case '[object RegExp]':
                case '[object String]':
                    return '' + a === '' + b;
                case '[object Number]':
                    if (+a !== +a)
                        return +b !== +b;
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                case '[object Date]':
                case '[object Boolean]':
                    return +a === +b;
            }
            var areArrays = className === '[object Array]';
            if (!areArrays) {
                if (typeof a != 'object' || typeof b != 'object')
                    return false;
                var aCtor = a.constructor, bCtor = b.constructor;
                if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                    _.isFunction(bCtor) && bCtor instanceof bCtor)
                    && ('constructor' in a && 'constructor' in b)) {
                    return false;
                }
            }
            aStack = aStack || [];
            bStack = bStack || [];
            var length = aStack.length;
            while (length--) {
                if (aStack[length] === a)
                    return bStack[length] === b;
            }
            aStack.push(a);
            bStack.push(b);
            if (areArrays) {
                length = a.length;
                if (length !== b.length)
                    return false;
                while (length--) {
                    if (!this.eq(a[length], b[length], aStack, bStack))
                        return false;
                }
            }
            else {
                var keys = _.keys(a), key;
                length = keys.length;
                if (_.keys(b).length !== length)
                    return false;
                while (length--) {
                    key = keys[length];
                    if (!(_.has(b, key) && this.eq(a[key], b[key], aStack, bStack)))
                        return false;
                }
            }
            aStack.pop();
            bStack.pop();
            return true;
        };
        _.isEqual = function (a, b) {
            return _.eq(a, b);
        };
        _.createReduce = function (dir) {
            function iterator(obj, iteratee, memo, keys, index, length) {
                for (; index >= 0 && index < length; index += dir) {
                    var currentKey = keys ? keys[index] : index;
                    memo = iteratee(memo, obj[currentKey], currentKey, obj);
                }
                return memo;
            }
            return function (obj, iteratee, memo, context) {
                iteratee = this.optimizeCb(iteratee, context, 4);
                var keys = !this.isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, index = dir > 0 ? 0 : length - 1;
                if (arguments.length < 3) {
                    memo = obj[keys ? keys[index] : index];
                    index += dir;
                }
                return iterator(obj, iteratee, memo, keys, index, length);
            };
        };
        _.without = function (array) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return _.difference(array, _.slice.call(arguments, 1));
        };
        _.every = function (obj, predicate, context) {
            predicate = this.cb(predicate, context);
            var keys = !this.isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
            for (var index = 0; index < length; index++) {
                var currentKey = keys ? keys[index] : index;
                if (!predicate(obj[currentKey], currentKey, obj))
                    return false;
            }
            return true;
        };
        _.max = function (obj, iteratee, context) {
            var result = null, lastComputed = -Infinity, value, computed;
            if (iteratee == null && obj != null) {
                obj = _.isArrayLike(obj) ? obj : _.values(obj);
                for (var i = 0, length = obj.length; i < length; i++) {
                    value = obj[i];
                    if (!result || value > result) {
                        result = value;
                    }
                }
            }
            else {
                iteratee = this.cb(iteratee, context);
                _.each(obj, function (value, index, list) {
                    computed = iteratee(value, index, list);
                    if (computed > lastComputed || computed === -Infinity && result == null) {
                        result = value;
                        lastComputed = computed;
                    }
                });
            }
            return result;
        };
        _.min = function (obj, iteratee, context) {
            var result = null, lastComputed = Infinity, value, computed;
            if (iteratee == null && obj != null) {
                obj = this.isArrayLike(obj) ? obj : _.values(obj);
                for (var i = 0, length = obj.length; i < length; i++) {
                    value = obj[i];
                    if (!result || value < result) {
                        result = value;
                    }
                }
            }
            else {
                iteratee = this.cb(iteratee, context);
                _.each(obj, function (value, index, list) {
                    computed = iteratee(value, index, list);
                    if (computed < lastComputed || computed === Infinity && result === null) {
                        result = value;
                        lastComputed = computed;
                    }
                });
            }
            return result;
        };
        _.map = function (obj, iteratee, context) {
            iteratee = this.cb(iteratee, context);
            var keys = !this.isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, results = Array(length);
            for (var index = 0; index < length; index++) {
                var currentKey = keys ? keys[index] : index;
                results[index] = iteratee(obj[currentKey], currentKey, obj);
            }
            return results;
        };
        _.isEmpty = function (obj) {
            if (obj == null)
                return true;
            if (_.isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)))
                return obj.length === 0;
            return _.keys(obj).length === 0;
        };
        _.pickBy = function (obj, iteratee, context) {
            var result = {};
            var key;
            if (obj == null)
                return result;
            var i;
            var keys;
            iteratee = this.optimizeCb(iteratee, context);
            keys = _.allKeys(obj);
            for (i = 0; i < keys.length; i++) {
                key = keys[i];
                var value = obj[key];
                if (iteratee(value, key, obj))
                    result[key] = value;
            }
            return result;
        };
        _.pick = function (obj) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var result = {};
            var key;
            if (obj == null)
                return result;
            var i;
            var keys;
            keys = this.flatten(arguments, false, false, 1);
            obj = new Object(obj);
            var length = keys.length;
            for (i = 0; i < length; i++) {
                key = keys[i];
                if (key in obj)
                    result[key] = obj[key];
            }
            return result;
        };
        _.sortBy = function (obj, iteratee, context) {
            iteratee = this.cb(iteratee, context);
            return _.pluck(_.map(obj, function (value, index, list) {
                return {
                    value: value,
                    index: index,
                    criteria: iteratee(value, index, list)
                };
            }).sort(function (left, right) {
                var a = left.criteria;
                var b = right.criteria;
                if (a !== b) {
                    if (a > b || a === void 0)
                        return 1;
                    if (a < b || b === void 0)
                        return -1;
                }
                return left.index - right.index;
            }), 'value');
        };
        _.pluck = function (obj, key) {
            return _.map(obj, _.property(key));
        };
        _.ObjProto = Object.prototype;
        _.ArrayProto = Array.prototype;
        _.nativeIsArray = Array.isArray;
        _.nativeKeys = Object.keys;
        _.hasOwnProperty = _.ObjProto.hasOwnProperty;
        _.slice = _.ArrayProto.slice;
        _.isArray = _.nativeIsArray || (function (obj) { return (toString.call(obj) === '[object Array]'); });
        _.extend = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return _.createAssigner(_.allKeys, null, args);
        };
        _.extendOwn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return _.createAssigner(_.keys, null, args);
        };
        _.MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
        _.select = _.filter;
        _.findIndex = _.createIndexFinder(1);
        _.includes = _.contains;
        _.include = _.contains;
        _.detect = _.find;
        _.reduce = _.createReduce(1);
        _.foldl = _.reduce;
        _.inject = _.reduce;
        _.all = _.every;
        _.collect = _.map;
        return _;
    }());
    CloudDiagram._ = _;
})(CloudDiagram || (CloudDiagram = {}));
//# sourceMappingURL=clouddiagram.js.map